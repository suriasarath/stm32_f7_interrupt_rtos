
rtos_interrupt_f7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075a0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08007780  08007780  00017780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007908  08007908  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007908  08007908  00017908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007910  08007910  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007910  08007910  00017910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007914  08007914  00017914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007918  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000467c  20000074  0800798c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200046f0  0800798c  000246f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e3e2  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cdd  00000000  00000000  0003e486  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001738  00000000  00000000  00042168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015c0  00000000  00000000  000438a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024dd8  00000000  00000000  00044e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b0af  00000000  00000000  00069c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6948  00000000  00000000  00084ce7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016b62f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064b4  00000000  00000000  0016b680  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000074 	.word	0x20000074
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007768 	.word	0x08007768

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000078 	.word	0x20000078
 800021c:	08007768 	.word	0x08007768

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468e      	mov	lr, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14d      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025e:	428a      	cmp	r2, r1
 8000260:	4694      	mov	ip, r2
 8000262:	d969      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b152      	cbz	r2, 8000280 <__udivmoddi4+0x30>
 800026a:	fa01 f302 	lsl.w	r3, r1, r2
 800026e:	f1c2 0120 	rsb	r1, r2, #32
 8000272:	fa20 f101 	lsr.w	r1, r0, r1
 8000276:	fa0c fc02 	lsl.w	ip, ip, r2
 800027a:	ea41 0e03 	orr.w	lr, r1, r3
 800027e:	4094      	lsls	r4, r2
 8000280:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000284:	0c21      	lsrs	r1, r4, #16
 8000286:	fbbe f6f8 	udiv	r6, lr, r8
 800028a:	fa1f f78c 	uxth.w	r7, ip
 800028e:	fb08 e316 	mls	r3, r8, r6, lr
 8000292:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000296:	fb06 f107 	mul.w	r1, r6, r7
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002a6:	f080 811f 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 811c 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b0:	3e02      	subs	r6, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a5b      	subs	r3, r3, r1
 80002b6:	b2a4      	uxth	r4, r4
 80002b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002bc:	fb08 3310 	mls	r3, r8, r0, r3
 80002c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c4:	fb00 f707 	mul.w	r7, r0, r7
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	d90a      	bls.n	80002e2 <__udivmoddi4+0x92>
 80002cc:	eb1c 0404 	adds.w	r4, ip, r4
 80002d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002d4:	f080 810a 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002d8:	42a7      	cmp	r7, r4
 80002da:	f240 8107 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002de:	4464      	add	r4, ip
 80002e0:	3802      	subs	r0, #2
 80002e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	2600      	movs	r6, #0
 80002ea:	b11d      	cbz	r5, 80002f4 <__udivmoddi4+0xa4>
 80002ec:	40d4      	lsrs	r4, r2
 80002ee:	2300      	movs	r3, #0
 80002f0:	e9c5 4300 	strd	r4, r3, [r5]
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0xc2>
 80002fe:	2d00      	cmp	r5, #0
 8000300:	f000 80ef 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000304:	2600      	movs	r6, #0
 8000306:	e9c5 0100 	strd	r0, r1, [r5]
 800030a:	4630      	mov	r0, r6
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f683 	clz	r6, r3
 8000316:	2e00      	cmp	r6, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	428b      	cmp	r3, r1
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb61 0303 	sbc.w	r3, r1, r3
 800032a:	2001      	movs	r0, #1
 800032c:	469e      	mov	lr, r3
 800032e:	2d00      	cmp	r5, #0
 8000330:	d0e0      	beq.n	80002f4 <__udivmoddi4+0xa4>
 8000332:	e9c5 4e00 	strd	r4, lr, [r5]
 8000336:	e7dd      	b.n	80002f4 <__udivmoddi4+0xa4>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8092 	bne.w	800046a <__udivmoddi4+0x21a>
 8000346:	eba1 010c 	sub.w	r1, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2601      	movs	r6, #1
 8000354:	0c20      	lsrs	r0, r4, #16
 8000356:	fbb1 f3f7 	udiv	r3, r1, r7
 800035a:	fb07 1113 	mls	r1, r7, r3, r1
 800035e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	4288      	cmp	r0, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0101 	adds.w	r1, ip, r1
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	4288      	cmp	r0, r1
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a09      	subs	r1, r1, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb1 f0f7 	udiv	r0, r1, r7
 8000384:	fb07 1110 	mls	r1, r7, r0, r1
 8000388:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 31ff 	add.w	r1, r0, #4294967295
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4608      	mov	r0, r1
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79c      	b.n	80002ea <__udivmoddi4+0x9a>
 80003b0:	f1c6 0720 	rsb	r7, r6, #32
 80003b4:	40b3      	lsls	r3, r6
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa01 f306 	lsl.w	r3, r1, r6
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40f9      	lsrs	r1, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f306 	lsl.w	r3, r0, r6
 80003d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 1118 	mls	r1, r9, r8, r1
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	4288      	cmp	r0, r1
 80003ea:	fa02 f206 	lsl.w	r2, r2, r6
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	4288      	cmp	r0, r1
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4461      	add	r1, ip
 8000408:	1a09      	subs	r1, r1, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000410:	fb09 1110 	mls	r1, r9, r0, r1
 8000414:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	458e      	cmp	lr, r1
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0101 	adds.w	r1, ip, r1
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	458e      	cmp	lr, r1
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4461      	add	r1, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba1 010e 	sub.w	r1, r1, lr
 800043e:	42a1      	cmp	r1, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15d      	cbz	r5, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb61 010e 	sbc.w	r1, r1, lr
 8000452:	fa01 f707 	lsl.w	r7, r1, r7
 8000456:	fa22 f306 	lsr.w	r3, r2, r6
 800045a:	40f1      	lsrs	r1, r6
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c5 7100 	strd	r7, r1, [r5]
 8000462:	2600      	movs	r6, #0
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	f1c2 0320 	rsb	r3, r2, #32
 800046e:	40d8      	lsrs	r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa21 f303 	lsr.w	r3, r1, r3
 8000478:	4091      	lsls	r1, r2
 800047a:	4301      	orrs	r1, r0
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f0f7 	udiv	r0, r3, r7
 8000488:	fb07 3610 	mls	r6, r7, r0, r3
 800048c:	0c0b      	lsrs	r3, r1, #16
 800048e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000492:	fb00 f60e 	mul.w	r6, r0, lr
 8000496:	429e      	cmp	r6, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	429e      	cmp	r6, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1b9b      	subs	r3, r3, r6
 80004b2:	b289      	uxth	r1, r1
 80004b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b8:	fb07 3316 	mls	r3, r7, r6, r3
 80004bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c0:	fb06 f30e 	mul.w	r3, r6, lr
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0101 	adds.w	r1, ip, r1
 80004cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3e02      	subs	r6, #2
 80004d8:	4461      	add	r1, ip
 80004da:	1ac9      	subs	r1, r1, r3
 80004dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	462e      	mov	r6, r5
 80004e4:	4628      	mov	r0, r5
 80004e6:	e705      	b.n	80002f4 <__udivmoddi4+0xa4>
 80004e8:	4606      	mov	r6, r0
 80004ea:	e6e3      	b.n	80002b4 <__udivmoddi4+0x64>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6f8      	b.n	80002e2 <__udivmoddi4+0x92>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4646      	mov	r6, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4640      	mov	r0, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4461      	add	r1, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4630      	mov	r0, r6
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000524:	b480      	push	{r7}
 8000526:	b085      	sub	sp, #20
 8000528:	af00      	add	r7, sp, #0
 800052a:	60f8      	str	r0, [r7, #12]
 800052c:	60b9      	str	r1, [r7, #8]
 800052e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	4a07      	ldr	r2, [pc, #28]	; (8000550 <vApplicationGetIdleTaskMemory+0x2c>)
 8000534:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000536:	68bb      	ldr	r3, [r7, #8]
 8000538:	4a06      	ldr	r2, [pc, #24]	; (8000554 <vApplicationGetIdleTaskMemory+0x30>)
 800053a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2280      	movs	r2, #128	; 0x80
 8000540:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000542:	bf00      	nop
 8000544:	3714      	adds	r7, #20
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	20000090 	.word	0x20000090
 8000554:	20000144 	.word	0x20000144

08000558 <HAL_GPIO_EXTI_Callback>:
void StartUartReceiveTask(void const * argument);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	4603      	mov	r3, r0
 8000560:	80fb      	strh	r3, [r7, #6]

	//HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);

	if(previous_tick < (HAL_GetTick()-500)){
 8000562:	f000 fd4b 	bl	8000ffc <HAL_GetTick>
 8000566:	4603      	mov	r3, r0
 8000568:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 800056c:	4b0c      	ldr	r3, [pc, #48]	; (80005a0 <HAL_GPIO_EXTI_Callback+0x48>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	429a      	cmp	r2, r3
 8000572:	d910      	bls.n	8000596 <HAL_GPIO_EXTI_Callback+0x3e>
	// xTaskNotifyGive(interruptTaskHandle);
	osSignalSet(interruptTaskHandle, 1);
 8000574:	4b0b      	ldr	r3, [pc, #44]	; (80005a4 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	2101      	movs	r1, #1
 800057a:	4618      	mov	r0, r3
 800057c:	f004 fd94 	bl	80050a8 <osSignalSet>
	HAL_UART_Transmit(&huart3,(uint8_t *)"interrupt \r\n",12,100);
 8000580:	2364      	movs	r3, #100	; 0x64
 8000582:	220c      	movs	r2, #12
 8000584:	4908      	ldr	r1, [pc, #32]	; (80005a8 <HAL_GPIO_EXTI_Callback+0x50>)
 8000586:	4809      	ldr	r0, [pc, #36]	; (80005ac <HAL_GPIO_EXTI_Callback+0x54>)
 8000588:	f002 ff3a 	bl	8003400 <HAL_UART_Transmit>
	previous_tick =  HAL_GetTick();
 800058c:	f000 fd36 	bl	8000ffc <HAL_GetTick>
 8000590:	4603      	mov	r3, r0
 8000592:	4a03      	ldr	r2, [pc, #12]	; (80005a0 <HAL_GPIO_EXTI_Callback+0x48>)
 8000594:	6013      	str	r3, [r2, #0]
	}
}
 8000596:	bf00      	nop
 8000598:	3708      	adds	r7, #8
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	20000344 	.word	0x20000344
 80005a4:	20000938 	.word	0x20000938
 80005a8:	080077c4 	.word	0x080077c4
 80005ac:	20000394 	.word	0x20000394

080005b0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
//	  __HAL_UART_CLEAR_IT(&huart3,UART_IT_ORE);
//	  __HAL_UART_CLEAR_IT(&huart3,UART_IT_RXNE);
//	  __HAL_UART_CLEAR_IT(&huart3,UART_IT_IDLE);

	// HAL_UART_Receive_IT(&huart3,(uint8_t *) pData, 4);
	osSignalSet(uartReceiveHandle,2);
 80005b8:	4b04      	ldr	r3, [pc, #16]	; (80005cc <HAL_UART_RxCpltCallback+0x1c>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	2102      	movs	r1, #2
 80005be:	4618      	mov	r0, r3
 80005c0:	f004 fd72 	bl	80050a8 <osSignalSet>

}
 80005c4:	bf00      	nop
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	2000093c 	.word	0x2000093c

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b5b0      	push	{r4, r5, r7, lr}
 80005d2:	b0a8      	sub	sp, #160	; 0xa0
 80005d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d6:	f000 fcf0 	bl	8000fba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005da:	f000 f8a7 	bl	800072c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005de:	f000 f9b3 	bl	8000948 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005e2:	f000 f94b 	bl	800087c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005e6:	f000 f981 	bl	80008ec <MX_USB_OTG_FS_PCD_Init>
  MX_TIM9_Init();
 80005ea:	f000 f90d 	bl	8000808 <MX_TIM9_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem01 */
  osSemaphoreDef(myBinarySem01);
 80005ee:	2300      	movs	r3, #0
 80005f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80005f4:	2300      	movs	r3, #0
 80005f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 80005fa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80005fe:	2101      	movs	r1, #1
 8000600:	4618      	mov	r0, r3
 8000602:	f004 fddd 	bl	80051c0 <osSemaphoreCreate>
 8000606:	4603      	mov	r3, r0
 8000608:	4a3a      	ldr	r2, [pc, #232]	; (80006f4 <main+0x124>)
 800060a:	6013      	str	r3, [r2, #0]

  /* definition and creation of myCountingSem01 */
  osSemaphoreDef(myCountingSem01);
 800060c:	2300      	movs	r3, #0
 800060e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000612:	2300      	movs	r3, #0
 8000614:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  myCountingSem01Handle = osSemaphoreCreate(osSemaphore(myCountingSem01), 2);
 8000618:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800061c:	2102      	movs	r1, #2
 800061e:	4618      	mov	r0, r3
 8000620:	f004 fdce 	bl	80051c0 <osSemaphoreCreate>
 8000624:	4603      	mov	r3, r0
 8000626:	4a34      	ldr	r2, [pc, #208]	; (80006f8 <main+0x128>)
 8000628:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800062a:	4b34      	ldr	r3, [pc, #208]	; (80006fc <main+0x12c>)
 800062c:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000630:	461d      	mov	r5, r3
 8000632:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000634:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000636:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800063a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800063e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000642:	2100      	movs	r1, #0
 8000644:	4618      	mov	r0, r3
 8000646:	f004 fcce 	bl	8004fe6 <osThreadCreate>
 800064a:	4603      	mov	r3, r0
 800064c:	4a2c      	ldr	r2, [pc, #176]	; (8000700 <main+0x130>)
 800064e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  HAL_UART_Receive_IT(&huart3,(uint8_t *) pData, 8);
 8000650:	2208      	movs	r2, #8
 8000652:	492c      	ldr	r1, [pc, #176]	; (8000704 <main+0x134>)
 8000654:	482c      	ldr	r0, [pc, #176]	; (8000708 <main+0x138>)
 8000656:	f002 ff56 	bl	8003506 <HAL_UART_Receive_IT>
  osThreadDef(secondTask,StartSecondTask,1,0,128);
 800065a:	4b2c      	ldr	r3, [pc, #176]	; (800070c <main+0x13c>)
 800065c:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000660:	461d      	mov	r5, r3
 8000662:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000664:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000666:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800066a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  secondTaskHandle = osThreadCreate(osThread(secondTask),NULL);
 800066e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000672:	2100      	movs	r1, #0
 8000674:	4618      	mov	r0, r3
 8000676:	f004 fcb6 	bl	8004fe6 <osThreadCreate>
 800067a:	4603      	mov	r3, r0
 800067c:	4a24      	ldr	r2, [pc, #144]	; (8000710 <main+0x140>)
 800067e:	6013      	str	r3, [r2, #0]

  osThreadDef(thirdTask,StartThirdTask,2,0,128);
 8000680:	4b24      	ldr	r3, [pc, #144]	; (8000714 <main+0x144>)
 8000682:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000686:	461d      	mov	r5, r3
 8000688:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800068a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800068c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000690:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  thirdTaskHandle = osThreadCreate(osThread(thirdTask), NULL);
 8000694:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f004 fca3 	bl	8004fe6 <osThreadCreate>
 80006a0:	4603      	mov	r3, r0
 80006a2:	4a1d      	ldr	r2, [pc, #116]	; (8000718 <main+0x148>)
 80006a4:	6013      	str	r3, [r2, #0]


  osThreadDef(interruptTask,StartInterruptTask,2,0,128);
 80006a6:	4b1d      	ldr	r3, [pc, #116]	; (800071c <main+0x14c>)
 80006a8:	f107 0420 	add.w	r4, r7, #32
 80006ac:	461d      	mov	r5, r3
 80006ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  interruptTaskHandle = osThreadCreate(osThread(interruptTask), NULL);
 80006ba:	f107 0320 	add.w	r3, r7, #32
 80006be:	2100      	movs	r1, #0
 80006c0:	4618      	mov	r0, r3
 80006c2:	f004 fc90 	bl	8004fe6 <osThreadCreate>
 80006c6:	4603      	mov	r3, r0
 80006c8:	4a15      	ldr	r2, [pc, #84]	; (8000720 <main+0x150>)
 80006ca:	6013      	str	r3, [r2, #0]

  osThreadDef(uartReceiveTask,StartUartReceiveTask,3,0,128);
 80006cc:	4b15      	ldr	r3, [pc, #84]	; (8000724 <main+0x154>)
 80006ce:	1d3c      	adds	r4, r7, #4
 80006d0:	461d      	mov	r5, r3
 80006d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uartReceiveHandle = osThreadCreate(osThread(uartReceiveTask),NULL);
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f004 fc7f 	bl	8004fe6 <osThreadCreate>
 80006e8:	4603      	mov	r3, r0
 80006ea:	4a0f      	ldr	r2, [pc, #60]	; (8000728 <main+0x158>)
 80006ec:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006ee:	f004 fc73 	bl	8004fd8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006f2:	e7fe      	b.n	80006f2 <main+0x122>
 80006f4:	20000928 	.word	0x20000928
 80006f8:	2000092c 	.word	0x2000092c
 80006fc:	080077d4 	.word	0x080077d4
 8000700:	20000924 	.word	0x20000924
 8000704:	20000940 	.word	0x20000940
 8000708:	20000394 	.word	0x20000394
 800070c:	080077f0 	.word	0x080077f0
 8000710:	20000930 	.word	0x20000930
 8000714:	0800780c 	.word	0x0800780c
 8000718:	20000934 	.word	0x20000934
 800071c:	08007828 	.word	0x08007828
 8000720:	20000938 	.word	0x20000938
 8000724:	08007844 	.word	0x08007844
 8000728:	2000093c 	.word	0x2000093c

0800072c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b094      	sub	sp, #80	; 0x50
 8000730:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000732:	f107 0320 	add.w	r3, r7, #32
 8000736:	2230      	movs	r2, #48	; 0x30
 8000738:	2100      	movs	r1, #0
 800073a:	4618      	mov	r0, r3
 800073c:	f006 ff4a 	bl	80075d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
 800074e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000750:	f001 f928 	bl	80019a4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000754:	4b2a      	ldr	r3, [pc, #168]	; (8000800 <SystemClock_Config+0xd4>)
 8000756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000758:	4a29      	ldr	r2, [pc, #164]	; (8000800 <SystemClock_Config+0xd4>)
 800075a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800075e:	6413      	str	r3, [r2, #64]	; 0x40
 8000760:	4b27      	ldr	r3, [pc, #156]	; (8000800 <SystemClock_Config+0xd4>)
 8000762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000768:	60bb      	str	r3, [r7, #8]
 800076a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800076c:	4b25      	ldr	r3, [pc, #148]	; (8000804 <SystemClock_Config+0xd8>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a24      	ldr	r2, [pc, #144]	; (8000804 <SystemClock_Config+0xd8>)
 8000772:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000776:	6013      	str	r3, [r2, #0]
 8000778:	4b22      	ldr	r3, [pc, #136]	; (8000804 <SystemClock_Config+0xd8>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000784:	2301      	movs	r3, #1
 8000786:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000788:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800078c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800078e:	2302      	movs	r3, #2
 8000790:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000792:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000796:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000798:	2304      	movs	r3, #4
 800079a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 800079c:	23d8      	movs	r3, #216	; 0xd8
 800079e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007a0:	2302      	movs	r3, #2
 80007a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80007a4:	2309      	movs	r3, #9
 80007a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a8:	f107 0320 	add.w	r3, r7, #32
 80007ac:	4618      	mov	r0, r3
 80007ae:	f001 f959 	bl	8001a64 <HAL_RCC_OscConfig>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80007b8:	f000 f9e2 	bl	8000b80 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007bc:	f001 f902 	bl	80019c4 <HAL_PWREx_EnableOverDrive>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007c6:	f000 f9db 	bl	8000b80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ca:	230f      	movs	r3, #15
 80007cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ce:	2302      	movs	r3, #2
 80007d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80007e2:	f107 030c 	add.w	r3, r7, #12
 80007e6:	2107      	movs	r1, #7
 80007e8:	4618      	mov	r0, r3
 80007ea:	f001 fbdf 	bl	8001fac <HAL_RCC_ClockConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80007f4:	f000 f9c4 	bl	8000b80 <Error_Handler>
  }
}
 80007f8:	bf00      	nop
 80007fa:	3750      	adds	r7, #80	; 0x50
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40023800 	.word	0x40023800
 8000804:	40007000 	.word	0x40007000

08000808 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800080e:	463b      	mov	r3, r7
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800081a:	4b16      	ldr	r3, [pc, #88]	; (8000874 <MX_TIM9_Init+0x6c>)
 800081c:	4a16      	ldr	r2, [pc, #88]	; (8000878 <MX_TIM9_Init+0x70>)
 800081e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 216;
 8000820:	4b14      	ldr	r3, [pc, #80]	; (8000874 <MX_TIM9_Init+0x6c>)
 8000822:	22d8      	movs	r2, #216	; 0xd8
 8000824:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000826:	4b13      	ldr	r3, [pc, #76]	; (8000874 <MX_TIM9_Init+0x6c>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 800082c:	4b11      	ldr	r3, [pc, #68]	; (8000874 <MX_TIM9_Init+0x6c>)
 800082e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000832:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000834:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <MX_TIM9_Init+0x6c>)
 8000836:	2200      	movs	r2, #0
 8000838:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <MX_TIM9_Init+0x6c>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8000840:	480c      	ldr	r0, [pc, #48]	; (8000874 <MX_TIM9_Init+0x6c>)
 8000842:	f002 f955 	bl	8002af0 <HAL_TIM_Base_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 800084c:	f000 f998 	bl	8000b80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000850:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000854:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8000856:	463b      	mov	r3, r7
 8000858:	4619      	mov	r1, r3
 800085a:	4806      	ldr	r0, [pc, #24]	; (8000874 <MX_TIM9_Init+0x6c>)
 800085c:	f002 fb38 	bl	8002ed0 <HAL_TIM_ConfigClockSource>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8000866:	f000 f98b 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 800086a:	bf00      	nop
 800086c:	3710      	adds	r7, #16
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	20000348 	.word	0x20000348
 8000878:	40014000 	.word	0x40014000

0800087c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000880:	4b18      	ldr	r3, [pc, #96]	; (80008e4 <MX_USART3_UART_Init+0x68>)
 8000882:	4a19      	ldr	r2, [pc, #100]	; (80008e8 <MX_USART3_UART_Init+0x6c>)
 8000884:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000886:	4b17      	ldr	r3, [pc, #92]	; (80008e4 <MX_USART3_UART_Init+0x68>)
 8000888:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800088c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800088e:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <MX_USART3_UART_Init+0x68>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000894:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <MX_USART3_UART_Init+0x68>)
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800089a:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <MX_USART3_UART_Init+0x68>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008a0:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <MX_USART3_UART_Init+0x68>)
 80008a2:	220c      	movs	r2, #12
 80008a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a6:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <MX_USART3_UART_Init+0x68>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ac:	4b0d      	ldr	r3, [pc, #52]	; (80008e4 <MX_USART3_UART_Init+0x68>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008b2:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <MX_USART3_UART_Init+0x68>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008b8:	4b0a      	ldr	r3, [pc, #40]	; (80008e4 <MX_USART3_UART_Init+0x68>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008be:	4809      	ldr	r0, [pc, #36]	; (80008e4 <MX_USART3_UART_Init+0x68>)
 80008c0:	f002 fd50 	bl	8003364 <HAL_UART_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008ca:	f000 f959 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  // HAL_NVIC_SetPriority(&huart3,5, 0);
  // __HAL_UART_ENABLE_IT(&huart3,UART_IT_ORE);
  __HAL_UART_ENABLE_IT(&huart3,UART_IT_RXNE);
 80008ce:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <MX_USART3_UART_Init+0x68>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	4b03      	ldr	r3, [pc, #12]	; (80008e4 <MX_USART3_UART_Init+0x68>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f042 0220 	orr.w	r2, r2, #32
 80008dc:	601a      	str	r2, [r3, #0]
  // __HAL_UART_ENABLE_IT(&huart3,UART_IT_IDLE);
  /* USER CODE END USART3_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20000394 	.word	0x20000394
 80008e8:	40004800 	.word	0x40004800

080008ec <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008f0:	4b14      	ldr	r3, [pc, #80]	; (8000944 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008f6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80008f8:	4b12      	ldr	r3, [pc, #72]	; (8000944 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008fa:	2206      	movs	r2, #6
 80008fc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008fe:	4b11      	ldr	r3, [pc, #68]	; (8000944 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000904:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000906:	2202      	movs	r2, #2
 8000908:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800090c:	2201      	movs	r2, #1
 800090e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000912:	2200      	movs	r2, #0
 8000914:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000916:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000918:	2200      	movs	r2, #0
 800091a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800091c:	4b09      	ldr	r3, [pc, #36]	; (8000944 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800091e:	2201      	movs	r2, #1
 8000920:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000922:	4b08      	ldr	r3, [pc, #32]	; (8000944 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000924:	2201      	movs	r2, #1
 8000926:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800092a:	2200      	movs	r2, #0
 800092c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800092e:	4805      	ldr	r0, [pc, #20]	; (8000944 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000930:	f000 fef0 	bl	8001714 <HAL_PCD_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800093a:	f000 f921 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	2000041c 	.word	0x2000041c

08000948 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b08c      	sub	sp, #48	; 0x30
 800094c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]
 800095a:	60da      	str	r2, [r3, #12]
 800095c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800095e:	4b4b      	ldr	r3, [pc, #300]	; (8000a8c <MX_GPIO_Init+0x144>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a4a      	ldr	r2, [pc, #296]	; (8000a8c <MX_GPIO_Init+0x144>)
 8000964:	f043 0304 	orr.w	r3, r3, #4
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b48      	ldr	r3, [pc, #288]	; (8000a8c <MX_GPIO_Init+0x144>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0304 	and.w	r3, r3, #4
 8000972:	61bb      	str	r3, [r7, #24]
 8000974:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000976:	4b45      	ldr	r3, [pc, #276]	; (8000a8c <MX_GPIO_Init+0x144>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a44      	ldr	r2, [pc, #272]	; (8000a8c <MX_GPIO_Init+0x144>)
 800097c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b42      	ldr	r3, [pc, #264]	; (8000a8c <MX_GPIO_Init+0x144>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800098a:	617b      	str	r3, [r7, #20]
 800098c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800098e:	4b3f      	ldr	r3, [pc, #252]	; (8000a8c <MX_GPIO_Init+0x144>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a3e      	ldr	r2, [pc, #248]	; (8000a8c <MX_GPIO_Init+0x144>)
 8000994:	f043 0302 	orr.w	r3, r3, #2
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b3c      	ldr	r3, [pc, #240]	; (8000a8c <MX_GPIO_Init+0x144>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0302 	and.w	r3, r3, #2
 80009a2:	613b      	str	r3, [r7, #16]
 80009a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009a6:	4b39      	ldr	r3, [pc, #228]	; (8000a8c <MX_GPIO_Init+0x144>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a38      	ldr	r2, [pc, #224]	; (8000a8c <MX_GPIO_Init+0x144>)
 80009ac:	f043 0308 	orr.w	r3, r3, #8
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b36      	ldr	r3, [pc, #216]	; (8000a8c <MX_GPIO_Init+0x144>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0308 	and.w	r3, r3, #8
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009be:	4b33      	ldr	r3, [pc, #204]	; (8000a8c <MX_GPIO_Init+0x144>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a32      	ldr	r2, [pc, #200]	; (8000a8c <MX_GPIO_Init+0x144>)
 80009c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b30      	ldr	r3, [pc, #192]	; (8000a8c <MX_GPIO_Init+0x144>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d6:	4b2d      	ldr	r3, [pc, #180]	; (8000a8c <MX_GPIO_Init+0x144>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a2c      	ldr	r2, [pc, #176]	; (8000a8c <MX_GPIO_Init+0x144>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b2a      	ldr	r3, [pc, #168]	; (8000a8c <MX_GPIO_Init+0x144>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009ee:	2200      	movs	r2, #0
 80009f0:	f244 0181 	movw	r1, #16513	; 0x4081
 80009f4:	4826      	ldr	r0, [pc, #152]	; (8000a90 <MX_GPIO_Init+0x148>)
 80009f6:	f000 fe41 	bl	800167c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2140      	movs	r1, #64	; 0x40
 80009fe:	4825      	ldr	r0, [pc, #148]	; (8000a94 <MX_GPIO_Init+0x14c>)
 8000a00:	f000 fe3c 	bl	800167c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a0a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a14:	f107 031c 	add.w	r3, r7, #28
 8000a18:	4619      	mov	r1, r3
 8000a1a:	481f      	ldr	r0, [pc, #124]	; (8000a98 <MX_GPIO_Init+0x150>)
 8000a1c:	f000 fc92 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a20:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a26:	2301      	movs	r3, #1
 8000a28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a32:	f107 031c 	add.w	r3, r7, #28
 8000a36:	4619      	mov	r1, r3
 8000a38:	4815      	ldr	r0, [pc, #84]	; (8000a90 <MX_GPIO_Init+0x148>)
 8000a3a:	f000 fc83 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a3e:	2340      	movs	r3, #64	; 0x40
 8000a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a42:	2301      	movs	r3, #1
 8000a44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a4e:	f107 031c 	add.w	r3, r7, #28
 8000a52:	4619      	mov	r1, r3
 8000a54:	480f      	ldr	r0, [pc, #60]	; (8000a94 <MX_GPIO_Init+0x14c>)
 8000a56:	f000 fc75 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a5a:	2380      	movs	r3, #128	; 0x80
 8000a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a66:	f107 031c 	add.w	r3, r7, #28
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4809      	ldr	r0, [pc, #36]	; (8000a94 <MX_GPIO_Init+0x14c>)
 8000a6e:	f000 fc69 	bl	8001344 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2105      	movs	r1, #5
 8000a76:	2028      	movs	r0, #40	; 0x28
 8000a78:	f000 fba8 	bl	80011cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a7c:	2028      	movs	r0, #40	; 0x28
 8000a7e:	f000 fbc1 	bl	8001204 <HAL_NVIC_EnableIRQ>

}
 8000a82:	bf00      	nop
 8000a84:	3730      	adds	r7, #48	; 0x30
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40020400 	.word	0x40020400
 8000a94:	40021800 	.word	0x40021800
 8000a98:	40020800 	.word	0x40020800

08000a9c <StartSecondTask>:

/* USER CODE BEGIN 4 */
void StartSecondTask(void const * argument)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000aa4:	2180      	movs	r1, #128	; 0x80
 8000aa6:	4803      	ldr	r0, [pc, #12]	; (8000ab4 <StartSecondTask+0x18>)
 8000aa8:	f000 fe01 	bl	80016ae <HAL_GPIO_TogglePin>
	  osDelay(240);
 8000aac:	20f0      	movs	r0, #240	; 0xf0
 8000aae:	f004 fae6 	bl	800507e <osDelay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000ab2:	e7f7      	b.n	8000aa4 <StartSecondTask+0x8>
 8000ab4:	40020400 	.word	0x40020400

08000ab8 <StartThirdTask>:
  }
  /* USER CODE END 5 */
}
void StartThirdTask(void const * argument)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000ac0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ac4:	4803      	ldr	r0, [pc, #12]	; (8000ad4 <StartThirdTask+0x1c>)
 8000ac6:	f000 fdf2 	bl	80016ae <HAL_GPIO_TogglePin>
	  osDelay(160);
 8000aca:	20a0      	movs	r0, #160	; 0xa0
 8000acc:	f004 fad7 	bl	800507e <osDelay>
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000ad0:	e7f6      	b.n	8000ac0 <StartThirdTask+0x8>
 8000ad2:	bf00      	nop
 8000ad4:	40020400 	.word	0x40020400

08000ad8 <StartInterruptTask>:
  }
  /* USER CODE END 5 */
}
void StartInterruptTask(void const * argument)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b086      	sub	sp, #24
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6178      	str	r0, [r7, #20]
  int value;
  for(;;)
  {
	  //value = ulTaskNotifyTake(pdTRUE, (TickType_t)portMAX_DELAY);
	  //HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
	  osSignalWait(1, osWaitForever);
 8000ae0:	463b      	mov	r3, r7
 8000ae2:	f04f 32ff 	mov.w	r2, #4294967295
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f004 fb1d 	bl	8005128 <osSignalWait>
	  HAL_UART_Transmit(&huart3,(uint8_t *)"interrupt handle \r\n",19,100);
 8000aee:	2364      	movs	r3, #100	; 0x64
 8000af0:	2213      	movs	r2, #19
 8000af2:	4904      	ldr	r1, [pc, #16]	; (8000b04 <StartInterruptTask+0x2c>)
 8000af4:	4804      	ldr	r0, [pc, #16]	; (8000b08 <StartInterruptTask+0x30>)
 8000af6:	f002 fc83 	bl	8003400 <HAL_UART_Transmit>
	  osDelay(160);
 8000afa:	20a0      	movs	r0, #160	; 0xa0
 8000afc:	f004 fabf 	bl	800507e <osDelay>
	  osSignalWait(1, osWaitForever);
 8000b00:	e7ee      	b.n	8000ae0 <StartInterruptTask+0x8>
 8000b02:	bf00      	nop
 8000b04:	08007860 	.word	0x08007860
 8000b08:	20000394 	.word	0x20000394

08000b0c <StartUartReceiveTask>:
  }
  /* USER CODE END 5 */
}

void StartUartReceiveTask(void const * argument){
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6178      	str	r0, [r7, #20]

	for(;;){
		osSignalWait(2, osWaitForever);
 8000b14:	463b      	mov	r3, r7
 8000b16:	f04f 32ff 	mov.w	r2, #4294967295
 8000b1a:	2102      	movs	r1, #2
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f004 fb03 	bl	8005128 <osSignalWait>
		// HAL_UART_Receive_IT(&huart3,(uint8_t *) pData, 4);
		HAL_UART_Transmit(&huart3, (uint8_t *)"DATA Received \r\n", 16, 100);
 8000b22:	2364      	movs	r3, #100	; 0x64
 8000b24:	2210      	movs	r2, #16
 8000b26:	4904      	ldr	r1, [pc, #16]	; (8000b38 <StartUartReceiveTask+0x2c>)
 8000b28:	4804      	ldr	r0, [pc, #16]	; (8000b3c <StartUartReceiveTask+0x30>)
 8000b2a:	f002 fc69 	bl	8003400 <HAL_UART_Transmit>

//		  __HAL_UART_ENABLE_IT(&huart3,UART_IT_ORE);
//		  __HAL_UART_ENABLE_IT(&huart3,UART_IT_RXNE);
//		  __HAL_UART_ENABLE_IT(&huart3,UART_IT_IDLE);

		osDelay(100);
 8000b2e:	2064      	movs	r0, #100	; 0x64
 8000b30:	f004 faa5 	bl	800507e <osDelay>
		osSignalWait(2, osWaitForever);
 8000b34:	e7ee      	b.n	8000b14 <StartUartReceiveTask+0x8>
 8000b36:	bf00      	nop
 8000b38:	08007874 	.word	0x08007874
 8000b3c:	20000394 	.word	0x20000394

08000b40 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000b48:	2101      	movs	r1, #1
 8000b4a:	4803      	ldr	r0, [pc, #12]	; (8000b58 <StartDefaultTask+0x18>)
 8000b4c:	f000 fdaf 	bl	80016ae <HAL_GPIO_TogglePin>
	  osDelay(80);
 8000b50:	2050      	movs	r0, #80	; 0x50
 8000b52:	f004 fa94 	bl	800507e <osDelay>
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000b56:	e7f7      	b.n	8000b48 <StartDefaultTask+0x8>
 8000b58:	40020400 	.word	0x40020400

08000b5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a04      	ldr	r2, [pc, #16]	; (8000b7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d101      	bne.n	8000b72 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b6e:	f000 fa31 	bl	8000fd4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40001000 	.word	0x40001000

08000b80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b84:	b672      	cpsid	i
}
 8000b86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <Error_Handler+0x8>
	...

08000b8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b92:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <HAL_MspInit+0x4c>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	4a10      	ldr	r2, [pc, #64]	; (8000bd8 <HAL_MspInit+0x4c>)
 8000b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <HAL_MspInit+0x4c>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000baa:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <HAL_MspInit+0x4c>)
 8000bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bae:	4a0a      	ldr	r2, [pc, #40]	; (8000bd8 <HAL_MspInit+0x4c>)
 8000bb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bb6:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <HAL_MspInit+0x4c>)
 8000bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bbe:	603b      	str	r3, [r7, #0]
 8000bc0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	210f      	movs	r1, #15
 8000bc6:	f06f 0001 	mvn.w	r0, #1
 8000bca:	f000 faff 	bl	80011cc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40023800 	.word	0x40023800

08000bdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM9)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a0a      	ldr	r2, [pc, #40]	; (8000c14 <HAL_TIM_Base_MspInit+0x38>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d10b      	bne.n	8000c06 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8000bee:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <HAL_TIM_Base_MspInit+0x3c>)
 8000bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf2:	4a09      	ldr	r2, [pc, #36]	; (8000c18 <HAL_TIM_Base_MspInit+0x3c>)
 8000bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bfa:	4b07      	ldr	r3, [pc, #28]	; (8000c18 <HAL_TIM_Base_MspInit+0x3c>)
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8000c06:	bf00      	nop
 8000c08:	3714      	adds	r7, #20
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	40014000 	.word	0x40014000
 8000c18:	40023800 	.word	0x40023800

08000c1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b0aa      	sub	sp, #168	; 0xa8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	2280      	movs	r2, #128	; 0x80
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f006 fcc9 	bl	80075d4 <memset>
  if(huart->Instance==USART3)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a26      	ldr	r2, [pc, #152]	; (8000ce0 <HAL_UART_MspInit+0xc4>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d144      	bne.n	8000cd6 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c50:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000c52:	2300      	movs	r3, #0
 8000c54:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c56:	f107 0314 	add.w	r3, r7, #20
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f001 fbfe 	bl	800245c <HAL_RCCEx_PeriphCLKConfig>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c66:	f7ff ff8b 	bl	8000b80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c6a:	4b1e      	ldr	r3, [pc, #120]	; (8000ce4 <HAL_UART_MspInit+0xc8>)
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6e:	4a1d      	ldr	r2, [pc, #116]	; (8000ce4 <HAL_UART_MspInit+0xc8>)
 8000c70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c74:	6413      	str	r3, [r2, #64]	; 0x40
 8000c76:	4b1b      	ldr	r3, [pc, #108]	; (8000ce4 <HAL_UART_MspInit+0xc8>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c82:	4b18      	ldr	r3, [pc, #96]	; (8000ce4 <HAL_UART_MspInit+0xc8>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	4a17      	ldr	r2, [pc, #92]	; (8000ce4 <HAL_UART_MspInit+0xc8>)
 8000c88:	f043 0308 	orr.w	r3, r3, #8
 8000c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8e:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <HAL_UART_MspInit+0xc8>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	f003 0308 	and.w	r3, r3, #8
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c9a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cb4:	2307      	movs	r3, #7
 8000cb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cba:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4809      	ldr	r0, [pc, #36]	; (8000ce8 <HAL_UART_MspInit+0xcc>)
 8000cc2:	f000 fb3f 	bl	8001344 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2105      	movs	r1, #5
 8000cca:	2027      	movs	r0, #39	; 0x27
 8000ccc:	f000 fa7e 	bl	80011cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000cd0:	2027      	movs	r0, #39	; 0x27
 8000cd2:	f000 fa97 	bl	8001204 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cd6:	bf00      	nop
 8000cd8:	37a8      	adds	r7, #168	; 0xa8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40004800 	.word	0x40004800
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40020c00 	.word	0x40020c00

08000cec <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b0aa      	sub	sp, #168	; 0xa8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	2280      	movs	r2, #128	; 0x80
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f006 fc61 	bl	80075d4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d1a:	d159      	bne.n	8000dd0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000d1c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000d20:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f001 fb95 	bl	800245c <HAL_RCCEx_PeriphCLKConfig>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000d38:	f7ff ff22 	bl	8000b80 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3c:	4b26      	ldr	r3, [pc, #152]	; (8000dd8 <HAL_PCD_MspInit+0xec>)
 8000d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d40:	4a25      	ldr	r2, [pc, #148]	; (8000dd8 <HAL_PCD_MspInit+0xec>)
 8000d42:	f043 0301 	orr.w	r3, r3, #1
 8000d46:	6313      	str	r3, [r2, #48]	; 0x30
 8000d48:	4b23      	ldr	r3, [pc, #140]	; (8000dd8 <HAL_PCD_MspInit+0xec>)
 8000d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4c:	f003 0301 	and.w	r3, r3, #1
 8000d50:	613b      	str	r3, [r7, #16]
 8000d52:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d54:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000d58:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d68:	2303      	movs	r3, #3
 8000d6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d6e:	230a      	movs	r3, #10
 8000d70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d74:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4818      	ldr	r0, [pc, #96]	; (8000ddc <HAL_PCD_MspInit+0xf0>)
 8000d7c:	f000 fae2 	bl	8001344 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d84:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d94:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4810      	ldr	r0, [pc, #64]	; (8000ddc <HAL_PCD_MspInit+0xf0>)
 8000d9c:	f000 fad2 	bl	8001344 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000da0:	4b0d      	ldr	r3, [pc, #52]	; (8000dd8 <HAL_PCD_MspInit+0xec>)
 8000da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000da4:	4a0c      	ldr	r2, [pc, #48]	; (8000dd8 <HAL_PCD_MspInit+0xec>)
 8000da6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000daa:	6353      	str	r3, [r2, #52]	; 0x34
 8000dac:	4b0a      	ldr	r3, [pc, #40]	; (8000dd8 <HAL_PCD_MspInit+0xec>)
 8000dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <HAL_PCD_MspInit+0xec>)
 8000dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dbc:	4a06      	ldr	r2, [pc, #24]	; (8000dd8 <HAL_PCD_MspInit+0xec>)
 8000dbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dc2:	6453      	str	r3, [r2, #68]	; 0x44
 8000dc4:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <HAL_PCD_MspInit+0xec>)
 8000dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dcc:	60bb      	str	r3, [r7, #8]
 8000dce:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000dd0:	bf00      	nop
 8000dd2:	37a8      	adds	r7, #168	; 0xa8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40020000 	.word	0x40020000

08000de0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08e      	sub	sp, #56	; 0x38
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000de8:	2300      	movs	r3, #0
 8000dea:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000dec:	2300      	movs	r3, #0
 8000dee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000df0:	4b33      	ldr	r3, [pc, #204]	; (8000ec0 <HAL_InitTick+0xe0>)
 8000df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df4:	4a32      	ldr	r2, [pc, #200]	; (8000ec0 <HAL_InitTick+0xe0>)
 8000df6:	f043 0310 	orr.w	r3, r3, #16
 8000dfa:	6413      	str	r3, [r2, #64]	; 0x40
 8000dfc:	4b30      	ldr	r3, [pc, #192]	; (8000ec0 <HAL_InitTick+0xe0>)
 8000dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e00:	f003 0310 	and.w	r3, r3, #16
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e08:	f107 0210 	add.w	r2, r7, #16
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	4611      	mov	r1, r2
 8000e12:	4618      	mov	r0, r3
 8000e14:	f001 faf0 	bl	80023f8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e18:	6a3b      	ldr	r3, [r7, #32]
 8000e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d103      	bne.n	8000e2a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e22:	f001 fac1 	bl	80023a8 <HAL_RCC_GetPCLK1Freq>
 8000e26:	6378      	str	r0, [r7, #52]	; 0x34
 8000e28:	e004      	b.n	8000e34 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e2a:	f001 fabd 	bl	80023a8 <HAL_RCC_GetPCLK1Freq>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e36:	4a23      	ldr	r2, [pc, #140]	; (8000ec4 <HAL_InitTick+0xe4>)
 8000e38:	fba2 2303 	umull	r2, r3, r2, r3
 8000e3c:	0c9b      	lsrs	r3, r3, #18
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e42:	4b21      	ldr	r3, [pc, #132]	; (8000ec8 <HAL_InitTick+0xe8>)
 8000e44:	4a21      	ldr	r2, [pc, #132]	; (8000ecc <HAL_InitTick+0xec>)
 8000e46:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e48:	4b1f      	ldr	r3, [pc, #124]	; (8000ec8 <HAL_InitTick+0xe8>)
 8000e4a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e4e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e50:	4a1d      	ldr	r2, [pc, #116]	; (8000ec8 <HAL_InitTick+0xe8>)
 8000e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e54:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e56:	4b1c      	ldr	r3, [pc, #112]	; (8000ec8 <HAL_InitTick+0xe8>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e5c:	4b1a      	ldr	r3, [pc, #104]	; (8000ec8 <HAL_InitTick+0xe8>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e62:	4b19      	ldr	r3, [pc, #100]	; (8000ec8 <HAL_InitTick+0xe8>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000e68:	4817      	ldr	r0, [pc, #92]	; (8000ec8 <HAL_InitTick+0xe8>)
 8000e6a:	f001 fe41 	bl	8002af0 <HAL_TIM_Base_Init>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000e74:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d11b      	bne.n	8000eb4 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000e7c:	4812      	ldr	r0, [pc, #72]	; (8000ec8 <HAL_InitTick+0xe8>)
 8000e7e:	f001 fe8f 	bl	8002ba0 <HAL_TIM_Base_Start_IT>
 8000e82:	4603      	mov	r3, r0
 8000e84:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000e88:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d111      	bne.n	8000eb4 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e90:	2036      	movs	r0, #54	; 0x36
 8000e92:	f000 f9b7 	bl	8001204 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2b0f      	cmp	r3, #15
 8000e9a:	d808      	bhi.n	8000eae <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	6879      	ldr	r1, [r7, #4]
 8000ea0:	2036      	movs	r0, #54	; 0x36
 8000ea2:	f000 f993 	bl	80011cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ea6:	4a0a      	ldr	r2, [pc, #40]	; (8000ed0 <HAL_InitTick+0xf0>)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6013      	str	r3, [r2, #0]
 8000eac:	e002      	b.n	8000eb4 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000eb4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3738      	adds	r7, #56	; 0x38
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	431bde83 	.word	0x431bde83
 8000ec8:	2000094c 	.word	0x2000094c
 8000ecc:	40001000 	.word	0x40001000
 8000ed0:	20000004 	.word	0x20000004

08000ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <NMI_Handler+0x4>

08000eda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ede:	e7fe      	b.n	8000ede <HardFault_Handler+0x4>

08000ee0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <MemManage_Handler+0x4>

08000ee6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eea:	e7fe      	b.n	8000eea <BusFault_Handler+0x4>

08000eec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <UsageFault_Handler+0x4>

08000ef2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f04:	4804      	ldr	r0, [pc, #16]	; (8000f18 <USART3_IRQHandler+0x18>)
 8000f06:	f002 fb43 	bl	8003590 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  HAL_UART_Receive_IT(&huart3,pData,8);
 8000f0a:	2208      	movs	r2, #8
 8000f0c:	4903      	ldr	r1, [pc, #12]	; (8000f1c <USART3_IRQHandler+0x1c>)
 8000f0e:	4802      	ldr	r0, [pc, #8]	; (8000f18 <USART3_IRQHandler+0x18>)
 8000f10:	f002 faf9 	bl	8003506 <HAL_UART_Receive_IT>
  /* USER CODE END USART3_IRQn 1 */
}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000394 	.word	0x20000394
 8000f1c:	20000940 	.word	0x20000940

08000f20 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000f24:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f28:	f000 fbdc 	bl	80016e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f34:	4802      	ldr	r0, [pc, #8]	; (8000f40 <TIM6_DAC_IRQHandler+0x10>)
 8000f36:	f001 feab 	bl	8002c90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	2000094c 	.word	0x2000094c

08000f44 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <SystemInit+0x20>)
 8000f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f4e:	4a05      	ldr	r2, [pc, #20]	; (8000f64 <SystemInit+0x20>)
 8000f50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fa0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f6c:	480d      	ldr	r0, [pc, #52]	; (8000fa4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f6e:	490e      	ldr	r1, [pc, #56]	; (8000fa8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f70:	4a0e      	ldr	r2, [pc, #56]	; (8000fac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f74:	e002      	b.n	8000f7c <LoopCopyDataInit>

08000f76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f7a:	3304      	adds	r3, #4

08000f7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f80:	d3f9      	bcc.n	8000f76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f82:	4a0b      	ldr	r2, [pc, #44]	; (8000fb0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f84:	4c0b      	ldr	r4, [pc, #44]	; (8000fb4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f88:	e001      	b.n	8000f8e <LoopFillZerobss>

08000f8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f8c:	3204      	adds	r2, #4

08000f8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f90:	d3fb      	bcc.n	8000f8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f92:	f7ff ffd7 	bl	8000f44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f96:	f006 fae9 	bl	800756c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f9a:	f7ff fb19 	bl	80005d0 <main>
  bx  lr    
 8000f9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fa0:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8000fa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000fac:	08007918 	.word	0x08007918
  ldr r2, =_sbss
 8000fb0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000fb4:	200046f0 	.word	0x200046f0

08000fb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fb8:	e7fe      	b.n	8000fb8 <ADC_IRQHandler>

08000fba <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fbe:	2003      	movs	r0, #3
 8000fc0:	f000 f8f9 	bl	80011b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fc4:	200f      	movs	r0, #15
 8000fc6:	f7ff ff0b 	bl	8000de0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fca:	f7ff fddf 	bl	8000b8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fce:	2300      	movs	r3, #0
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd8:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_IncTick+0x20>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <HAL_IncTick+0x24>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	4a04      	ldr	r2, [pc, #16]	; (8000ff8 <HAL_IncTick+0x24>)
 8000fe6:	6013      	str	r3, [r2, #0]
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	20000008 	.word	0x20000008
 8000ff8:	20000998 	.word	0x20000998

08000ffc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  return uwTick;
 8001000:	4b03      	ldr	r3, [pc, #12]	; (8001010 <HAL_GetTick+0x14>)
 8001002:	681b      	ldr	r3, [r3, #0]
}
 8001004:	4618      	mov	r0, r3
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	20000998 	.word	0x20000998

08001014 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800101c:	f7ff ffee 	bl	8000ffc <HAL_GetTick>
 8001020:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800102c:	d005      	beq.n	800103a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800102e:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <HAL_Delay+0x44>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	461a      	mov	r2, r3
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	4413      	add	r3, r2
 8001038:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800103a:	bf00      	nop
 800103c:	f7ff ffde 	bl	8000ffc <HAL_GetTick>
 8001040:	4602      	mov	r2, r0
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	68fa      	ldr	r2, [r7, #12]
 8001048:	429a      	cmp	r2, r3
 800104a:	d8f7      	bhi.n	800103c <HAL_Delay+0x28>
  {
  }
}
 800104c:	bf00      	nop
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000008 	.word	0x20000008

0800105c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f003 0307 	and.w	r3, r3, #7
 800106a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800106c:	4b0b      	ldr	r3, [pc, #44]	; (800109c <__NVIC_SetPriorityGrouping+0x40>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001072:	68ba      	ldr	r2, [r7, #8]
 8001074:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001078:	4013      	ands	r3, r2
 800107a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001084:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001086:	4313      	orrs	r3, r2
 8001088:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800108a:	4a04      	ldr	r2, [pc, #16]	; (800109c <__NVIC_SetPriorityGrouping+0x40>)
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	60d3      	str	r3, [r2, #12]
}
 8001090:	bf00      	nop
 8001092:	3714      	adds	r7, #20
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	e000ed00 	.word	0xe000ed00
 80010a0:	05fa0000 	.word	0x05fa0000

080010a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010a8:	4b04      	ldr	r3, [pc, #16]	; (80010bc <__NVIC_GetPriorityGrouping+0x18>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	0a1b      	lsrs	r3, r3, #8
 80010ae:	f003 0307 	and.w	r3, r3, #7
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	db0b      	blt.n	80010ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	f003 021f 	and.w	r2, r3, #31
 80010d8:	4907      	ldr	r1, [pc, #28]	; (80010f8 <__NVIC_EnableIRQ+0x38>)
 80010da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010de:	095b      	lsrs	r3, r3, #5
 80010e0:	2001      	movs	r0, #1
 80010e2:	fa00 f202 	lsl.w	r2, r0, r2
 80010e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010ea:	bf00      	nop
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	e000e100 	.word	0xe000e100

080010fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	6039      	str	r1, [r7, #0]
 8001106:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110c:	2b00      	cmp	r3, #0
 800110e:	db0a      	blt.n	8001126 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	b2da      	uxtb	r2, r3
 8001114:	490c      	ldr	r1, [pc, #48]	; (8001148 <__NVIC_SetPriority+0x4c>)
 8001116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111a:	0112      	lsls	r2, r2, #4
 800111c:	b2d2      	uxtb	r2, r2
 800111e:	440b      	add	r3, r1
 8001120:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001124:	e00a      	b.n	800113c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	b2da      	uxtb	r2, r3
 800112a:	4908      	ldr	r1, [pc, #32]	; (800114c <__NVIC_SetPriority+0x50>)
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	f003 030f 	and.w	r3, r3, #15
 8001132:	3b04      	subs	r3, #4
 8001134:	0112      	lsls	r2, r2, #4
 8001136:	b2d2      	uxtb	r2, r2
 8001138:	440b      	add	r3, r1
 800113a:	761a      	strb	r2, [r3, #24]
}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	e000e100 	.word	0xe000e100
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001150:	b480      	push	{r7}
 8001152:	b089      	sub	sp, #36	; 0x24
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	f003 0307 	and.w	r3, r3, #7
 8001162:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	f1c3 0307 	rsb	r3, r3, #7
 800116a:	2b04      	cmp	r3, #4
 800116c:	bf28      	it	cs
 800116e:	2304      	movcs	r3, #4
 8001170:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	3304      	adds	r3, #4
 8001176:	2b06      	cmp	r3, #6
 8001178:	d902      	bls.n	8001180 <NVIC_EncodePriority+0x30>
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	3b03      	subs	r3, #3
 800117e:	e000      	b.n	8001182 <NVIC_EncodePriority+0x32>
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001184:	f04f 32ff 	mov.w	r2, #4294967295
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43da      	mvns	r2, r3
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	401a      	ands	r2, r3
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001198:	f04f 31ff 	mov.w	r1, #4294967295
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	fa01 f303 	lsl.w	r3, r1, r3
 80011a2:	43d9      	mvns	r1, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a8:	4313      	orrs	r3, r2
         );
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3724      	adds	r7, #36	; 0x24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b082      	sub	sp, #8
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f7ff ff4c 	bl	800105c <__NVIC_SetPriorityGrouping>
}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
 80011d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011de:	f7ff ff61 	bl	80010a4 <__NVIC_GetPriorityGrouping>
 80011e2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	68b9      	ldr	r1, [r7, #8]
 80011e8:	6978      	ldr	r0, [r7, #20]
 80011ea:	f7ff ffb1 	bl	8001150 <NVIC_EncodePriority>
 80011ee:	4602      	mov	r2, r0
 80011f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011f4:	4611      	mov	r1, r2
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff ff80 	bl	80010fc <__NVIC_SetPriority>
}
 80011fc:	bf00      	nop
 80011fe:	3718      	adds	r7, #24
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff ff54 	bl	80010c0 <__NVIC_EnableIRQ>
}
 8001218:	bf00      	nop
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800122c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800122e:	f7ff fee5 	bl	8000ffc <HAL_GetTick>
 8001232:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800123a:	b2db      	uxtb	r3, r3
 800123c:	2b02      	cmp	r3, #2
 800123e:	d008      	beq.n	8001252 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2280      	movs	r2, #128	; 0x80
 8001244:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2200      	movs	r2, #0
 800124a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e052      	b.n	80012f8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f022 0216 	bic.w	r2, r2, #22
 8001260:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	695a      	ldr	r2, [r3, #20]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001270:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	2b00      	cmp	r3, #0
 8001278:	d103      	bne.n	8001282 <HAL_DMA_Abort+0x62>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800127e:	2b00      	cmp	r3, #0
 8001280:	d007      	beq.n	8001292 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f022 0208 	bic.w	r2, r2, #8
 8001290:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f022 0201 	bic.w	r2, r2, #1
 80012a0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012a2:	e013      	b.n	80012cc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012a4:	f7ff feaa 	bl	8000ffc <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b05      	cmp	r3, #5
 80012b0:	d90c      	bls.n	80012cc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2220      	movs	r2, #32
 80012b6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2203      	movs	r2, #3
 80012bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2200      	movs	r2, #0
 80012c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80012c8:	2303      	movs	r3, #3
 80012ca:	e015      	b.n	80012f8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1e4      	bne.n	80012a4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012de:	223f      	movs	r2, #63	; 0x3f
 80012e0:	409a      	lsls	r2, r3
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2201      	movs	r2, #1
 80012ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2200      	movs	r2, #0
 80012f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80012f6:	2300      	movs	r3, #0
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3710      	adds	r7, #16
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800130e:	b2db      	uxtb	r3, r3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d004      	beq.n	800131e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2280      	movs	r2, #128	; 0x80
 8001318:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e00c      	b.n	8001338 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2205      	movs	r2, #5
 8001322:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f022 0201 	bic.w	r2, r2, #1
 8001334:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001336:	2300      	movs	r3, #0
}
 8001338:	4618      	mov	r0, r3
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001344:	b480      	push	{r7}
 8001346:	b089      	sub	sp, #36	; 0x24
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800134e:	2300      	movs	r3, #0
 8001350:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001352:	2300      	movs	r3, #0
 8001354:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001356:	2300      	movs	r3, #0
 8001358:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800135a:	2300      	movs	r3, #0
 800135c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800135e:	2300      	movs	r3, #0
 8001360:	61fb      	str	r3, [r7, #28]
 8001362:	e169      	b.n	8001638 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001364:	2201      	movs	r2, #1
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	697a      	ldr	r2, [r7, #20]
 8001374:	4013      	ands	r3, r2
 8001376:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	429a      	cmp	r2, r3
 800137e:	f040 8158 	bne.w	8001632 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f003 0303 	and.w	r3, r3, #3
 800138a:	2b01      	cmp	r3, #1
 800138c:	d005      	beq.n	800139a <HAL_GPIO_Init+0x56>
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f003 0303 	and.w	r3, r3, #3
 8001396:	2b02      	cmp	r3, #2
 8001398:	d130      	bne.n	80013fc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	2203      	movs	r2, #3
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	43db      	mvns	r3, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4013      	ands	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	68da      	ldr	r2, [r3, #12]
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013d0:	2201      	movs	r2, #1
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	43db      	mvns	r3, r3
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4013      	ands	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	091b      	lsrs	r3, r3, #4
 80013e6:	f003 0201 	and.w	r2, r3, #1
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f003 0303 	and.w	r3, r3, #3
 8001404:	2b03      	cmp	r3, #3
 8001406:	d017      	beq.n	8001438 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	2203      	movs	r2, #3
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	43db      	mvns	r3, r3
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4013      	ands	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	689a      	ldr	r2, [r3, #8]
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4313      	orrs	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f003 0303 	and.w	r3, r3, #3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d123      	bne.n	800148c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	08da      	lsrs	r2, r3, #3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	3208      	adds	r2, #8
 800144c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001450:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	f003 0307 	and.w	r3, r3, #7
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	220f      	movs	r2, #15
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	43db      	mvns	r3, r3
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4013      	ands	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	691a      	ldr	r2, [r3, #16]
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	f003 0307 	and.w	r3, r3, #7
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4313      	orrs	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	08da      	lsrs	r2, r3, #3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	3208      	adds	r2, #8
 8001486:	69b9      	ldr	r1, [r7, #24]
 8001488:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	2203      	movs	r2, #3
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	43db      	mvns	r3, r3
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	4013      	ands	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f003 0203 	and.w	r2, r3, #3
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	f000 80b2 	beq.w	8001632 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ce:	4b60      	ldr	r3, [pc, #384]	; (8001650 <HAL_GPIO_Init+0x30c>)
 80014d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d2:	4a5f      	ldr	r2, [pc, #380]	; (8001650 <HAL_GPIO_Init+0x30c>)
 80014d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014d8:	6453      	str	r3, [r2, #68]	; 0x44
 80014da:	4b5d      	ldr	r3, [pc, #372]	; (8001650 <HAL_GPIO_Init+0x30c>)
 80014dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80014e6:	4a5b      	ldr	r2, [pc, #364]	; (8001654 <HAL_GPIO_Init+0x310>)
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	089b      	lsrs	r3, r3, #2
 80014ec:	3302      	adds	r3, #2
 80014ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	f003 0303 	and.w	r3, r3, #3
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	220f      	movs	r2, #15
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	43db      	mvns	r3, r3
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	4013      	ands	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a52      	ldr	r2, [pc, #328]	; (8001658 <HAL_GPIO_Init+0x314>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d02b      	beq.n	800156a <HAL_GPIO_Init+0x226>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a51      	ldr	r2, [pc, #324]	; (800165c <HAL_GPIO_Init+0x318>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d025      	beq.n	8001566 <HAL_GPIO_Init+0x222>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a50      	ldr	r2, [pc, #320]	; (8001660 <HAL_GPIO_Init+0x31c>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d01f      	beq.n	8001562 <HAL_GPIO_Init+0x21e>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a4f      	ldr	r2, [pc, #316]	; (8001664 <HAL_GPIO_Init+0x320>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d019      	beq.n	800155e <HAL_GPIO_Init+0x21a>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a4e      	ldr	r2, [pc, #312]	; (8001668 <HAL_GPIO_Init+0x324>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d013      	beq.n	800155a <HAL_GPIO_Init+0x216>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a4d      	ldr	r2, [pc, #308]	; (800166c <HAL_GPIO_Init+0x328>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d00d      	beq.n	8001556 <HAL_GPIO_Init+0x212>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a4c      	ldr	r2, [pc, #304]	; (8001670 <HAL_GPIO_Init+0x32c>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d007      	beq.n	8001552 <HAL_GPIO_Init+0x20e>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a4b      	ldr	r2, [pc, #300]	; (8001674 <HAL_GPIO_Init+0x330>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d101      	bne.n	800154e <HAL_GPIO_Init+0x20a>
 800154a:	2307      	movs	r3, #7
 800154c:	e00e      	b.n	800156c <HAL_GPIO_Init+0x228>
 800154e:	2308      	movs	r3, #8
 8001550:	e00c      	b.n	800156c <HAL_GPIO_Init+0x228>
 8001552:	2306      	movs	r3, #6
 8001554:	e00a      	b.n	800156c <HAL_GPIO_Init+0x228>
 8001556:	2305      	movs	r3, #5
 8001558:	e008      	b.n	800156c <HAL_GPIO_Init+0x228>
 800155a:	2304      	movs	r3, #4
 800155c:	e006      	b.n	800156c <HAL_GPIO_Init+0x228>
 800155e:	2303      	movs	r3, #3
 8001560:	e004      	b.n	800156c <HAL_GPIO_Init+0x228>
 8001562:	2302      	movs	r3, #2
 8001564:	e002      	b.n	800156c <HAL_GPIO_Init+0x228>
 8001566:	2301      	movs	r3, #1
 8001568:	e000      	b.n	800156c <HAL_GPIO_Init+0x228>
 800156a:	2300      	movs	r3, #0
 800156c:	69fa      	ldr	r2, [r7, #28]
 800156e:	f002 0203 	and.w	r2, r2, #3
 8001572:	0092      	lsls	r2, r2, #2
 8001574:	4093      	lsls	r3, r2
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	4313      	orrs	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800157c:	4935      	ldr	r1, [pc, #212]	; (8001654 <HAL_GPIO_Init+0x310>)
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	089b      	lsrs	r3, r3, #2
 8001582:	3302      	adds	r3, #2
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800158a:	4b3b      	ldr	r3, [pc, #236]	; (8001678 <HAL_GPIO_Init+0x334>)
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	43db      	mvns	r3, r3
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	4013      	ands	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d003      	beq.n	80015ae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015ae:	4a32      	ldr	r2, [pc, #200]	; (8001678 <HAL_GPIO_Init+0x334>)
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015b4:	4b30      	ldr	r3, [pc, #192]	; (8001678 <HAL_GPIO_Init+0x334>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	43db      	mvns	r3, r3
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	4013      	ands	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d003      	beq.n	80015d8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015d8:	4a27      	ldr	r2, [pc, #156]	; (8001678 <HAL_GPIO_Init+0x334>)
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015de:	4b26      	ldr	r3, [pc, #152]	; (8001678 <HAL_GPIO_Init+0x334>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	43db      	mvns	r3, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4013      	ands	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d003      	beq.n	8001602 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	4313      	orrs	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001602:	4a1d      	ldr	r2, [pc, #116]	; (8001678 <HAL_GPIO_Init+0x334>)
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001608:	4b1b      	ldr	r3, [pc, #108]	; (8001678 <HAL_GPIO_Init+0x334>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	43db      	mvns	r3, r3
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	4013      	ands	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d003      	beq.n	800162c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	4313      	orrs	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800162c:	4a12      	ldr	r2, [pc, #72]	; (8001678 <HAL_GPIO_Init+0x334>)
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	3301      	adds	r3, #1
 8001636:	61fb      	str	r3, [r7, #28]
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	2b0f      	cmp	r3, #15
 800163c:	f67f ae92 	bls.w	8001364 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001640:	bf00      	nop
 8001642:	bf00      	nop
 8001644:	3724      	adds	r7, #36	; 0x24
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	40023800 	.word	0x40023800
 8001654:	40013800 	.word	0x40013800
 8001658:	40020000 	.word	0x40020000
 800165c:	40020400 	.word	0x40020400
 8001660:	40020800 	.word	0x40020800
 8001664:	40020c00 	.word	0x40020c00
 8001668:	40021000 	.word	0x40021000
 800166c:	40021400 	.word	0x40021400
 8001670:	40021800 	.word	0x40021800
 8001674:	40021c00 	.word	0x40021c00
 8001678:	40013c00 	.word	0x40013c00

0800167c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	460b      	mov	r3, r1
 8001686:	807b      	strh	r3, [r7, #2]
 8001688:	4613      	mov	r3, r2
 800168a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800168c:	787b      	ldrb	r3, [r7, #1]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001692:	887a      	ldrh	r2, [r7, #2]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001698:	e003      	b.n	80016a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800169a:	887b      	ldrh	r3, [r7, #2]
 800169c:	041a      	lsls	r2, r3, #16
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	619a      	str	r2, [r3, #24]
}
 80016a2:	bf00      	nop
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016ae:	b480      	push	{r7}
 80016b0:	b085      	sub	sp, #20
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
 80016b6:	460b      	mov	r3, r1
 80016b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	695b      	ldr	r3, [r3, #20]
 80016be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016c0:	887a      	ldrh	r2, [r7, #2]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	4013      	ands	r3, r2
 80016c6:	041a      	lsls	r2, r3, #16
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	43d9      	mvns	r1, r3
 80016cc:	887b      	ldrh	r3, [r7, #2]
 80016ce:	400b      	ands	r3, r1
 80016d0:	431a      	orrs	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	619a      	str	r2, [r3, #24]
}
 80016d6:	bf00      	nop
 80016d8:	3714      	adds	r7, #20
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
	...

080016e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80016ee:	4b08      	ldr	r3, [pc, #32]	; (8001710 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016f0:	695a      	ldr	r2, [r3, #20]
 80016f2:	88fb      	ldrh	r3, [r7, #6]
 80016f4:	4013      	ands	r3, r2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d006      	beq.n	8001708 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016fa:	4a05      	ldr	r2, [pc, #20]	; (8001710 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016fc:	88fb      	ldrh	r3, [r7, #6]
 80016fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001700:	88fb      	ldrh	r3, [r7, #6]
 8001702:	4618      	mov	r0, r3
 8001704:	f7fe ff28 	bl	8000558 <HAL_GPIO_EXTI_Callback>
  }
}
 8001708:	bf00      	nop
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40013c00 	.word	0x40013c00

08001714 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001716:	b08f      	sub	sp, #60	; 0x3c
 8001718:	af0a      	add	r7, sp, #40	; 0x28
 800171a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d101      	bne.n	8001726 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e116      	b.n	8001954 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001732:	b2db      	uxtb	r3, r3
 8001734:	2b00      	cmp	r3, #0
 8001736:	d106      	bne.n	8001746 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f7ff fad3 	bl	8000cec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2203      	movs	r2, #3
 800174a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001756:	2b00      	cmp	r3, #0
 8001758:	d102      	bne.n	8001760 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f003 f961 	bl	8004a2c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	603b      	str	r3, [r7, #0]
 8001770:	687e      	ldr	r6, [r7, #4]
 8001772:	466d      	mov	r5, sp
 8001774:	f106 0410 	add.w	r4, r6, #16
 8001778:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800177a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800177c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800177e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001780:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001784:	e885 0003 	stmia.w	r5, {r0, r1}
 8001788:	1d33      	adds	r3, r6, #4
 800178a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800178c:	6838      	ldr	r0, [r7, #0]
 800178e:	f003 f8c5 	bl	800491c <USB_CoreInit>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d005      	beq.n	80017a4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2202      	movs	r2, #2
 800179c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e0d7      	b.n	8001954 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2100      	movs	r1, #0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f003 f94f 	bl	8004a4e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017b0:	2300      	movs	r3, #0
 80017b2:	73fb      	strb	r3, [r7, #15]
 80017b4:	e04a      	b.n	800184c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80017b6:	7bfa      	ldrb	r2, [r7, #15]
 80017b8:	6879      	ldr	r1, [r7, #4]
 80017ba:	4613      	mov	r3, r2
 80017bc:	00db      	lsls	r3, r3, #3
 80017be:	4413      	add	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	440b      	add	r3, r1
 80017c4:	333d      	adds	r3, #61	; 0x3d
 80017c6:	2201      	movs	r2, #1
 80017c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80017ca:	7bfa      	ldrb	r2, [r7, #15]
 80017cc:	6879      	ldr	r1, [r7, #4]
 80017ce:	4613      	mov	r3, r2
 80017d0:	00db      	lsls	r3, r3, #3
 80017d2:	4413      	add	r3, r2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	440b      	add	r3, r1
 80017d8:	333c      	adds	r3, #60	; 0x3c
 80017da:	7bfa      	ldrb	r2, [r7, #15]
 80017dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80017de:	7bfa      	ldrb	r2, [r7, #15]
 80017e0:	7bfb      	ldrb	r3, [r7, #15]
 80017e2:	b298      	uxth	r0, r3
 80017e4:	6879      	ldr	r1, [r7, #4]
 80017e6:	4613      	mov	r3, r2
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	4413      	add	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	440b      	add	r3, r1
 80017f0:	3344      	adds	r3, #68	; 0x44
 80017f2:	4602      	mov	r2, r0
 80017f4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80017f6:	7bfa      	ldrb	r2, [r7, #15]
 80017f8:	6879      	ldr	r1, [r7, #4]
 80017fa:	4613      	mov	r3, r2
 80017fc:	00db      	lsls	r3, r3, #3
 80017fe:	4413      	add	r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	440b      	add	r3, r1
 8001804:	3340      	adds	r3, #64	; 0x40
 8001806:	2200      	movs	r2, #0
 8001808:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800180a:	7bfa      	ldrb	r2, [r7, #15]
 800180c:	6879      	ldr	r1, [r7, #4]
 800180e:	4613      	mov	r3, r2
 8001810:	00db      	lsls	r3, r3, #3
 8001812:	4413      	add	r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	440b      	add	r3, r1
 8001818:	3348      	adds	r3, #72	; 0x48
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800181e:	7bfa      	ldrb	r2, [r7, #15]
 8001820:	6879      	ldr	r1, [r7, #4]
 8001822:	4613      	mov	r3, r2
 8001824:	00db      	lsls	r3, r3, #3
 8001826:	4413      	add	r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	440b      	add	r3, r1
 800182c:	334c      	adds	r3, #76	; 0x4c
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001832:	7bfa      	ldrb	r2, [r7, #15]
 8001834:	6879      	ldr	r1, [r7, #4]
 8001836:	4613      	mov	r3, r2
 8001838:	00db      	lsls	r3, r3, #3
 800183a:	4413      	add	r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	440b      	add	r3, r1
 8001840:	3354      	adds	r3, #84	; 0x54
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001846:	7bfb      	ldrb	r3, [r7, #15]
 8001848:	3301      	adds	r3, #1
 800184a:	73fb      	strb	r3, [r7, #15]
 800184c:	7bfa      	ldrb	r2, [r7, #15]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	429a      	cmp	r2, r3
 8001854:	d3af      	bcc.n	80017b6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001856:	2300      	movs	r3, #0
 8001858:	73fb      	strb	r3, [r7, #15]
 800185a:	e044      	b.n	80018e6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800185c:	7bfa      	ldrb	r2, [r7, #15]
 800185e:	6879      	ldr	r1, [r7, #4]
 8001860:	4613      	mov	r3, r2
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	4413      	add	r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	440b      	add	r3, r1
 800186a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800186e:	2200      	movs	r2, #0
 8001870:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001872:	7bfa      	ldrb	r2, [r7, #15]
 8001874:	6879      	ldr	r1, [r7, #4]
 8001876:	4613      	mov	r3, r2
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	4413      	add	r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	440b      	add	r3, r1
 8001880:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001884:	7bfa      	ldrb	r2, [r7, #15]
 8001886:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001888:	7bfa      	ldrb	r2, [r7, #15]
 800188a:	6879      	ldr	r1, [r7, #4]
 800188c:	4613      	mov	r3, r2
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	4413      	add	r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	440b      	add	r3, r1
 8001896:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800189a:	2200      	movs	r2, #0
 800189c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800189e:	7bfa      	ldrb	r2, [r7, #15]
 80018a0:	6879      	ldr	r1, [r7, #4]
 80018a2:	4613      	mov	r3, r2
 80018a4:	00db      	lsls	r3, r3, #3
 80018a6:	4413      	add	r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	440b      	add	r3, r1
 80018ac:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80018b4:	7bfa      	ldrb	r2, [r7, #15]
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	4613      	mov	r3, r2
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	4413      	add	r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	440b      	add	r3, r1
 80018c2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80018ca:	7bfa      	ldrb	r2, [r7, #15]
 80018cc:	6879      	ldr	r1, [r7, #4]
 80018ce:	4613      	mov	r3, r2
 80018d0:	00db      	lsls	r3, r3, #3
 80018d2:	4413      	add	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	440b      	add	r3, r1
 80018d8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018e0:	7bfb      	ldrb	r3, [r7, #15]
 80018e2:	3301      	adds	r3, #1
 80018e4:	73fb      	strb	r3, [r7, #15]
 80018e6:	7bfa      	ldrb	r2, [r7, #15]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d3b5      	bcc.n	800185c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	603b      	str	r3, [r7, #0]
 80018f6:	687e      	ldr	r6, [r7, #4]
 80018f8:	466d      	mov	r5, sp
 80018fa:	f106 0410 	add.w	r4, r6, #16
 80018fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001900:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001902:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001904:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001906:	e894 0003 	ldmia.w	r4, {r0, r1}
 800190a:	e885 0003 	stmia.w	r5, {r0, r1}
 800190e:	1d33      	adds	r3, r6, #4
 8001910:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001912:	6838      	ldr	r0, [r7, #0]
 8001914:	f003 f8e8 	bl	8004ae8 <USB_DevInit>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d005      	beq.n	800192a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2202      	movs	r2, #2
 8001922:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e014      	b.n	8001954 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2201      	movs	r2, #1
 8001936:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193e:	2b01      	cmp	r3, #1
 8001940:	d102      	bne.n	8001948 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f000 f80a 	bl	800195c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	f003 fab6 	bl	8004ebe <USB_DevDisconnect>

  return HAL_OK;
 8001952:	2300      	movs	r3, #0
}
 8001954:	4618      	mov	r0, r3
 8001956:	3714      	adds	r7, #20
 8001958:	46bd      	mov	sp, r7
 800195a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800195c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2201      	movs	r2, #1
 800196e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800198a:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <HAL_PCDEx_ActivateLPM+0x44>)
 800198c:	4313      	orrs	r3, r2
 800198e:	68fa      	ldr	r2, [r7, #12]
 8001990:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	10000003 	.word	0x10000003

080019a4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019a8:	4b05      	ldr	r3, [pc, #20]	; (80019c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a04      	ldr	r2, [pc, #16]	; (80019c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80019ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019b2:	6013      	str	r3, [r2, #0]
}
 80019b4:	bf00      	nop
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	40007000 	.word	0x40007000

080019c4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80019ce:	4b23      	ldr	r3, [pc, #140]	; (8001a5c <HAL_PWREx_EnableOverDrive+0x98>)
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	4a22      	ldr	r2, [pc, #136]	; (8001a5c <HAL_PWREx_EnableOverDrive+0x98>)
 80019d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019d8:	6413      	str	r3, [r2, #64]	; 0x40
 80019da:	4b20      	ldr	r3, [pc, #128]	; (8001a5c <HAL_PWREx_EnableOverDrive+0x98>)
 80019dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e2:	603b      	str	r3, [r7, #0]
 80019e4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80019e6:	4b1e      	ldr	r3, [pc, #120]	; (8001a60 <HAL_PWREx_EnableOverDrive+0x9c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a1d      	ldr	r2, [pc, #116]	; (8001a60 <HAL_PWREx_EnableOverDrive+0x9c>)
 80019ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019f0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019f2:	f7ff fb03 	bl	8000ffc <HAL_GetTick>
 80019f6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80019f8:	e009      	b.n	8001a0e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80019fa:	f7ff faff 	bl	8000ffc <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a08:	d901      	bls.n	8001a0e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e022      	b.n	8001a54 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a0e:	4b14      	ldr	r3, [pc, #80]	; (8001a60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a1a:	d1ee      	bne.n	80019fa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001a1c:	4b10      	ldr	r3, [pc, #64]	; (8001a60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a0f      	ldr	r2, [pc, #60]	; (8001a60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a26:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a28:	f7ff fae8 	bl	8000ffc <HAL_GetTick>
 8001a2c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a2e:	e009      	b.n	8001a44 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a30:	f7ff fae4 	bl	8000ffc <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a3e:	d901      	bls.n	8001a44 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e007      	b.n	8001a54 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a44:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001a50:	d1ee      	bne.n	8001a30 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	40007000 	.word	0x40007000

08001a64 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e291      	b.n	8001f9e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f000 8087 	beq.w	8001b96 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a88:	4b96      	ldr	r3, [pc, #600]	; (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f003 030c 	and.w	r3, r3, #12
 8001a90:	2b04      	cmp	r3, #4
 8001a92:	d00c      	beq.n	8001aae <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a94:	4b93      	ldr	r3, [pc, #588]	; (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f003 030c 	and.w	r3, r3, #12
 8001a9c:	2b08      	cmp	r3, #8
 8001a9e:	d112      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x62>
 8001aa0:	4b90      	ldr	r3, [pc, #576]	; (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aa8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001aac:	d10b      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aae:	4b8d      	ldr	r3, [pc, #564]	; (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d06c      	beq.n	8001b94 <HAL_RCC_OscConfig+0x130>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d168      	bne.n	8001b94 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e26b      	b.n	8001f9e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ace:	d106      	bne.n	8001ade <HAL_RCC_OscConfig+0x7a>
 8001ad0:	4b84      	ldr	r3, [pc, #528]	; (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a83      	ldr	r2, [pc, #524]	; (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001ad6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ada:	6013      	str	r3, [r2, #0]
 8001adc:	e02e      	b.n	8001b3c <HAL_RCC_OscConfig+0xd8>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d10c      	bne.n	8001b00 <HAL_RCC_OscConfig+0x9c>
 8001ae6:	4b7f      	ldr	r3, [pc, #508]	; (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a7e      	ldr	r2, [pc, #504]	; (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001aec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001af0:	6013      	str	r3, [r2, #0]
 8001af2:	4b7c      	ldr	r3, [pc, #496]	; (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a7b      	ldr	r2, [pc, #492]	; (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001af8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001afc:	6013      	str	r3, [r2, #0]
 8001afe:	e01d      	b.n	8001b3c <HAL_RCC_OscConfig+0xd8>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b08:	d10c      	bne.n	8001b24 <HAL_RCC_OscConfig+0xc0>
 8001b0a:	4b76      	ldr	r3, [pc, #472]	; (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a75      	ldr	r2, [pc, #468]	; (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001b10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b14:	6013      	str	r3, [r2, #0]
 8001b16:	4b73      	ldr	r3, [pc, #460]	; (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a72      	ldr	r2, [pc, #456]	; (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b20:	6013      	str	r3, [r2, #0]
 8001b22:	e00b      	b.n	8001b3c <HAL_RCC_OscConfig+0xd8>
 8001b24:	4b6f      	ldr	r3, [pc, #444]	; (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a6e      	ldr	r2, [pc, #440]	; (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001b2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b2e:	6013      	str	r3, [r2, #0]
 8001b30:	4b6c      	ldr	r3, [pc, #432]	; (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a6b      	ldr	r2, [pc, #428]	; (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001b36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d013      	beq.n	8001b6c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b44:	f7ff fa5a 	bl	8000ffc <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b4c:	f7ff fa56 	bl	8000ffc <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b64      	cmp	r3, #100	; 0x64
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e21f      	b.n	8001f9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b5e:	4b61      	ldr	r3, [pc, #388]	; (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d0f0      	beq.n	8001b4c <HAL_RCC_OscConfig+0xe8>
 8001b6a:	e014      	b.n	8001b96 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b6c:	f7ff fa46 	bl	8000ffc <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b74:	f7ff fa42 	bl	8000ffc <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b64      	cmp	r3, #100	; 0x64
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e20b      	b.n	8001f9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b86:	4b57      	ldr	r3, [pc, #348]	; (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1f0      	bne.n	8001b74 <HAL_RCC_OscConfig+0x110>
 8001b92:	e000      	b.n	8001b96 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d069      	beq.n	8001c76 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ba2:	4b50      	ldr	r3, [pc, #320]	; (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f003 030c 	and.w	r3, r3, #12
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d00b      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bae:	4b4d      	ldr	r3, [pc, #308]	; (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f003 030c 	and.w	r3, r3, #12
 8001bb6:	2b08      	cmp	r3, #8
 8001bb8:	d11c      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x190>
 8001bba:	4b4a      	ldr	r3, [pc, #296]	; (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d116      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bc6:	4b47      	ldr	r3, [pc, #284]	; (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d005      	beq.n	8001bde <HAL_RCC_OscConfig+0x17a>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d001      	beq.n	8001bde <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e1df      	b.n	8001f9e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bde:	4b41      	ldr	r3, [pc, #260]	; (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	493d      	ldr	r1, [pc, #244]	; (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bf2:	e040      	b.n	8001c76 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d023      	beq.n	8001c44 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bfc:	4b39      	ldr	r3, [pc, #228]	; (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a38      	ldr	r2, [pc, #224]	; (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001c02:	f043 0301 	orr.w	r3, r3, #1
 8001c06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c08:	f7ff f9f8 	bl	8000ffc <HAL_GetTick>
 8001c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c10:	f7ff f9f4 	bl	8000ffc <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e1bd      	b.n	8001f9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c22:	4b30      	ldr	r3, [pc, #192]	; (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d0f0      	beq.n	8001c10 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c2e:	4b2d      	ldr	r3, [pc, #180]	; (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	4929      	ldr	r1, [pc, #164]	; (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	600b      	str	r3, [r1, #0]
 8001c42:	e018      	b.n	8001c76 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c44:	4b27      	ldr	r3, [pc, #156]	; (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a26      	ldr	r2, [pc, #152]	; (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001c4a:	f023 0301 	bic.w	r3, r3, #1
 8001c4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c50:	f7ff f9d4 	bl	8000ffc <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c58:	f7ff f9d0 	bl	8000ffc <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e199      	b.n	8001f9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c6a:	4b1e      	ldr	r3, [pc, #120]	; (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1f0      	bne.n	8001c58 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0308 	and.w	r3, r3, #8
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d038      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d019      	beq.n	8001cbe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c8a:	4b16      	ldr	r3, [pc, #88]	; (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001c8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c8e:	4a15      	ldr	r2, [pc, #84]	; (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001c90:	f043 0301 	orr.w	r3, r3, #1
 8001c94:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c96:	f7ff f9b1 	bl	8000ffc <HAL_GetTick>
 8001c9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c9c:	e008      	b.n	8001cb0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c9e:	f7ff f9ad 	bl	8000ffc <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d901      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e176      	b.n	8001f9e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001cb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cb4:	f003 0302 	and.w	r3, r3, #2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d0f0      	beq.n	8001c9e <HAL_RCC_OscConfig+0x23a>
 8001cbc:	e01a      	b.n	8001cf4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cbe:	4b09      	ldr	r3, [pc, #36]	; (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001cc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cc2:	4a08      	ldr	r2, [pc, #32]	; (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001cc4:	f023 0301 	bic.w	r3, r3, #1
 8001cc8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cca:	f7ff f997 	bl	8000ffc <HAL_GetTick>
 8001cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cd0:	e00a      	b.n	8001ce8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cd2:	f7ff f993 	bl	8000ffc <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d903      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e15c      	b.n	8001f9e <HAL_RCC_OscConfig+0x53a>
 8001ce4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ce8:	4b91      	ldr	r3, [pc, #580]	; (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001cea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1ee      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f000 80a4 	beq.w	8001e4a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d02:	4b8b      	ldr	r3, [pc, #556]	; (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d10d      	bne.n	8001d2a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d0e:	4b88      	ldr	r3, [pc, #544]	; (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d12:	4a87      	ldr	r2, [pc, #540]	; (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d18:	6413      	str	r3, [r2, #64]	; 0x40
 8001d1a:	4b85      	ldr	r3, [pc, #532]	; (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d22:	60bb      	str	r3, [r7, #8]
 8001d24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d26:	2301      	movs	r3, #1
 8001d28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d2a:	4b82      	ldr	r3, [pc, #520]	; (8001f34 <HAL_RCC_OscConfig+0x4d0>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d118      	bne.n	8001d68 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001d36:	4b7f      	ldr	r3, [pc, #508]	; (8001f34 <HAL_RCC_OscConfig+0x4d0>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a7e      	ldr	r2, [pc, #504]	; (8001f34 <HAL_RCC_OscConfig+0x4d0>)
 8001d3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d42:	f7ff f95b 	bl	8000ffc <HAL_GetTick>
 8001d46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d48:	e008      	b.n	8001d5c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d4a:	f7ff f957 	bl	8000ffc <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b64      	cmp	r3, #100	; 0x64
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e120      	b.n	8001f9e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d5c:	4b75      	ldr	r3, [pc, #468]	; (8001f34 <HAL_RCC_OscConfig+0x4d0>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d0f0      	beq.n	8001d4a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d106      	bne.n	8001d7e <HAL_RCC_OscConfig+0x31a>
 8001d70:	4b6f      	ldr	r3, [pc, #444]	; (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d74:	4a6e      	ldr	r2, [pc, #440]	; (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001d76:	f043 0301 	orr.w	r3, r3, #1
 8001d7a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d7c:	e02d      	b.n	8001dda <HAL_RCC_OscConfig+0x376>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d10c      	bne.n	8001da0 <HAL_RCC_OscConfig+0x33c>
 8001d86:	4b6a      	ldr	r3, [pc, #424]	; (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d8a:	4a69      	ldr	r2, [pc, #420]	; (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001d8c:	f023 0301 	bic.w	r3, r3, #1
 8001d90:	6713      	str	r3, [r2, #112]	; 0x70
 8001d92:	4b67      	ldr	r3, [pc, #412]	; (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d96:	4a66      	ldr	r2, [pc, #408]	; (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001d98:	f023 0304 	bic.w	r3, r3, #4
 8001d9c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d9e:	e01c      	b.n	8001dda <HAL_RCC_OscConfig+0x376>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	2b05      	cmp	r3, #5
 8001da6:	d10c      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x35e>
 8001da8:	4b61      	ldr	r3, [pc, #388]	; (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dac:	4a60      	ldr	r2, [pc, #384]	; (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001dae:	f043 0304 	orr.w	r3, r3, #4
 8001db2:	6713      	str	r3, [r2, #112]	; 0x70
 8001db4:	4b5e      	ldr	r3, [pc, #376]	; (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db8:	4a5d      	ldr	r2, [pc, #372]	; (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001dba:	f043 0301 	orr.w	r3, r3, #1
 8001dbe:	6713      	str	r3, [r2, #112]	; 0x70
 8001dc0:	e00b      	b.n	8001dda <HAL_RCC_OscConfig+0x376>
 8001dc2:	4b5b      	ldr	r3, [pc, #364]	; (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc6:	4a5a      	ldr	r2, [pc, #360]	; (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001dc8:	f023 0301 	bic.w	r3, r3, #1
 8001dcc:	6713      	str	r3, [r2, #112]	; 0x70
 8001dce:	4b58      	ldr	r3, [pc, #352]	; (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd2:	4a57      	ldr	r2, [pc, #348]	; (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001dd4:	f023 0304 	bic.w	r3, r3, #4
 8001dd8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d015      	beq.n	8001e0e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001de2:	f7ff f90b 	bl	8000ffc <HAL_GetTick>
 8001de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001de8:	e00a      	b.n	8001e00 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dea:	f7ff f907 	bl	8000ffc <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e0ce      	b.n	8001f9e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e00:	4b4b      	ldr	r3, [pc, #300]	; (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e04:	f003 0302 	and.w	r3, r3, #2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d0ee      	beq.n	8001dea <HAL_RCC_OscConfig+0x386>
 8001e0c:	e014      	b.n	8001e38 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e0e:	f7ff f8f5 	bl	8000ffc <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e14:	e00a      	b.n	8001e2c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e16:	f7ff f8f1 	bl	8000ffc <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e0b8      	b.n	8001f9e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e2c:	4b40      	ldr	r3, [pc, #256]	; (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1ee      	bne.n	8001e16 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e38:	7dfb      	ldrb	r3, [r7, #23]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d105      	bne.n	8001e4a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e3e:	4b3c      	ldr	r3, [pc, #240]	; (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	4a3b      	ldr	r2, [pc, #236]	; (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001e44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e48:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f000 80a4 	beq.w	8001f9c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e54:	4b36      	ldr	r3, [pc, #216]	; (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f003 030c 	and.w	r3, r3, #12
 8001e5c:	2b08      	cmp	r3, #8
 8001e5e:	d06b      	beq.n	8001f38 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	699b      	ldr	r3, [r3, #24]
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d149      	bne.n	8001efc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e68:	4b31      	ldr	r3, [pc, #196]	; (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a30      	ldr	r2, [pc, #192]	; (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001e6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e74:	f7ff f8c2 	bl	8000ffc <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e7c:	f7ff f8be 	bl	8000ffc <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e087      	b.n	8001f9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e8e:	4b28      	ldr	r3, [pc, #160]	; (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1f0      	bne.n	8001e7c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	69da      	ldr	r2, [r3, #28]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a1b      	ldr	r3, [r3, #32]
 8001ea2:	431a      	orrs	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea8:	019b      	lsls	r3, r3, #6
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb0:	085b      	lsrs	r3, r3, #1
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	041b      	lsls	r3, r3, #16
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ebc:	061b      	lsls	r3, r3, #24
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	4a1b      	ldr	r2, [pc, #108]	; (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001ec2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001ec6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ec8:	4b19      	ldr	r3, [pc, #100]	; (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a18      	ldr	r2, [pc, #96]	; (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001ece:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ed2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed4:	f7ff f892 	bl	8000ffc <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001edc:	f7ff f88e 	bl	8000ffc <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e057      	b.n	8001f9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eee:	4b10      	ldr	r3, [pc, #64]	; (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d0f0      	beq.n	8001edc <HAL_RCC_OscConfig+0x478>
 8001efa:	e04f      	b.n	8001f9c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001efc:	4b0c      	ldr	r3, [pc, #48]	; (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a0b      	ldr	r2, [pc, #44]	; (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001f02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f08:	f7ff f878 	bl	8000ffc <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f10:	f7ff f874 	bl	8000ffc <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e03d      	b.n	8001f9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f22:	4b03      	ldr	r3, [pc, #12]	; (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1f0      	bne.n	8001f10 <HAL_RCC_OscConfig+0x4ac>
 8001f2e:	e035      	b.n	8001f9c <HAL_RCC_OscConfig+0x538>
 8001f30:	40023800 	.word	0x40023800
 8001f34:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001f38:	4b1b      	ldr	r3, [pc, #108]	; (8001fa8 <HAL_RCC_OscConfig+0x544>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d028      	beq.n	8001f98 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d121      	bne.n	8001f98 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d11a      	bne.n	8001f98 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f68:	4013      	ands	r3, r2
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f6e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d111      	bne.n	8001f98 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7e:	085b      	lsrs	r3, r3, #1
 8001f80:	3b01      	subs	r3, #1
 8001f82:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d107      	bne.n	8001f98 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f92:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d001      	beq.n	8001f9c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e000      	b.n	8001f9e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3718      	adds	r7, #24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40023800 	.word	0x40023800

08001fac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d101      	bne.n	8001fc4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e0d0      	b.n	8002166 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fc4:	4b6a      	ldr	r3, [pc, #424]	; (8002170 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 030f 	and.w	r3, r3, #15
 8001fcc:	683a      	ldr	r2, [r7, #0]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d910      	bls.n	8001ff4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fd2:	4b67      	ldr	r3, [pc, #412]	; (8002170 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f023 020f 	bic.w	r2, r3, #15
 8001fda:	4965      	ldr	r1, [pc, #404]	; (8002170 <HAL_RCC_ClockConfig+0x1c4>)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fe2:	4b63      	ldr	r3, [pc, #396]	; (8002170 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 030f 	and.w	r3, r3, #15
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d001      	beq.n	8001ff4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e0b8      	b.n	8002166 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d020      	beq.n	8002042 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0304 	and.w	r3, r3, #4
 8002008:	2b00      	cmp	r3, #0
 800200a:	d005      	beq.n	8002018 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800200c:	4b59      	ldr	r3, [pc, #356]	; (8002174 <HAL_RCC_ClockConfig+0x1c8>)
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	4a58      	ldr	r2, [pc, #352]	; (8002174 <HAL_RCC_ClockConfig+0x1c8>)
 8002012:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002016:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0308 	and.w	r3, r3, #8
 8002020:	2b00      	cmp	r3, #0
 8002022:	d005      	beq.n	8002030 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002024:	4b53      	ldr	r3, [pc, #332]	; (8002174 <HAL_RCC_ClockConfig+0x1c8>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	4a52      	ldr	r2, [pc, #328]	; (8002174 <HAL_RCC_ClockConfig+0x1c8>)
 800202a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800202e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002030:	4b50      	ldr	r3, [pc, #320]	; (8002174 <HAL_RCC_ClockConfig+0x1c8>)
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	494d      	ldr	r1, [pc, #308]	; (8002174 <HAL_RCC_ClockConfig+0x1c8>)
 800203e:	4313      	orrs	r3, r2
 8002040:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b00      	cmp	r3, #0
 800204c:	d040      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d107      	bne.n	8002066 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002056:	4b47      	ldr	r3, [pc, #284]	; (8002174 <HAL_RCC_ClockConfig+0x1c8>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d115      	bne.n	800208e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e07f      	b.n	8002166 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b02      	cmp	r3, #2
 800206c:	d107      	bne.n	800207e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800206e:	4b41      	ldr	r3, [pc, #260]	; (8002174 <HAL_RCC_ClockConfig+0x1c8>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d109      	bne.n	800208e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e073      	b.n	8002166 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800207e:	4b3d      	ldr	r3, [pc, #244]	; (8002174 <HAL_RCC_ClockConfig+0x1c8>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e06b      	b.n	8002166 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800208e:	4b39      	ldr	r3, [pc, #228]	; (8002174 <HAL_RCC_ClockConfig+0x1c8>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f023 0203 	bic.w	r2, r3, #3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	4936      	ldr	r1, [pc, #216]	; (8002174 <HAL_RCC_ClockConfig+0x1c8>)
 800209c:	4313      	orrs	r3, r2
 800209e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020a0:	f7fe ffac 	bl	8000ffc <HAL_GetTick>
 80020a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a6:	e00a      	b.n	80020be <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020a8:	f7fe ffa8 	bl	8000ffc <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e053      	b.n	8002166 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020be:	4b2d      	ldr	r3, [pc, #180]	; (8002174 <HAL_RCC_ClockConfig+0x1c8>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f003 020c 	and.w	r2, r3, #12
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d1eb      	bne.n	80020a8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020d0:	4b27      	ldr	r3, [pc, #156]	; (8002170 <HAL_RCC_ClockConfig+0x1c4>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 030f 	and.w	r3, r3, #15
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d210      	bcs.n	8002100 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020de:	4b24      	ldr	r3, [pc, #144]	; (8002170 <HAL_RCC_ClockConfig+0x1c4>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f023 020f 	bic.w	r2, r3, #15
 80020e6:	4922      	ldr	r1, [pc, #136]	; (8002170 <HAL_RCC_ClockConfig+0x1c4>)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ee:	4b20      	ldr	r3, [pc, #128]	; (8002170 <HAL_RCC_ClockConfig+0x1c4>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 030f 	and.w	r3, r3, #15
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d001      	beq.n	8002100 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e032      	b.n	8002166 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0304 	and.w	r3, r3, #4
 8002108:	2b00      	cmp	r3, #0
 800210a:	d008      	beq.n	800211e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800210c:	4b19      	ldr	r3, [pc, #100]	; (8002174 <HAL_RCC_ClockConfig+0x1c8>)
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	4916      	ldr	r1, [pc, #88]	; (8002174 <HAL_RCC_ClockConfig+0x1c8>)
 800211a:	4313      	orrs	r3, r2
 800211c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0308 	and.w	r3, r3, #8
 8002126:	2b00      	cmp	r3, #0
 8002128:	d009      	beq.n	800213e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800212a:	4b12      	ldr	r3, [pc, #72]	; (8002174 <HAL_RCC_ClockConfig+0x1c8>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	490e      	ldr	r1, [pc, #56]	; (8002174 <HAL_RCC_ClockConfig+0x1c8>)
 800213a:	4313      	orrs	r3, r2
 800213c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800213e:	f000 f821 	bl	8002184 <HAL_RCC_GetSysClockFreq>
 8002142:	4602      	mov	r2, r0
 8002144:	4b0b      	ldr	r3, [pc, #44]	; (8002174 <HAL_RCC_ClockConfig+0x1c8>)
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	091b      	lsrs	r3, r3, #4
 800214a:	f003 030f 	and.w	r3, r3, #15
 800214e:	490a      	ldr	r1, [pc, #40]	; (8002178 <HAL_RCC_ClockConfig+0x1cc>)
 8002150:	5ccb      	ldrb	r3, [r1, r3]
 8002152:	fa22 f303 	lsr.w	r3, r2, r3
 8002156:	4a09      	ldr	r2, [pc, #36]	; (800217c <HAL_RCC_ClockConfig+0x1d0>)
 8002158:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800215a:	4b09      	ldr	r3, [pc, #36]	; (8002180 <HAL_RCC_ClockConfig+0x1d4>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4618      	mov	r0, r3
 8002160:	f7fe fe3e 	bl	8000de0 <HAL_InitTick>

  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40023c00 	.word	0x40023c00
 8002174:	40023800 	.word	0x40023800
 8002178:	08007890 	.word	0x08007890
 800217c:	20000000 	.word	0x20000000
 8002180:	20000004 	.word	0x20000004

08002184 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002184:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002188:	b094      	sub	sp, #80	; 0x50
 800218a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800218c:	2300      	movs	r3, #0
 800218e:	647b      	str	r3, [r7, #68]	; 0x44
 8002190:	2300      	movs	r3, #0
 8002192:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002194:	2300      	movs	r3, #0
 8002196:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002198:	2300      	movs	r3, #0
 800219a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800219c:	4b79      	ldr	r3, [pc, #484]	; (8002384 <HAL_RCC_GetSysClockFreq+0x200>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f003 030c 	and.w	r3, r3, #12
 80021a4:	2b08      	cmp	r3, #8
 80021a6:	d00d      	beq.n	80021c4 <HAL_RCC_GetSysClockFreq+0x40>
 80021a8:	2b08      	cmp	r3, #8
 80021aa:	f200 80e1 	bhi.w	8002370 <HAL_RCC_GetSysClockFreq+0x1ec>
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d002      	beq.n	80021b8 <HAL_RCC_GetSysClockFreq+0x34>
 80021b2:	2b04      	cmp	r3, #4
 80021b4:	d003      	beq.n	80021be <HAL_RCC_GetSysClockFreq+0x3a>
 80021b6:	e0db      	b.n	8002370 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021b8:	4b73      	ldr	r3, [pc, #460]	; (8002388 <HAL_RCC_GetSysClockFreq+0x204>)
 80021ba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80021bc:	e0db      	b.n	8002376 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021be:	4b73      	ldr	r3, [pc, #460]	; (800238c <HAL_RCC_GetSysClockFreq+0x208>)
 80021c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80021c2:	e0d8      	b.n	8002376 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021c4:	4b6f      	ldr	r3, [pc, #444]	; (8002384 <HAL_RCC_GetSysClockFreq+0x200>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021cc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80021ce:	4b6d      	ldr	r3, [pc, #436]	; (8002384 <HAL_RCC_GetSysClockFreq+0x200>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d063      	beq.n	80022a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021da:	4b6a      	ldr	r3, [pc, #424]	; (8002384 <HAL_RCC_GetSysClockFreq+0x200>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	099b      	lsrs	r3, r3, #6
 80021e0:	2200      	movs	r2, #0
 80021e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80021e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80021e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021ec:	633b      	str	r3, [r7, #48]	; 0x30
 80021ee:	2300      	movs	r3, #0
 80021f0:	637b      	str	r3, [r7, #52]	; 0x34
 80021f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80021f6:	4622      	mov	r2, r4
 80021f8:	462b      	mov	r3, r5
 80021fa:	f04f 0000 	mov.w	r0, #0
 80021fe:	f04f 0100 	mov.w	r1, #0
 8002202:	0159      	lsls	r1, r3, #5
 8002204:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002208:	0150      	lsls	r0, r2, #5
 800220a:	4602      	mov	r2, r0
 800220c:	460b      	mov	r3, r1
 800220e:	4621      	mov	r1, r4
 8002210:	1a51      	subs	r1, r2, r1
 8002212:	6139      	str	r1, [r7, #16]
 8002214:	4629      	mov	r1, r5
 8002216:	eb63 0301 	sbc.w	r3, r3, r1
 800221a:	617b      	str	r3, [r7, #20]
 800221c:	f04f 0200 	mov.w	r2, #0
 8002220:	f04f 0300 	mov.w	r3, #0
 8002224:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002228:	4659      	mov	r1, fp
 800222a:	018b      	lsls	r3, r1, #6
 800222c:	4651      	mov	r1, sl
 800222e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002232:	4651      	mov	r1, sl
 8002234:	018a      	lsls	r2, r1, #6
 8002236:	4651      	mov	r1, sl
 8002238:	ebb2 0801 	subs.w	r8, r2, r1
 800223c:	4659      	mov	r1, fp
 800223e:	eb63 0901 	sbc.w	r9, r3, r1
 8002242:	f04f 0200 	mov.w	r2, #0
 8002246:	f04f 0300 	mov.w	r3, #0
 800224a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800224e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002252:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002256:	4690      	mov	r8, r2
 8002258:	4699      	mov	r9, r3
 800225a:	4623      	mov	r3, r4
 800225c:	eb18 0303 	adds.w	r3, r8, r3
 8002260:	60bb      	str	r3, [r7, #8]
 8002262:	462b      	mov	r3, r5
 8002264:	eb49 0303 	adc.w	r3, r9, r3
 8002268:	60fb      	str	r3, [r7, #12]
 800226a:	f04f 0200 	mov.w	r2, #0
 800226e:	f04f 0300 	mov.w	r3, #0
 8002272:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002276:	4629      	mov	r1, r5
 8002278:	024b      	lsls	r3, r1, #9
 800227a:	4621      	mov	r1, r4
 800227c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002280:	4621      	mov	r1, r4
 8002282:	024a      	lsls	r2, r1, #9
 8002284:	4610      	mov	r0, r2
 8002286:	4619      	mov	r1, r3
 8002288:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800228a:	2200      	movs	r2, #0
 800228c:	62bb      	str	r3, [r7, #40]	; 0x28
 800228e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002290:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002294:	f7fd ffc4 	bl	8000220 <__aeabi_uldivmod>
 8002298:	4602      	mov	r2, r0
 800229a:	460b      	mov	r3, r1
 800229c:	4613      	mov	r3, r2
 800229e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022a0:	e058      	b.n	8002354 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022a2:	4b38      	ldr	r3, [pc, #224]	; (8002384 <HAL_RCC_GetSysClockFreq+0x200>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	099b      	lsrs	r3, r3, #6
 80022a8:	2200      	movs	r2, #0
 80022aa:	4618      	mov	r0, r3
 80022ac:	4611      	mov	r1, r2
 80022ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80022b2:	623b      	str	r3, [r7, #32]
 80022b4:	2300      	movs	r3, #0
 80022b6:	627b      	str	r3, [r7, #36]	; 0x24
 80022b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80022bc:	4642      	mov	r2, r8
 80022be:	464b      	mov	r3, r9
 80022c0:	f04f 0000 	mov.w	r0, #0
 80022c4:	f04f 0100 	mov.w	r1, #0
 80022c8:	0159      	lsls	r1, r3, #5
 80022ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022ce:	0150      	lsls	r0, r2, #5
 80022d0:	4602      	mov	r2, r0
 80022d2:	460b      	mov	r3, r1
 80022d4:	4641      	mov	r1, r8
 80022d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80022da:	4649      	mov	r1, r9
 80022dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80022e0:	f04f 0200 	mov.w	r2, #0
 80022e4:	f04f 0300 	mov.w	r3, #0
 80022e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80022ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80022f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80022f4:	ebb2 040a 	subs.w	r4, r2, sl
 80022f8:	eb63 050b 	sbc.w	r5, r3, fp
 80022fc:	f04f 0200 	mov.w	r2, #0
 8002300:	f04f 0300 	mov.w	r3, #0
 8002304:	00eb      	lsls	r3, r5, #3
 8002306:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800230a:	00e2      	lsls	r2, r4, #3
 800230c:	4614      	mov	r4, r2
 800230e:	461d      	mov	r5, r3
 8002310:	4643      	mov	r3, r8
 8002312:	18e3      	adds	r3, r4, r3
 8002314:	603b      	str	r3, [r7, #0]
 8002316:	464b      	mov	r3, r9
 8002318:	eb45 0303 	adc.w	r3, r5, r3
 800231c:	607b      	str	r3, [r7, #4]
 800231e:	f04f 0200 	mov.w	r2, #0
 8002322:	f04f 0300 	mov.w	r3, #0
 8002326:	e9d7 4500 	ldrd	r4, r5, [r7]
 800232a:	4629      	mov	r1, r5
 800232c:	028b      	lsls	r3, r1, #10
 800232e:	4621      	mov	r1, r4
 8002330:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002334:	4621      	mov	r1, r4
 8002336:	028a      	lsls	r2, r1, #10
 8002338:	4610      	mov	r0, r2
 800233a:	4619      	mov	r1, r3
 800233c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800233e:	2200      	movs	r2, #0
 8002340:	61bb      	str	r3, [r7, #24]
 8002342:	61fa      	str	r2, [r7, #28]
 8002344:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002348:	f7fd ff6a 	bl	8000220 <__aeabi_uldivmod>
 800234c:	4602      	mov	r2, r0
 800234e:	460b      	mov	r3, r1
 8002350:	4613      	mov	r3, r2
 8002352:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002354:	4b0b      	ldr	r3, [pc, #44]	; (8002384 <HAL_RCC_GetSysClockFreq+0x200>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	0c1b      	lsrs	r3, r3, #16
 800235a:	f003 0303 	and.w	r3, r3, #3
 800235e:	3301      	adds	r3, #1
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002364:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002366:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002368:	fbb2 f3f3 	udiv	r3, r2, r3
 800236c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800236e:	e002      	b.n	8002376 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002370:	4b05      	ldr	r3, [pc, #20]	; (8002388 <HAL_RCC_GetSysClockFreq+0x204>)
 8002372:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002374:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002376:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002378:	4618      	mov	r0, r3
 800237a:	3750      	adds	r7, #80	; 0x50
 800237c:	46bd      	mov	sp, r7
 800237e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002382:	bf00      	nop
 8002384:	40023800 	.word	0x40023800
 8002388:	00f42400 	.word	0x00f42400
 800238c:	007a1200 	.word	0x007a1200

08002390 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002394:	4b03      	ldr	r3, [pc, #12]	; (80023a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002396:	681b      	ldr	r3, [r3, #0]
}
 8002398:	4618      	mov	r0, r3
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	20000000 	.word	0x20000000

080023a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023ac:	f7ff fff0 	bl	8002390 <HAL_RCC_GetHCLKFreq>
 80023b0:	4602      	mov	r2, r0
 80023b2:	4b05      	ldr	r3, [pc, #20]	; (80023c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	0a9b      	lsrs	r3, r3, #10
 80023b8:	f003 0307 	and.w	r3, r3, #7
 80023bc:	4903      	ldr	r1, [pc, #12]	; (80023cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80023be:	5ccb      	ldrb	r3, [r1, r3]
 80023c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40023800 	.word	0x40023800
 80023cc:	080078a0 	.word	0x080078a0

080023d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023d4:	f7ff ffdc 	bl	8002390 <HAL_RCC_GetHCLKFreq>
 80023d8:	4602      	mov	r2, r0
 80023da:	4b05      	ldr	r3, [pc, #20]	; (80023f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	0b5b      	lsrs	r3, r3, #13
 80023e0:	f003 0307 	and.w	r3, r3, #7
 80023e4:	4903      	ldr	r1, [pc, #12]	; (80023f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023e6:	5ccb      	ldrb	r3, [r1, r3]
 80023e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40023800 	.word	0x40023800
 80023f4:	080078a0 	.word	0x080078a0

080023f8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	220f      	movs	r2, #15
 8002406:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002408:	4b12      	ldr	r3, [pc, #72]	; (8002454 <HAL_RCC_GetClockConfig+0x5c>)
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f003 0203 	and.w	r2, r3, #3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002414:	4b0f      	ldr	r3, [pc, #60]	; (8002454 <HAL_RCC_GetClockConfig+0x5c>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002420:	4b0c      	ldr	r3, [pc, #48]	; (8002454 <HAL_RCC_GetClockConfig+0x5c>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800242c:	4b09      	ldr	r3, [pc, #36]	; (8002454 <HAL_RCC_GetClockConfig+0x5c>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	08db      	lsrs	r3, r3, #3
 8002432:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800243a:	4b07      	ldr	r3, [pc, #28]	; (8002458 <HAL_RCC_GetClockConfig+0x60>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 020f 	and.w	r2, r3, #15
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	601a      	str	r2, [r3, #0]
}
 8002446:	bf00      	nop
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	40023800 	.word	0x40023800
 8002458:	40023c00 	.word	0x40023c00

0800245c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b088      	sub	sp, #32
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002464:	2300      	movs	r3, #0
 8002466:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002468:	2300      	movs	r3, #0
 800246a:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 800246c:	2300      	movs	r3, #0
 800246e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002470:	2300      	movs	r3, #0
 8002472:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0301 	and.w	r3, r3, #1
 800247c:	2b00      	cmp	r3, #0
 800247e:	d012      	beq.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002480:	4b65      	ldr	r3, [pc, #404]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	4a64      	ldr	r2, [pc, #400]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002486:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800248a:	6093      	str	r3, [r2, #8]
 800248c:	4b62      	ldr	r3, [pc, #392]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002494:	4960      	ldr	r1, [pc, #384]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002496:	4313      	orrs	r3, r2
 8002498:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 80024a2:	2301      	movs	r3, #1
 80024a4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d017      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024b2:	4b59      	ldr	r3, [pc, #356]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80024b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024c0:	4955      	ldr	r1, [pc, #340]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024d0:	d101      	bne.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 80024d2:	2301      	movs	r3, #1
 80024d4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 80024de:	2301      	movs	r3, #1
 80024e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d017      	beq.n	800251e <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80024ee:	4b4a      	ldr	r3, [pc, #296]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80024f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024fc:	4946      	ldr	r1, [pc, #280]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002508:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800250c:	d101      	bne.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 800250e:	2301      	movs	r3, #1
 8002510:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 800251a:	2301      	movs	r3, #1
 800251c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0320 	and.w	r3, r3, #32
 8002526:	2b00      	cmp	r3, #0
 8002528:	f000 808b 	beq.w	8002642 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800252c:	4b3a      	ldr	r3, [pc, #232]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800252e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002530:	4a39      	ldr	r2, [pc, #228]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002536:	6413      	str	r3, [r2, #64]	; 0x40
 8002538:	4b37      	ldr	r3, [pc, #220]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800253a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002540:	60fb      	str	r3, [r7, #12]
 8002542:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002544:	4b35      	ldr	r3, [pc, #212]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a34      	ldr	r2, [pc, #208]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800254a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800254e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002550:	f7fe fd54 	bl	8000ffc <HAL_GetTick>
 8002554:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002556:	e008      	b.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002558:	f7fe fd50 	bl	8000ffc <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b64      	cmp	r3, #100	; 0x64
 8002564:	d901      	bls.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e2bc      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800256a:	4b2c      	ldr	r3, [pc, #176]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002572:	2b00      	cmp	r3, #0
 8002574:	d0f0      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002576:	4b28      	ldr	r3, [pc, #160]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800257a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800257e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d035      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	429a      	cmp	r2, r3
 8002592:	d02e      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002594:	4b20      	ldr	r3, [pc, #128]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002598:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800259c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800259e:	4b1e      	ldr	r3, [pc, #120]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80025a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a2:	4a1d      	ldr	r2, [pc, #116]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80025a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025a8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025aa:	4b1b      	ldr	r3, [pc, #108]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80025ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ae:	4a1a      	ldr	r2, [pc, #104]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80025b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025b4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80025b6:	4a18      	ldr	r2, [pc, #96]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80025bc:	4b16      	ldr	r3, [pc, #88]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80025be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d114      	bne.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c8:	f7fe fd18 	bl	8000ffc <HAL_GetTick>
 80025cc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ce:	e00a      	b.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025d0:	f7fe fd14 	bl	8000ffc <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	f241 3288 	movw	r2, #5000	; 0x1388
 80025de:	4293      	cmp	r3, r2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e27e      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025e6:	4b0c      	ldr	r3, [pc, #48]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80025e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d0ee      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025fe:	d111      	bne.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8002600:	4b05      	ldr	r3, [pc, #20]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800260c:	4b04      	ldr	r3, [pc, #16]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800260e:	400b      	ands	r3, r1
 8002610:	4901      	ldr	r1, [pc, #4]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002612:	4313      	orrs	r3, r2
 8002614:	608b      	str	r3, [r1, #8]
 8002616:	e00b      	b.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8002618:	40023800 	.word	0x40023800
 800261c:	40007000 	.word	0x40007000
 8002620:	0ffffcff 	.word	0x0ffffcff
 8002624:	4ba4      	ldr	r3, [pc, #656]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	4aa3      	ldr	r2, [pc, #652]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800262a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800262e:	6093      	str	r3, [r2, #8]
 8002630:	4ba1      	ldr	r3, [pc, #644]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002632:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002638:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800263c:	499e      	ldr	r1, [pc, #632]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800263e:	4313      	orrs	r3, r2
 8002640:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0310 	and.w	r3, r3, #16
 800264a:	2b00      	cmp	r3, #0
 800264c:	d010      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800264e:	4b9a      	ldr	r3, [pc, #616]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002650:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002654:	4a98      	ldr	r2, [pc, #608]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002656:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800265a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800265e:	4b96      	ldr	r3, [pc, #600]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002660:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002668:	4993      	ldr	r1, [pc, #588]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800266a:	4313      	orrs	r3, r2
 800266c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00a      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800267c:	4b8e      	ldr	r3, [pc, #568]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800267e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002682:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800268a:	498b      	ldr	r1, [pc, #556]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800268c:	4313      	orrs	r3, r2
 800268e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00a      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800269e:	4b86      	ldr	r3, [pc, #536]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80026a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ac:	4982      	ldr	r1, [pc, #520]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00a      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026c0:	4b7d      	ldr	r3, [pc, #500]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80026c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026ce:	497a      	ldr	r1, [pc, #488]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00a      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026e2:	4b75      	ldr	r3, [pc, #468]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80026e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e8:	f023 0203 	bic.w	r2, r3, #3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f0:	4971      	ldr	r1, [pc, #452]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002700:	2b00      	cmp	r3, #0
 8002702:	d00a      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002704:	4b6c      	ldr	r3, [pc, #432]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800270a:	f023 020c 	bic.w	r2, r3, #12
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	4969      	ldr	r1, [pc, #420]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002714:	4313      	orrs	r3, r2
 8002716:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00a      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002726:	4b64      	ldr	r3, [pc, #400]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800272c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002734:	4960      	ldr	r1, [pc, #384]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002736:	4313      	orrs	r3, r2
 8002738:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00a      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002748:	4b5b      	ldr	r3, [pc, #364]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800274a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800274e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002756:	4958      	ldr	r1, [pc, #352]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002758:	4313      	orrs	r3, r2
 800275a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00a      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800276a:	4b53      	ldr	r3, [pc, #332]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800276c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002770:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002778:	494f      	ldr	r1, [pc, #316]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800277a:	4313      	orrs	r3, r2
 800277c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002788:	2b00      	cmp	r3, #0
 800278a:	d00a      	beq.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800278c:	4b4a      	ldr	r3, [pc, #296]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800278e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002792:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800279a:	4947      	ldr	r1, [pc, #284]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800279c:	4313      	orrs	r3, r2
 800279e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00a      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80027ae:	4b42      	ldr	r3, [pc, #264]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80027b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027bc:	493e      	ldr	r1, [pc, #248]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00a      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80027d0:	4b39      	ldr	r3, [pc, #228]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80027d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027de:	4936      	ldr	r1, [pc, #216]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d011      	beq.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80027f2:	4b31      	ldr	r3, [pc, #196]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80027f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027f8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002800:	492d      	ldr	r1, [pc, #180]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002802:	4313      	orrs	r3, r2
 8002804:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800280c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002810:	d101      	bne.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8002812:	2301      	movs	r3, #1
 8002814:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00a      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002822:	4b25      	ldr	r3, [pc, #148]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002828:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002830:	4921      	ldr	r1, [pc, #132]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002832:	4313      	orrs	r3, r2
 8002834:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d00a      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002844:	4b1c      	ldr	r3, [pc, #112]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800284a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002852:	4919      	ldr	r1, [pc, #100]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002854:	4313      	orrs	r3, r2
 8002856:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00a      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002866:	4b14      	ldr	r3, [pc, #80]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800286c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002874:	4910      	ldr	r1, [pc, #64]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002876:	4313      	orrs	r3, r2
 8002878:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d006      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800288a:	2b00      	cmp	r3, #0
 800288c:	f000 809d 	beq.w	80029ca <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002890:	4b09      	ldr	r3, [pc, #36]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a08      	ldr	r2, [pc, #32]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002896:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800289a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800289c:	f7fe fbae 	bl	8000ffc <HAL_GetTick>
 80028a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80028a2:	e00b      	b.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80028a4:	f7fe fbaa 	bl	8000ffc <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b64      	cmp	r3, #100	; 0x64
 80028b0:	d904      	bls.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e116      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x688>
 80028b6:	bf00      	nop
 80028b8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80028bc:	4b8b      	ldr	r3, [pc, #556]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d1ed      	bne.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d017      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d113      	bne.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80028dc:	4b83      	ldr	r3, [pc, #524]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80028de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028e2:	0e1b      	lsrs	r3, r3, #24
 80028e4:	f003 030f 	and.w	r3, r3, #15
 80028e8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	019a      	lsls	r2, r3, #6
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	061b      	lsls	r3, r3, #24
 80028f4:	431a      	orrs	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	071b      	lsls	r3, r3, #28
 80028fc:	497b      	ldr	r1, [pc, #492]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d004      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002914:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002918:	d00a      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002922:	2b00      	cmp	r3, #0
 8002924:	d024      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800292a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800292e:	d11f      	bne.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002930:	4b6e      	ldr	r3, [pc, #440]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002932:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002936:	0f1b      	lsrs	r3, r3, #28
 8002938:	f003 0307 	and.w	r3, r3, #7
 800293c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	019a      	lsls	r2, r3, #6
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	061b      	lsls	r3, r3, #24
 800294a:	431a      	orrs	r2, r3
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	071b      	lsls	r3, r3, #28
 8002950:	4966      	ldr	r1, [pc, #408]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002952:	4313      	orrs	r3, r2
 8002954:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002958:	4b64      	ldr	r3, [pc, #400]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800295a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800295e:	f023 021f 	bic.w	r2, r3, #31
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	69db      	ldr	r3, [r3, #28]
 8002966:	3b01      	subs	r3, #1
 8002968:	4960      	ldr	r1, [pc, #384]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800296a:	4313      	orrs	r3, r2
 800296c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00d      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	019a      	lsls	r2, r3, #6
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	061b      	lsls	r3, r3, #24
 8002988:	431a      	orrs	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	071b      	lsls	r3, r3, #28
 8002990:	4956      	ldr	r1, [pc, #344]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002992:	4313      	orrs	r3, r2
 8002994:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002998:	4b54      	ldr	r3, [pc, #336]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a53      	ldr	r2, [pc, #332]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800299e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029a4:	f7fe fb2a 	bl	8000ffc <HAL_GetTick>
 80029a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80029aa:	e008      	b.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80029ac:	f7fe fb26 	bl	8000ffc <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b64      	cmp	r3, #100	; 0x64
 80029b8:	d901      	bls.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e092      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80029be:	4b4b      	ldr	r3, [pc, #300]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d0f0      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	f040 8088 	bne.w	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80029d2:	4b46      	ldr	r3, [pc, #280]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a45      	ldr	r2, [pc, #276]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80029d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029de:	f7fe fb0d 	bl	8000ffc <HAL_GetTick>
 80029e2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80029e4:	e008      	b.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80029e6:	f7fe fb09 	bl	8000ffc <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b64      	cmp	r3, #100	; 0x64
 80029f2:	d901      	bls.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e075      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80029f8:	4b3c      	ldr	r3, [pc, #240]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a04:	d0ef      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d009      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d024      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d120      	bne.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002a2e:	4b2f      	ldr	r3, [pc, #188]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a34:	0c1b      	lsrs	r3, r3, #16
 8002a36:	f003 0303 	and.w	r3, r3, #3
 8002a3a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	019a      	lsls	r2, r3, #6
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	041b      	lsls	r3, r3, #16
 8002a46:	431a      	orrs	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	695b      	ldr	r3, [r3, #20]
 8002a4c:	061b      	lsls	r3, r3, #24
 8002a4e:	4927      	ldr	r1, [pc, #156]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002a56:	4b25      	ldr	r3, [pc, #148]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002a58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a5c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a1b      	ldr	r3, [r3, #32]
 8002a64:	3b01      	subs	r3, #1
 8002a66:	021b      	lsls	r3, r3, #8
 8002a68:	4920      	ldr	r1, [pc, #128]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d018      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x652>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a84:	d113      	bne.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002a86:	4b19      	ldr	r3, [pc, #100]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a8c:	0e1b      	lsrs	r3, r3, #24
 8002a8e:	f003 030f 	and.w	r3, r3, #15
 8002a92:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	019a      	lsls	r2, r3, #6
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	041b      	lsls	r3, r3, #16
 8002aa0:	431a      	orrs	r2, r3
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	061b      	lsls	r3, r3, #24
 8002aa6:	4911      	ldr	r1, [pc, #68]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002aae:	4b0f      	ldr	r3, [pc, #60]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a0e      	ldr	r2, [pc, #56]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ab8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002aba:	f7fe fa9f 	bl	8000ffc <HAL_GetTick>
 8002abe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ac0:	e008      	b.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ac2:	f7fe fa9b 	bl	8000ffc <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b64      	cmp	r3, #100	; 0x64
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e007      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ad4:	4b05      	ldr	r3, [pc, #20]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002adc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ae0:	d1ef      	bne.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3720      	adds	r7, #32
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40023800 	.word	0x40023800

08002af0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d101      	bne.n	8002b02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e049      	b.n	8002b96 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d106      	bne.n	8002b1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f7fe f860 	bl	8000bdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2202      	movs	r2, #2
 8002b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	3304      	adds	r3, #4
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4610      	mov	r0, r2
 8002b30:	f000 fac0 	bl	80030b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
	...

08002ba0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d001      	beq.n	8002bb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e054      	b.n	8002c62 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2202      	movs	r2, #2
 8002bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68da      	ldr	r2, [r3, #12]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f042 0201 	orr.w	r2, r2, #1
 8002bce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a26      	ldr	r2, [pc, #152]	; (8002c70 <HAL_TIM_Base_Start_IT+0xd0>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d022      	beq.n	8002c20 <HAL_TIM_Base_Start_IT+0x80>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002be2:	d01d      	beq.n	8002c20 <HAL_TIM_Base_Start_IT+0x80>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a22      	ldr	r2, [pc, #136]	; (8002c74 <HAL_TIM_Base_Start_IT+0xd4>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d018      	beq.n	8002c20 <HAL_TIM_Base_Start_IT+0x80>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a21      	ldr	r2, [pc, #132]	; (8002c78 <HAL_TIM_Base_Start_IT+0xd8>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d013      	beq.n	8002c20 <HAL_TIM_Base_Start_IT+0x80>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a1f      	ldr	r2, [pc, #124]	; (8002c7c <HAL_TIM_Base_Start_IT+0xdc>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d00e      	beq.n	8002c20 <HAL_TIM_Base_Start_IT+0x80>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a1e      	ldr	r2, [pc, #120]	; (8002c80 <HAL_TIM_Base_Start_IT+0xe0>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d009      	beq.n	8002c20 <HAL_TIM_Base_Start_IT+0x80>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a1c      	ldr	r2, [pc, #112]	; (8002c84 <HAL_TIM_Base_Start_IT+0xe4>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d004      	beq.n	8002c20 <HAL_TIM_Base_Start_IT+0x80>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a1b      	ldr	r2, [pc, #108]	; (8002c88 <HAL_TIM_Base_Start_IT+0xe8>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d115      	bne.n	8002c4c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689a      	ldr	r2, [r3, #8]
 8002c26:	4b19      	ldr	r3, [pc, #100]	; (8002c8c <HAL_TIM_Base_Start_IT+0xec>)
 8002c28:	4013      	ands	r3, r2
 8002c2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2b06      	cmp	r3, #6
 8002c30:	d015      	beq.n	8002c5e <HAL_TIM_Base_Start_IT+0xbe>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c38:	d011      	beq.n	8002c5e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f042 0201 	orr.w	r2, r2, #1
 8002c48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c4a:	e008      	b.n	8002c5e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f042 0201 	orr.w	r2, r2, #1
 8002c5a:	601a      	str	r2, [r3, #0]
 8002c5c:	e000      	b.n	8002c60 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c5e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3714      	adds	r7, #20
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	40010000 	.word	0x40010000
 8002c74:	40000400 	.word	0x40000400
 8002c78:	40000800 	.word	0x40000800
 8002c7c:	40000c00 	.word	0x40000c00
 8002c80:	40010400 	.word	0x40010400
 8002c84:	40014000 	.word	0x40014000
 8002c88:	40001800 	.word	0x40001800
 8002c8c:	00010007 	.word	0x00010007

08002c90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d122      	bne.n	8002cec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d11b      	bne.n	8002cec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f06f 0202 	mvn.w	r2, #2
 8002cbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	f003 0303 	and.w	r3, r3, #3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d003      	beq.n	8002cda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 f9d0 	bl	8003078 <HAL_TIM_IC_CaptureCallback>
 8002cd8:	e005      	b.n	8002ce6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 f9c2 	bl	8003064 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 f9d3 	bl	800308c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	f003 0304 	and.w	r3, r3, #4
 8002cf6:	2b04      	cmp	r3, #4
 8002cf8:	d122      	bne.n	8002d40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	f003 0304 	and.w	r3, r3, #4
 8002d04:	2b04      	cmp	r3, #4
 8002d06:	d11b      	bne.n	8002d40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f06f 0204 	mvn.w	r2, #4
 8002d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2202      	movs	r2, #2
 8002d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d003      	beq.n	8002d2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 f9a6 	bl	8003078 <HAL_TIM_IC_CaptureCallback>
 8002d2c:	e005      	b.n	8002d3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f998 	bl	8003064 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 f9a9 	bl	800308c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	f003 0308 	and.w	r3, r3, #8
 8002d4a:	2b08      	cmp	r3, #8
 8002d4c:	d122      	bne.n	8002d94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	f003 0308 	and.w	r3, r3, #8
 8002d58:	2b08      	cmp	r3, #8
 8002d5a:	d11b      	bne.n	8002d94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f06f 0208 	mvn.w	r2, #8
 8002d64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2204      	movs	r2, #4
 8002d6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	f003 0303 	and.w	r3, r3, #3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d003      	beq.n	8002d82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 f97c 	bl	8003078 <HAL_TIM_IC_CaptureCallback>
 8002d80:	e005      	b.n	8002d8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 f96e 	bl	8003064 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 f97f 	bl	800308c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	f003 0310 	and.w	r3, r3, #16
 8002d9e:	2b10      	cmp	r3, #16
 8002da0:	d122      	bne.n	8002de8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	f003 0310 	and.w	r3, r3, #16
 8002dac:	2b10      	cmp	r3, #16
 8002dae:	d11b      	bne.n	8002de8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f06f 0210 	mvn.w	r2, #16
 8002db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2208      	movs	r2, #8
 8002dbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	69db      	ldr	r3, [r3, #28]
 8002dc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d003      	beq.n	8002dd6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 f952 	bl	8003078 <HAL_TIM_IC_CaptureCallback>
 8002dd4:	e005      	b.n	8002de2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 f944 	bl	8003064 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 f955 	bl	800308c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d10e      	bne.n	8002e14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	f003 0301 	and.w	r3, r3, #1
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d107      	bne.n	8002e14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f06f 0201 	mvn.w	r2, #1
 8002e0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f7fd fea4 	bl	8000b5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e1e:	2b80      	cmp	r3, #128	; 0x80
 8002e20:	d10e      	bne.n	8002e40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e2c:	2b80      	cmp	r3, #128	; 0x80
 8002e2e:	d107      	bne.n	8002e40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 fa7e 	bl	800333c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e4e:	d10e      	bne.n	8002e6e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e5a:	2b80      	cmp	r3, #128	; 0x80
 8002e5c:	d107      	bne.n	8002e6e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002e66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 fa71 	bl	8003350 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e78:	2b40      	cmp	r3, #64	; 0x40
 8002e7a:	d10e      	bne.n	8002e9a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e86:	2b40      	cmp	r3, #64	; 0x40
 8002e88:	d107      	bne.n	8002e9a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 f903 	bl	80030a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	f003 0320 	and.w	r3, r3, #32
 8002ea4:	2b20      	cmp	r3, #32
 8002ea6:	d10e      	bne.n	8002ec6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	f003 0320 	and.w	r3, r3, #32
 8002eb2:	2b20      	cmp	r3, #32
 8002eb4:	d107      	bne.n	8002ec6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f06f 0220 	mvn.w	r2, #32
 8002ebe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 fa31 	bl	8003328 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ec6:	bf00      	nop
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
	...

08002ed0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002eda:	2300      	movs	r3, #0
 8002edc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d101      	bne.n	8002eec <HAL_TIM_ConfigClockSource+0x1c>
 8002ee8:	2302      	movs	r3, #2
 8002eea:	e0b4      	b.n	8003056 <HAL_TIM_ConfigClockSource+0x186>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f04:	68ba      	ldr	r2, [r7, #8]
 8002f06:	4b56      	ldr	r3, [pc, #344]	; (8003060 <HAL_TIM_ConfigClockSource+0x190>)
 8002f08:	4013      	ands	r3, r2
 8002f0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68ba      	ldr	r2, [r7, #8]
 8002f1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f24:	d03e      	beq.n	8002fa4 <HAL_TIM_ConfigClockSource+0xd4>
 8002f26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f2a:	f200 8087 	bhi.w	800303c <HAL_TIM_ConfigClockSource+0x16c>
 8002f2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f32:	f000 8086 	beq.w	8003042 <HAL_TIM_ConfigClockSource+0x172>
 8002f36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f3a:	d87f      	bhi.n	800303c <HAL_TIM_ConfigClockSource+0x16c>
 8002f3c:	2b70      	cmp	r3, #112	; 0x70
 8002f3e:	d01a      	beq.n	8002f76 <HAL_TIM_ConfigClockSource+0xa6>
 8002f40:	2b70      	cmp	r3, #112	; 0x70
 8002f42:	d87b      	bhi.n	800303c <HAL_TIM_ConfigClockSource+0x16c>
 8002f44:	2b60      	cmp	r3, #96	; 0x60
 8002f46:	d050      	beq.n	8002fea <HAL_TIM_ConfigClockSource+0x11a>
 8002f48:	2b60      	cmp	r3, #96	; 0x60
 8002f4a:	d877      	bhi.n	800303c <HAL_TIM_ConfigClockSource+0x16c>
 8002f4c:	2b50      	cmp	r3, #80	; 0x50
 8002f4e:	d03c      	beq.n	8002fca <HAL_TIM_ConfigClockSource+0xfa>
 8002f50:	2b50      	cmp	r3, #80	; 0x50
 8002f52:	d873      	bhi.n	800303c <HAL_TIM_ConfigClockSource+0x16c>
 8002f54:	2b40      	cmp	r3, #64	; 0x40
 8002f56:	d058      	beq.n	800300a <HAL_TIM_ConfigClockSource+0x13a>
 8002f58:	2b40      	cmp	r3, #64	; 0x40
 8002f5a:	d86f      	bhi.n	800303c <HAL_TIM_ConfigClockSource+0x16c>
 8002f5c:	2b30      	cmp	r3, #48	; 0x30
 8002f5e:	d064      	beq.n	800302a <HAL_TIM_ConfigClockSource+0x15a>
 8002f60:	2b30      	cmp	r3, #48	; 0x30
 8002f62:	d86b      	bhi.n	800303c <HAL_TIM_ConfigClockSource+0x16c>
 8002f64:	2b20      	cmp	r3, #32
 8002f66:	d060      	beq.n	800302a <HAL_TIM_ConfigClockSource+0x15a>
 8002f68:	2b20      	cmp	r3, #32
 8002f6a:	d867      	bhi.n	800303c <HAL_TIM_ConfigClockSource+0x16c>
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d05c      	beq.n	800302a <HAL_TIM_ConfigClockSource+0x15a>
 8002f70:	2b10      	cmp	r3, #16
 8002f72:	d05a      	beq.n	800302a <HAL_TIM_ConfigClockSource+0x15a>
 8002f74:	e062      	b.n	800303c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6818      	ldr	r0, [r3, #0]
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	6899      	ldr	r1, [r3, #8]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685a      	ldr	r2, [r3, #4]
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	f000 f9af 	bl	80032e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68ba      	ldr	r2, [r7, #8]
 8002fa0:	609a      	str	r2, [r3, #8]
      break;
 8002fa2:	e04f      	b.n	8003044 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6818      	ldr	r0, [r3, #0]
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	6899      	ldr	r1, [r3, #8]
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685a      	ldr	r2, [r3, #4]
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	f000 f998 	bl	80032e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	689a      	ldr	r2, [r3, #8]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fc6:	609a      	str	r2, [r3, #8]
      break;
 8002fc8:	e03c      	b.n	8003044 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6818      	ldr	r0, [r3, #0]
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	6859      	ldr	r1, [r3, #4]
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	f000 f90c 	bl	80031f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2150      	movs	r1, #80	; 0x50
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f000 f965 	bl	80032b2 <TIM_ITRx_SetConfig>
      break;
 8002fe8:	e02c      	b.n	8003044 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6818      	ldr	r0, [r3, #0]
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	6859      	ldr	r1, [r3, #4]
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	f000 f92b 	bl	8003252 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2160      	movs	r1, #96	; 0x60
 8003002:	4618      	mov	r0, r3
 8003004:	f000 f955 	bl	80032b2 <TIM_ITRx_SetConfig>
      break;
 8003008:	e01c      	b.n	8003044 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6818      	ldr	r0, [r3, #0]
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	6859      	ldr	r1, [r3, #4]
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	461a      	mov	r2, r3
 8003018:	f000 f8ec 	bl	80031f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2140      	movs	r1, #64	; 0x40
 8003022:	4618      	mov	r0, r3
 8003024:	f000 f945 	bl	80032b2 <TIM_ITRx_SetConfig>
      break;
 8003028:	e00c      	b.n	8003044 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4619      	mov	r1, r3
 8003034:	4610      	mov	r0, r2
 8003036:	f000 f93c 	bl	80032b2 <TIM_ITRx_SetConfig>
      break;
 800303a:	e003      	b.n	8003044 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	73fb      	strb	r3, [r7, #15]
      break;
 8003040:	e000      	b.n	8003044 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003042:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003054:	7bfb      	ldrb	r3, [r7, #15]
}
 8003056:	4618      	mov	r0, r3
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	fffeff88 	.word	0xfffeff88

08003064 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a40      	ldr	r2, [pc, #256]	; (80031c8 <TIM_Base_SetConfig+0x114>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d013      	beq.n	80030f4 <TIM_Base_SetConfig+0x40>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030d2:	d00f      	beq.n	80030f4 <TIM_Base_SetConfig+0x40>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a3d      	ldr	r2, [pc, #244]	; (80031cc <TIM_Base_SetConfig+0x118>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d00b      	beq.n	80030f4 <TIM_Base_SetConfig+0x40>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a3c      	ldr	r2, [pc, #240]	; (80031d0 <TIM_Base_SetConfig+0x11c>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d007      	beq.n	80030f4 <TIM_Base_SetConfig+0x40>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a3b      	ldr	r2, [pc, #236]	; (80031d4 <TIM_Base_SetConfig+0x120>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d003      	beq.n	80030f4 <TIM_Base_SetConfig+0x40>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a3a      	ldr	r2, [pc, #232]	; (80031d8 <TIM_Base_SetConfig+0x124>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d108      	bne.n	8003106 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	4313      	orrs	r3, r2
 8003104:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a2f      	ldr	r2, [pc, #188]	; (80031c8 <TIM_Base_SetConfig+0x114>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d02b      	beq.n	8003166 <TIM_Base_SetConfig+0xb2>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003114:	d027      	beq.n	8003166 <TIM_Base_SetConfig+0xb2>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a2c      	ldr	r2, [pc, #176]	; (80031cc <TIM_Base_SetConfig+0x118>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d023      	beq.n	8003166 <TIM_Base_SetConfig+0xb2>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a2b      	ldr	r2, [pc, #172]	; (80031d0 <TIM_Base_SetConfig+0x11c>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d01f      	beq.n	8003166 <TIM_Base_SetConfig+0xb2>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a2a      	ldr	r2, [pc, #168]	; (80031d4 <TIM_Base_SetConfig+0x120>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d01b      	beq.n	8003166 <TIM_Base_SetConfig+0xb2>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a29      	ldr	r2, [pc, #164]	; (80031d8 <TIM_Base_SetConfig+0x124>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d017      	beq.n	8003166 <TIM_Base_SetConfig+0xb2>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a28      	ldr	r2, [pc, #160]	; (80031dc <TIM_Base_SetConfig+0x128>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d013      	beq.n	8003166 <TIM_Base_SetConfig+0xb2>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a27      	ldr	r2, [pc, #156]	; (80031e0 <TIM_Base_SetConfig+0x12c>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d00f      	beq.n	8003166 <TIM_Base_SetConfig+0xb2>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a26      	ldr	r2, [pc, #152]	; (80031e4 <TIM_Base_SetConfig+0x130>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d00b      	beq.n	8003166 <TIM_Base_SetConfig+0xb2>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a25      	ldr	r2, [pc, #148]	; (80031e8 <TIM_Base_SetConfig+0x134>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d007      	beq.n	8003166 <TIM_Base_SetConfig+0xb2>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a24      	ldr	r2, [pc, #144]	; (80031ec <TIM_Base_SetConfig+0x138>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d003      	beq.n	8003166 <TIM_Base_SetConfig+0xb2>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a23      	ldr	r2, [pc, #140]	; (80031f0 <TIM_Base_SetConfig+0x13c>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d108      	bne.n	8003178 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800316c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	4313      	orrs	r3, r2
 8003176:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	4313      	orrs	r3, r2
 8003184:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	68fa      	ldr	r2, [r7, #12]
 800318a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a0a      	ldr	r2, [pc, #40]	; (80031c8 <TIM_Base_SetConfig+0x114>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d003      	beq.n	80031ac <TIM_Base_SetConfig+0xf8>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a0c      	ldr	r2, [pc, #48]	; (80031d8 <TIM_Base_SetConfig+0x124>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d103      	bne.n	80031b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	691a      	ldr	r2, [r3, #16]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	615a      	str	r2, [r3, #20]
}
 80031ba:	bf00      	nop
 80031bc:	3714      	adds	r7, #20
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	40010000 	.word	0x40010000
 80031cc:	40000400 	.word	0x40000400
 80031d0:	40000800 	.word	0x40000800
 80031d4:	40000c00 	.word	0x40000c00
 80031d8:	40010400 	.word	0x40010400
 80031dc:	40014000 	.word	0x40014000
 80031e0:	40014400 	.word	0x40014400
 80031e4:	40014800 	.word	0x40014800
 80031e8:	40001800 	.word	0x40001800
 80031ec:	40001c00 	.word	0x40001c00
 80031f0:	40002000 	.word	0x40002000

080031f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b087      	sub	sp, #28
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6a1b      	ldr	r3, [r3, #32]
 8003204:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	f023 0201 	bic.w	r2, r3, #1
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800321e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	011b      	lsls	r3, r3, #4
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	4313      	orrs	r3, r2
 8003228:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	f023 030a 	bic.w	r3, r3, #10
 8003230:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003232:	697a      	ldr	r2, [r7, #20]
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	4313      	orrs	r3, r2
 8003238:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	621a      	str	r2, [r3, #32]
}
 8003246:	bf00      	nop
 8003248:	371c      	adds	r7, #28
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr

08003252 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003252:	b480      	push	{r7}
 8003254:	b087      	sub	sp, #28
 8003256:	af00      	add	r7, sp, #0
 8003258:	60f8      	str	r0, [r7, #12]
 800325a:	60b9      	str	r1, [r7, #8]
 800325c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	f023 0210 	bic.w	r2, r3, #16
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6a1b      	ldr	r3, [r3, #32]
 8003274:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800327c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	031b      	lsls	r3, r3, #12
 8003282:	697a      	ldr	r2, [r7, #20]
 8003284:	4313      	orrs	r3, r2
 8003286:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800328e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	011b      	lsls	r3, r3, #4
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	4313      	orrs	r3, r2
 8003298:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	621a      	str	r2, [r3, #32]
}
 80032a6:	bf00      	nop
 80032a8:	371c      	adds	r7, #28
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr

080032b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032b2:	b480      	push	{r7}
 80032b4:	b085      	sub	sp, #20
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
 80032ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	f043 0307 	orr.w	r3, r3, #7
 80032d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	609a      	str	r2, [r3, #8]
}
 80032dc:	bf00      	nop
 80032de:	3714      	adds	r7, #20
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b087      	sub	sp, #28
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
 80032f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003302:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	021a      	lsls	r2, r3, #8
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	431a      	orrs	r2, r3
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	4313      	orrs	r3, r2
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	4313      	orrs	r3, r2
 8003314:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	697a      	ldr	r2, [r7, #20]
 800331a:	609a      	str	r2, [r3, #8]
}
 800331c:	bf00      	nop
 800331e:	371c      	adds	r7, #28
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e040      	b.n	80033f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800337a:	2b00      	cmp	r3, #0
 800337c:	d106      	bne.n	800338c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f7fd fc48 	bl	8000c1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2224      	movs	r2, #36	; 0x24
 8003390:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f022 0201 	bic.w	r2, r2, #1
 80033a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 fbe6 	bl	8003b74 <UART_SetConfig>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d101      	bne.n	80033b2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e022      	b.n	80033f8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d002      	beq.n	80033c0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 fe3e 	bl	800403c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	685a      	ldr	r2, [r3, #4]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	689a      	ldr	r2, [r3, #8]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f042 0201 	orr.w	r2, r2, #1
 80033ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f000 fec5 	bl	8004180 <UART_CheckIdleState>
 80033f6:	4603      	mov	r3, r0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3708      	adds	r7, #8
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b08a      	sub	sp, #40	; 0x28
 8003404:	af02      	add	r7, sp, #8
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	603b      	str	r3, [r7, #0]
 800340c:	4613      	mov	r3, r2
 800340e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003414:	2b20      	cmp	r3, #32
 8003416:	d171      	bne.n	80034fc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d002      	beq.n	8003424 <HAL_UART_Transmit+0x24>
 800341e:	88fb      	ldrh	r3, [r7, #6]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d101      	bne.n	8003428 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e06a      	b.n	80034fe <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2221      	movs	r2, #33	; 0x21
 8003434:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003436:	f7fd fde1 	bl	8000ffc <HAL_GetTick>
 800343a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	88fa      	ldrh	r2, [r7, #6]
 8003440:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	88fa      	ldrh	r2, [r7, #6]
 8003448:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003454:	d108      	bne.n	8003468 <HAL_UART_Transmit+0x68>
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d104      	bne.n	8003468 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800345e:	2300      	movs	r3, #0
 8003460:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	61bb      	str	r3, [r7, #24]
 8003466:	e003      	b.n	8003470 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800346c:	2300      	movs	r3, #0
 800346e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003470:	e02c      	b.n	80034cc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	9300      	str	r3, [sp, #0]
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	2200      	movs	r2, #0
 800347a:	2180      	movs	r1, #128	; 0x80
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	f000 feb6 	bl	80041ee <UART_WaitOnFlagUntilTimeout>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d001      	beq.n	800348c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e038      	b.n	80034fe <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d10b      	bne.n	80034aa <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	881b      	ldrh	r3, [r3, #0]
 8003496:	461a      	mov	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034a0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	3302      	adds	r3, #2
 80034a6:	61bb      	str	r3, [r7, #24]
 80034a8:	e007      	b.n	80034ba <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	781a      	ldrb	r2, [r3, #0]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	3301      	adds	r3, #1
 80034b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	3b01      	subs	r3, #1
 80034c4:	b29a      	uxth	r2, r3
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1cc      	bne.n	8003472 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	9300      	str	r3, [sp, #0]
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	2200      	movs	r2, #0
 80034e0:	2140      	movs	r1, #64	; 0x40
 80034e2:	68f8      	ldr	r0, [r7, #12]
 80034e4:	f000 fe83 	bl	80041ee <UART_WaitOnFlagUntilTimeout>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e005      	b.n	80034fe <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2220      	movs	r2, #32
 80034f6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80034f8:	2300      	movs	r3, #0
 80034fa:	e000      	b.n	80034fe <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80034fc:	2302      	movs	r3, #2
  }
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3720      	adds	r7, #32
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b08a      	sub	sp, #40	; 0x28
 800350a:	af00      	add	r7, sp, #0
 800350c:	60f8      	str	r0, [r7, #12]
 800350e:	60b9      	str	r1, [r7, #8]
 8003510:	4613      	mov	r3, r2
 8003512:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800351a:	2b20      	cmp	r3, #32
 800351c:	d132      	bne.n	8003584 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d002      	beq.n	800352a <HAL_UART_Receive_IT+0x24>
 8003524:	88fb      	ldrh	r3, [r7, #6]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e02b      	b.n	8003586 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d018      	beq.n	8003574 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	e853 3f00 	ldrex	r3, [r3]
 800354e:	613b      	str	r3, [r7, #16]
   return(result);
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003556:	627b      	str	r3, [r7, #36]	; 0x24
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	461a      	mov	r2, r3
 800355e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003560:	623b      	str	r3, [r7, #32]
 8003562:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003564:	69f9      	ldr	r1, [r7, #28]
 8003566:	6a3a      	ldr	r2, [r7, #32]
 8003568:	e841 2300 	strex	r3, r2, [r1]
 800356c:	61bb      	str	r3, [r7, #24]
   return(result);
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d1e6      	bne.n	8003542 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003574:	88fb      	ldrh	r3, [r7, #6]
 8003576:	461a      	mov	r2, r3
 8003578:	68b9      	ldr	r1, [r7, #8]
 800357a:	68f8      	ldr	r0, [r7, #12]
 800357c:	f000 fefe 	bl	800437c <UART_Start_Receive_IT>
 8003580:	4603      	mov	r3, r0
 8003582:	e000      	b.n	8003586 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8003584:	2302      	movs	r3, #2
  }
}
 8003586:	4618      	mov	r0, r3
 8003588:	3728      	adds	r7, #40	; 0x28
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
	...

08003590 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b0ba      	sub	sp, #232	; 0xe8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	69db      	ldr	r3, [r3, #28]
 800359e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80035b6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80035ba:	f640 030f 	movw	r3, #2063	; 0x80f
 80035be:	4013      	ands	r3, r2
 80035c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80035c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d115      	bne.n	80035f8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80035cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035d0:	f003 0320 	and.w	r3, r3, #32
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00f      	beq.n	80035f8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80035d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035dc:	f003 0320 	and.w	r3, r3, #32
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d009      	beq.n	80035f8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f000 8297 	beq.w	8003b1c <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	4798      	blx	r3
      }
      return;
 80035f6:	e291      	b.n	8003b1c <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80035f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f000 8117 	beq.w	8003830 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003602:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b00      	cmp	r3, #0
 800360c:	d106      	bne.n	800361c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800360e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003612:	4b85      	ldr	r3, [pc, #532]	; (8003828 <HAL_UART_IRQHandler+0x298>)
 8003614:	4013      	ands	r3, r2
 8003616:	2b00      	cmp	r3, #0
 8003618:	f000 810a 	beq.w	8003830 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800361c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003620:	f003 0301 	and.w	r3, r3, #1
 8003624:	2b00      	cmp	r3, #0
 8003626:	d011      	beq.n	800364c <HAL_UART_IRQHandler+0xbc>
 8003628:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800362c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00b      	beq.n	800364c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2201      	movs	r2, #1
 800363a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003642:	f043 0201 	orr.w	r2, r3, #1
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800364c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003650:	f003 0302 	and.w	r3, r3, #2
 8003654:	2b00      	cmp	r3, #0
 8003656:	d011      	beq.n	800367c <HAL_UART_IRQHandler+0xec>
 8003658:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00b      	beq.n	800367c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2202      	movs	r2, #2
 800366a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003672:	f043 0204 	orr.w	r2, r3, #4
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800367c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003680:	f003 0304 	and.w	r3, r3, #4
 8003684:	2b00      	cmp	r3, #0
 8003686:	d011      	beq.n	80036ac <HAL_UART_IRQHandler+0x11c>
 8003688:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800368c:	f003 0301 	and.w	r3, r3, #1
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00b      	beq.n	80036ac <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2204      	movs	r2, #4
 800369a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036a2:	f043 0202 	orr.w	r2, r3, #2
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80036ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036b0:	f003 0308 	and.w	r3, r3, #8
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d017      	beq.n	80036e8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80036b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036bc:	f003 0320 	and.w	r3, r3, #32
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d105      	bne.n	80036d0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80036c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036c8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d00b      	beq.n	80036e8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2208      	movs	r2, #8
 80036d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036de:	f043 0208 	orr.w	r2, r3, #8
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80036e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d012      	beq.n	800371a <HAL_UART_IRQHandler+0x18a>
 80036f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00c      	beq.n	800371a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003708:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003710:	f043 0220 	orr.w	r2, r3, #32
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003720:	2b00      	cmp	r3, #0
 8003722:	f000 81fd 	beq.w	8003b20 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800372a:	f003 0320 	and.w	r3, r3, #32
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00d      	beq.n	800374e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003732:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003736:	f003 0320 	and.w	r3, r3, #32
 800373a:	2b00      	cmp	r3, #0
 800373c:	d007      	beq.n	800374e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003742:	2b00      	cmp	r3, #0
 8003744:	d003      	beq.n	800374e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003754:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003762:	2b40      	cmp	r3, #64	; 0x40
 8003764:	d005      	beq.n	8003772 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003766:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800376a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800376e:	2b00      	cmp	r3, #0
 8003770:	d04f      	beq.n	8003812 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 fec8 	bl	8004508 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003782:	2b40      	cmp	r3, #64	; 0x40
 8003784:	d141      	bne.n	800380a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	3308      	adds	r3, #8
 800378c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003790:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003794:	e853 3f00 	ldrex	r3, [r3]
 8003798:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800379c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80037a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	3308      	adds	r3, #8
 80037ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80037b2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80037b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80037be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80037c2:	e841 2300 	strex	r3, r2, [r1]
 80037c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80037ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1d9      	bne.n	8003786 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d013      	beq.n	8003802 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037de:	4a13      	ldr	r2, [pc, #76]	; (800382c <HAL_UART_IRQHandler+0x29c>)
 80037e0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7fd fd8a 	bl	8001300 <HAL_DMA_Abort_IT>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d017      	beq.n	8003822 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80037fc:	4610      	mov	r0, r2
 80037fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003800:	e00f      	b.n	8003822 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 f9a0 	bl	8003b48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003808:	e00b      	b.n	8003822 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 f99c 	bl	8003b48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003810:	e007      	b.n	8003822 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 f998 	bl	8003b48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003820:	e17e      	b.n	8003b20 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003822:	bf00      	nop
    return;
 8003824:	e17c      	b.n	8003b20 <HAL_UART_IRQHandler+0x590>
 8003826:	bf00      	nop
 8003828:	04000120 	.word	0x04000120
 800382c:	080045d1 	.word	0x080045d1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003834:	2b01      	cmp	r3, #1
 8003836:	f040 814c 	bne.w	8003ad2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800383a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800383e:	f003 0310 	and.w	r3, r3, #16
 8003842:	2b00      	cmp	r3, #0
 8003844:	f000 8145 	beq.w	8003ad2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003848:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800384c:	f003 0310 	and.w	r3, r3, #16
 8003850:	2b00      	cmp	r3, #0
 8003852:	f000 813e 	beq.w	8003ad2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2210      	movs	r2, #16
 800385c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003868:	2b40      	cmp	r3, #64	; 0x40
 800386a:	f040 80b6 	bne.w	80039da <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800387a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800387e:	2b00      	cmp	r3, #0
 8003880:	f000 8150 	beq.w	8003b24 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800388a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800388e:	429a      	cmp	r2, r3
 8003890:	f080 8148 	bcs.w	8003b24 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800389a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038a2:	69db      	ldr	r3, [r3, #28]
 80038a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038a8:	f000 8086 	beq.w	80039b8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80038b8:	e853 3f00 	ldrex	r3, [r3]
 80038bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80038c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	461a      	mov	r2, r3
 80038d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80038d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80038da:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038de:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80038e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80038e6:	e841 2300 	strex	r3, r2, [r1]
 80038ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80038ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1da      	bne.n	80038ac <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	3308      	adds	r3, #8
 80038fc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003900:	e853 3f00 	ldrex	r3, [r3]
 8003904:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003906:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003908:	f023 0301 	bic.w	r3, r3, #1
 800390c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	3308      	adds	r3, #8
 8003916:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800391a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800391e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003920:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003922:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003926:	e841 2300 	strex	r3, r2, [r1]
 800392a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800392c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1e1      	bne.n	80038f6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	3308      	adds	r3, #8
 8003938:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800393a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800393c:	e853 3f00 	ldrex	r3, [r3]
 8003940:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003942:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003944:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003948:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	3308      	adds	r3, #8
 8003952:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003956:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003958:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800395a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800395c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800395e:	e841 2300 	strex	r3, r2, [r1]
 8003962:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003964:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1e3      	bne.n	8003932 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2220      	movs	r2, #32
 800396e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800397e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003980:	e853 3f00 	ldrex	r3, [r3]
 8003984:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003986:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003988:	f023 0310 	bic.w	r3, r3, #16
 800398c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	461a      	mov	r2, r3
 8003996:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800399a:	65bb      	str	r3, [r7, #88]	; 0x58
 800399c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800399e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80039a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039a2:	e841 2300 	strex	r3, r2, [r1]
 80039a6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80039a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1e4      	bne.n	8003978 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7fd fc34 	bl	8001220 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2202      	movs	r2, #2
 80039bc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	4619      	mov	r1, r3
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 f8c2 	bl	8003b5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80039d8:	e0a4      	b.n	8003b24 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f000 8096 	beq.w	8003b28 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80039fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f000 8091 	beq.w	8003b28 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a0e:	e853 3f00 	ldrex	r3, [r3]
 8003a12:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	461a      	mov	r2, r3
 8003a24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003a28:	647b      	str	r3, [r7, #68]	; 0x44
 8003a2a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a2c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a30:	e841 2300 	strex	r3, r2, [r1]
 8003a34:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1e4      	bne.n	8003a06 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	3308      	adds	r3, #8
 8003a42:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a46:	e853 3f00 	ldrex	r3, [r3]
 8003a4a:	623b      	str	r3, [r7, #32]
   return(result);
 8003a4c:	6a3b      	ldr	r3, [r7, #32]
 8003a4e:	f023 0301 	bic.w	r3, r3, #1
 8003a52:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	3308      	adds	r3, #8
 8003a5c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003a60:	633a      	str	r2, [r7, #48]	; 0x30
 8003a62:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a68:	e841 2300 	strex	r3, r2, [r1]
 8003a6c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1e3      	bne.n	8003a3c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2220      	movs	r2, #32
 8003a78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	e853 3f00 	ldrex	r3, [r3]
 8003a94:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f023 0310 	bic.w	r3, r3, #16
 8003a9c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003aaa:	61fb      	str	r3, [r7, #28]
 8003aac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aae:	69b9      	ldr	r1, [r7, #24]
 8003ab0:	69fa      	ldr	r2, [r7, #28]
 8003ab2:	e841 2300 	strex	r3, r2, [r1]
 8003ab6:	617b      	str	r3, [r7, #20]
   return(result);
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1e4      	bne.n	8003a88 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2202      	movs	r2, #2
 8003ac2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ac4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ac8:	4619      	mov	r1, r3
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 f846 	bl	8003b5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ad0:	e02a      	b.n	8003b28 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00e      	beq.n	8003afc <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003ade:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d008      	beq.n	8003afc <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d01c      	beq.n	8003b2c <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	4798      	blx	r3
    }
    return;
 8003afa:	e017      	b.n	8003b2c <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003afc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d012      	beq.n	8003b2e <HAL_UART_IRQHandler+0x59e>
 8003b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00c      	beq.n	8003b2e <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 fd71 	bl	80045fc <UART_EndTransmit_IT>
    return;
 8003b1a:	e008      	b.n	8003b2e <HAL_UART_IRQHandler+0x59e>
      return;
 8003b1c:	bf00      	nop
 8003b1e:	e006      	b.n	8003b2e <HAL_UART_IRQHandler+0x59e>
    return;
 8003b20:	bf00      	nop
 8003b22:	e004      	b.n	8003b2e <HAL_UART_IRQHandler+0x59e>
      return;
 8003b24:	bf00      	nop
 8003b26:	e002      	b.n	8003b2e <HAL_UART_IRQHandler+0x59e>
      return;
 8003b28:	bf00      	nop
 8003b2a:	e000      	b.n	8003b2e <HAL_UART_IRQHandler+0x59e>
    return;
 8003b2c:	bf00      	nop
  }

}
 8003b2e:	37e8      	adds	r7, #232	; 0xe8
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	460b      	mov	r3, r1
 8003b66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b088      	sub	sp, #32
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	431a      	orrs	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	69db      	ldr	r3, [r3, #28]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	4ba6      	ldr	r3, [pc, #664]	; (8003e38 <UART_SetConfig+0x2c4>)
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	6812      	ldr	r2, [r2, #0]
 8003ba6:	6979      	ldr	r1, [r7, #20]
 8003ba8:	430b      	orrs	r3, r1
 8003baa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	68da      	ldr	r2, [r3, #12]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	697a      	ldr	r2, [r7, #20]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a94      	ldr	r2, [pc, #592]	; (8003e3c <UART_SetConfig+0x2c8>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d120      	bne.n	8003c32 <UART_SetConfig+0xbe>
 8003bf0:	4b93      	ldr	r3, [pc, #588]	; (8003e40 <UART_SetConfig+0x2cc>)
 8003bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf6:	f003 0303 	and.w	r3, r3, #3
 8003bfa:	2b03      	cmp	r3, #3
 8003bfc:	d816      	bhi.n	8003c2c <UART_SetConfig+0xb8>
 8003bfe:	a201      	add	r2, pc, #4	; (adr r2, 8003c04 <UART_SetConfig+0x90>)
 8003c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c04:	08003c15 	.word	0x08003c15
 8003c08:	08003c21 	.word	0x08003c21
 8003c0c:	08003c1b 	.word	0x08003c1b
 8003c10:	08003c27 	.word	0x08003c27
 8003c14:	2301      	movs	r3, #1
 8003c16:	77fb      	strb	r3, [r7, #31]
 8003c18:	e150      	b.n	8003ebc <UART_SetConfig+0x348>
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	77fb      	strb	r3, [r7, #31]
 8003c1e:	e14d      	b.n	8003ebc <UART_SetConfig+0x348>
 8003c20:	2304      	movs	r3, #4
 8003c22:	77fb      	strb	r3, [r7, #31]
 8003c24:	e14a      	b.n	8003ebc <UART_SetConfig+0x348>
 8003c26:	2308      	movs	r3, #8
 8003c28:	77fb      	strb	r3, [r7, #31]
 8003c2a:	e147      	b.n	8003ebc <UART_SetConfig+0x348>
 8003c2c:	2310      	movs	r3, #16
 8003c2e:	77fb      	strb	r3, [r7, #31]
 8003c30:	e144      	b.n	8003ebc <UART_SetConfig+0x348>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a83      	ldr	r2, [pc, #524]	; (8003e44 <UART_SetConfig+0x2d0>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d132      	bne.n	8003ca2 <UART_SetConfig+0x12e>
 8003c3c:	4b80      	ldr	r3, [pc, #512]	; (8003e40 <UART_SetConfig+0x2cc>)
 8003c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c42:	f003 030c 	and.w	r3, r3, #12
 8003c46:	2b0c      	cmp	r3, #12
 8003c48:	d828      	bhi.n	8003c9c <UART_SetConfig+0x128>
 8003c4a:	a201      	add	r2, pc, #4	; (adr r2, 8003c50 <UART_SetConfig+0xdc>)
 8003c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c50:	08003c85 	.word	0x08003c85
 8003c54:	08003c9d 	.word	0x08003c9d
 8003c58:	08003c9d 	.word	0x08003c9d
 8003c5c:	08003c9d 	.word	0x08003c9d
 8003c60:	08003c91 	.word	0x08003c91
 8003c64:	08003c9d 	.word	0x08003c9d
 8003c68:	08003c9d 	.word	0x08003c9d
 8003c6c:	08003c9d 	.word	0x08003c9d
 8003c70:	08003c8b 	.word	0x08003c8b
 8003c74:	08003c9d 	.word	0x08003c9d
 8003c78:	08003c9d 	.word	0x08003c9d
 8003c7c:	08003c9d 	.word	0x08003c9d
 8003c80:	08003c97 	.word	0x08003c97
 8003c84:	2300      	movs	r3, #0
 8003c86:	77fb      	strb	r3, [r7, #31]
 8003c88:	e118      	b.n	8003ebc <UART_SetConfig+0x348>
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	77fb      	strb	r3, [r7, #31]
 8003c8e:	e115      	b.n	8003ebc <UART_SetConfig+0x348>
 8003c90:	2304      	movs	r3, #4
 8003c92:	77fb      	strb	r3, [r7, #31]
 8003c94:	e112      	b.n	8003ebc <UART_SetConfig+0x348>
 8003c96:	2308      	movs	r3, #8
 8003c98:	77fb      	strb	r3, [r7, #31]
 8003c9a:	e10f      	b.n	8003ebc <UART_SetConfig+0x348>
 8003c9c:	2310      	movs	r3, #16
 8003c9e:	77fb      	strb	r3, [r7, #31]
 8003ca0:	e10c      	b.n	8003ebc <UART_SetConfig+0x348>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a68      	ldr	r2, [pc, #416]	; (8003e48 <UART_SetConfig+0x2d4>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d120      	bne.n	8003cee <UART_SetConfig+0x17a>
 8003cac:	4b64      	ldr	r3, [pc, #400]	; (8003e40 <UART_SetConfig+0x2cc>)
 8003cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003cb6:	2b30      	cmp	r3, #48	; 0x30
 8003cb8:	d013      	beq.n	8003ce2 <UART_SetConfig+0x16e>
 8003cba:	2b30      	cmp	r3, #48	; 0x30
 8003cbc:	d814      	bhi.n	8003ce8 <UART_SetConfig+0x174>
 8003cbe:	2b20      	cmp	r3, #32
 8003cc0:	d009      	beq.n	8003cd6 <UART_SetConfig+0x162>
 8003cc2:	2b20      	cmp	r3, #32
 8003cc4:	d810      	bhi.n	8003ce8 <UART_SetConfig+0x174>
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d002      	beq.n	8003cd0 <UART_SetConfig+0x15c>
 8003cca:	2b10      	cmp	r3, #16
 8003ccc:	d006      	beq.n	8003cdc <UART_SetConfig+0x168>
 8003cce:	e00b      	b.n	8003ce8 <UART_SetConfig+0x174>
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	77fb      	strb	r3, [r7, #31]
 8003cd4:	e0f2      	b.n	8003ebc <UART_SetConfig+0x348>
 8003cd6:	2302      	movs	r3, #2
 8003cd8:	77fb      	strb	r3, [r7, #31]
 8003cda:	e0ef      	b.n	8003ebc <UART_SetConfig+0x348>
 8003cdc:	2304      	movs	r3, #4
 8003cde:	77fb      	strb	r3, [r7, #31]
 8003ce0:	e0ec      	b.n	8003ebc <UART_SetConfig+0x348>
 8003ce2:	2308      	movs	r3, #8
 8003ce4:	77fb      	strb	r3, [r7, #31]
 8003ce6:	e0e9      	b.n	8003ebc <UART_SetConfig+0x348>
 8003ce8:	2310      	movs	r3, #16
 8003cea:	77fb      	strb	r3, [r7, #31]
 8003cec:	e0e6      	b.n	8003ebc <UART_SetConfig+0x348>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a56      	ldr	r2, [pc, #344]	; (8003e4c <UART_SetConfig+0x2d8>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d120      	bne.n	8003d3a <UART_SetConfig+0x1c6>
 8003cf8:	4b51      	ldr	r3, [pc, #324]	; (8003e40 <UART_SetConfig+0x2cc>)
 8003cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cfe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003d02:	2bc0      	cmp	r3, #192	; 0xc0
 8003d04:	d013      	beq.n	8003d2e <UART_SetConfig+0x1ba>
 8003d06:	2bc0      	cmp	r3, #192	; 0xc0
 8003d08:	d814      	bhi.n	8003d34 <UART_SetConfig+0x1c0>
 8003d0a:	2b80      	cmp	r3, #128	; 0x80
 8003d0c:	d009      	beq.n	8003d22 <UART_SetConfig+0x1ae>
 8003d0e:	2b80      	cmp	r3, #128	; 0x80
 8003d10:	d810      	bhi.n	8003d34 <UART_SetConfig+0x1c0>
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d002      	beq.n	8003d1c <UART_SetConfig+0x1a8>
 8003d16:	2b40      	cmp	r3, #64	; 0x40
 8003d18:	d006      	beq.n	8003d28 <UART_SetConfig+0x1b4>
 8003d1a:	e00b      	b.n	8003d34 <UART_SetConfig+0x1c0>
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	77fb      	strb	r3, [r7, #31]
 8003d20:	e0cc      	b.n	8003ebc <UART_SetConfig+0x348>
 8003d22:	2302      	movs	r3, #2
 8003d24:	77fb      	strb	r3, [r7, #31]
 8003d26:	e0c9      	b.n	8003ebc <UART_SetConfig+0x348>
 8003d28:	2304      	movs	r3, #4
 8003d2a:	77fb      	strb	r3, [r7, #31]
 8003d2c:	e0c6      	b.n	8003ebc <UART_SetConfig+0x348>
 8003d2e:	2308      	movs	r3, #8
 8003d30:	77fb      	strb	r3, [r7, #31]
 8003d32:	e0c3      	b.n	8003ebc <UART_SetConfig+0x348>
 8003d34:	2310      	movs	r3, #16
 8003d36:	77fb      	strb	r3, [r7, #31]
 8003d38:	e0c0      	b.n	8003ebc <UART_SetConfig+0x348>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a44      	ldr	r2, [pc, #272]	; (8003e50 <UART_SetConfig+0x2dc>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d125      	bne.n	8003d90 <UART_SetConfig+0x21c>
 8003d44:	4b3e      	ldr	r3, [pc, #248]	; (8003e40 <UART_SetConfig+0x2cc>)
 8003d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d52:	d017      	beq.n	8003d84 <UART_SetConfig+0x210>
 8003d54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d58:	d817      	bhi.n	8003d8a <UART_SetConfig+0x216>
 8003d5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d5e:	d00b      	beq.n	8003d78 <UART_SetConfig+0x204>
 8003d60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d64:	d811      	bhi.n	8003d8a <UART_SetConfig+0x216>
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d003      	beq.n	8003d72 <UART_SetConfig+0x1fe>
 8003d6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d6e:	d006      	beq.n	8003d7e <UART_SetConfig+0x20a>
 8003d70:	e00b      	b.n	8003d8a <UART_SetConfig+0x216>
 8003d72:	2300      	movs	r3, #0
 8003d74:	77fb      	strb	r3, [r7, #31]
 8003d76:	e0a1      	b.n	8003ebc <UART_SetConfig+0x348>
 8003d78:	2302      	movs	r3, #2
 8003d7a:	77fb      	strb	r3, [r7, #31]
 8003d7c:	e09e      	b.n	8003ebc <UART_SetConfig+0x348>
 8003d7e:	2304      	movs	r3, #4
 8003d80:	77fb      	strb	r3, [r7, #31]
 8003d82:	e09b      	b.n	8003ebc <UART_SetConfig+0x348>
 8003d84:	2308      	movs	r3, #8
 8003d86:	77fb      	strb	r3, [r7, #31]
 8003d88:	e098      	b.n	8003ebc <UART_SetConfig+0x348>
 8003d8a:	2310      	movs	r3, #16
 8003d8c:	77fb      	strb	r3, [r7, #31]
 8003d8e:	e095      	b.n	8003ebc <UART_SetConfig+0x348>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a2f      	ldr	r2, [pc, #188]	; (8003e54 <UART_SetConfig+0x2e0>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d125      	bne.n	8003de6 <UART_SetConfig+0x272>
 8003d9a:	4b29      	ldr	r3, [pc, #164]	; (8003e40 <UART_SetConfig+0x2cc>)
 8003d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003da4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003da8:	d017      	beq.n	8003dda <UART_SetConfig+0x266>
 8003daa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003dae:	d817      	bhi.n	8003de0 <UART_SetConfig+0x26c>
 8003db0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003db4:	d00b      	beq.n	8003dce <UART_SetConfig+0x25a>
 8003db6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dba:	d811      	bhi.n	8003de0 <UART_SetConfig+0x26c>
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d003      	beq.n	8003dc8 <UART_SetConfig+0x254>
 8003dc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dc4:	d006      	beq.n	8003dd4 <UART_SetConfig+0x260>
 8003dc6:	e00b      	b.n	8003de0 <UART_SetConfig+0x26c>
 8003dc8:	2301      	movs	r3, #1
 8003dca:	77fb      	strb	r3, [r7, #31]
 8003dcc:	e076      	b.n	8003ebc <UART_SetConfig+0x348>
 8003dce:	2302      	movs	r3, #2
 8003dd0:	77fb      	strb	r3, [r7, #31]
 8003dd2:	e073      	b.n	8003ebc <UART_SetConfig+0x348>
 8003dd4:	2304      	movs	r3, #4
 8003dd6:	77fb      	strb	r3, [r7, #31]
 8003dd8:	e070      	b.n	8003ebc <UART_SetConfig+0x348>
 8003dda:	2308      	movs	r3, #8
 8003ddc:	77fb      	strb	r3, [r7, #31]
 8003dde:	e06d      	b.n	8003ebc <UART_SetConfig+0x348>
 8003de0:	2310      	movs	r3, #16
 8003de2:	77fb      	strb	r3, [r7, #31]
 8003de4:	e06a      	b.n	8003ebc <UART_SetConfig+0x348>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a1b      	ldr	r2, [pc, #108]	; (8003e58 <UART_SetConfig+0x2e4>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d138      	bne.n	8003e62 <UART_SetConfig+0x2ee>
 8003df0:	4b13      	ldr	r3, [pc, #76]	; (8003e40 <UART_SetConfig+0x2cc>)
 8003df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003dfa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003dfe:	d017      	beq.n	8003e30 <UART_SetConfig+0x2bc>
 8003e00:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003e04:	d82a      	bhi.n	8003e5c <UART_SetConfig+0x2e8>
 8003e06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e0a:	d00b      	beq.n	8003e24 <UART_SetConfig+0x2b0>
 8003e0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e10:	d824      	bhi.n	8003e5c <UART_SetConfig+0x2e8>
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d003      	beq.n	8003e1e <UART_SetConfig+0x2aa>
 8003e16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e1a:	d006      	beq.n	8003e2a <UART_SetConfig+0x2b6>
 8003e1c:	e01e      	b.n	8003e5c <UART_SetConfig+0x2e8>
 8003e1e:	2300      	movs	r3, #0
 8003e20:	77fb      	strb	r3, [r7, #31]
 8003e22:	e04b      	b.n	8003ebc <UART_SetConfig+0x348>
 8003e24:	2302      	movs	r3, #2
 8003e26:	77fb      	strb	r3, [r7, #31]
 8003e28:	e048      	b.n	8003ebc <UART_SetConfig+0x348>
 8003e2a:	2304      	movs	r3, #4
 8003e2c:	77fb      	strb	r3, [r7, #31]
 8003e2e:	e045      	b.n	8003ebc <UART_SetConfig+0x348>
 8003e30:	2308      	movs	r3, #8
 8003e32:	77fb      	strb	r3, [r7, #31]
 8003e34:	e042      	b.n	8003ebc <UART_SetConfig+0x348>
 8003e36:	bf00      	nop
 8003e38:	efff69f3 	.word	0xefff69f3
 8003e3c:	40011000 	.word	0x40011000
 8003e40:	40023800 	.word	0x40023800
 8003e44:	40004400 	.word	0x40004400
 8003e48:	40004800 	.word	0x40004800
 8003e4c:	40004c00 	.word	0x40004c00
 8003e50:	40005000 	.word	0x40005000
 8003e54:	40011400 	.word	0x40011400
 8003e58:	40007800 	.word	0x40007800
 8003e5c:	2310      	movs	r3, #16
 8003e5e:	77fb      	strb	r3, [r7, #31]
 8003e60:	e02c      	b.n	8003ebc <UART_SetConfig+0x348>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a72      	ldr	r2, [pc, #456]	; (8004030 <UART_SetConfig+0x4bc>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d125      	bne.n	8003eb8 <UART_SetConfig+0x344>
 8003e6c:	4b71      	ldr	r3, [pc, #452]	; (8004034 <UART_SetConfig+0x4c0>)
 8003e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e72:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003e76:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003e7a:	d017      	beq.n	8003eac <UART_SetConfig+0x338>
 8003e7c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003e80:	d817      	bhi.n	8003eb2 <UART_SetConfig+0x33e>
 8003e82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e86:	d00b      	beq.n	8003ea0 <UART_SetConfig+0x32c>
 8003e88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e8c:	d811      	bhi.n	8003eb2 <UART_SetConfig+0x33e>
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d003      	beq.n	8003e9a <UART_SetConfig+0x326>
 8003e92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e96:	d006      	beq.n	8003ea6 <UART_SetConfig+0x332>
 8003e98:	e00b      	b.n	8003eb2 <UART_SetConfig+0x33e>
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	77fb      	strb	r3, [r7, #31]
 8003e9e:	e00d      	b.n	8003ebc <UART_SetConfig+0x348>
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	77fb      	strb	r3, [r7, #31]
 8003ea4:	e00a      	b.n	8003ebc <UART_SetConfig+0x348>
 8003ea6:	2304      	movs	r3, #4
 8003ea8:	77fb      	strb	r3, [r7, #31]
 8003eaa:	e007      	b.n	8003ebc <UART_SetConfig+0x348>
 8003eac:	2308      	movs	r3, #8
 8003eae:	77fb      	strb	r3, [r7, #31]
 8003eb0:	e004      	b.n	8003ebc <UART_SetConfig+0x348>
 8003eb2:	2310      	movs	r3, #16
 8003eb4:	77fb      	strb	r3, [r7, #31]
 8003eb6:	e001      	b.n	8003ebc <UART_SetConfig+0x348>
 8003eb8:	2310      	movs	r3, #16
 8003eba:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	69db      	ldr	r3, [r3, #28]
 8003ec0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ec4:	d15b      	bne.n	8003f7e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003ec6:	7ffb      	ldrb	r3, [r7, #31]
 8003ec8:	2b08      	cmp	r3, #8
 8003eca:	d828      	bhi.n	8003f1e <UART_SetConfig+0x3aa>
 8003ecc:	a201      	add	r2, pc, #4	; (adr r2, 8003ed4 <UART_SetConfig+0x360>)
 8003ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed2:	bf00      	nop
 8003ed4:	08003ef9 	.word	0x08003ef9
 8003ed8:	08003f01 	.word	0x08003f01
 8003edc:	08003f09 	.word	0x08003f09
 8003ee0:	08003f1f 	.word	0x08003f1f
 8003ee4:	08003f0f 	.word	0x08003f0f
 8003ee8:	08003f1f 	.word	0x08003f1f
 8003eec:	08003f1f 	.word	0x08003f1f
 8003ef0:	08003f1f 	.word	0x08003f1f
 8003ef4:	08003f17 	.word	0x08003f17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ef8:	f7fe fa56 	bl	80023a8 <HAL_RCC_GetPCLK1Freq>
 8003efc:	61b8      	str	r0, [r7, #24]
        break;
 8003efe:	e013      	b.n	8003f28 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f00:	f7fe fa66 	bl	80023d0 <HAL_RCC_GetPCLK2Freq>
 8003f04:	61b8      	str	r0, [r7, #24]
        break;
 8003f06:	e00f      	b.n	8003f28 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f08:	4b4b      	ldr	r3, [pc, #300]	; (8004038 <UART_SetConfig+0x4c4>)
 8003f0a:	61bb      	str	r3, [r7, #24]
        break;
 8003f0c:	e00c      	b.n	8003f28 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f0e:	f7fe f939 	bl	8002184 <HAL_RCC_GetSysClockFreq>
 8003f12:	61b8      	str	r0, [r7, #24]
        break;
 8003f14:	e008      	b.n	8003f28 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f1a:	61bb      	str	r3, [r7, #24]
        break;
 8003f1c:	e004      	b.n	8003f28 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	77bb      	strb	r3, [r7, #30]
        break;
 8003f26:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d074      	beq.n	8004018 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	005a      	lsls	r2, r3, #1
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	085b      	lsrs	r3, r3, #1
 8003f38:	441a      	add	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f42:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	2b0f      	cmp	r3, #15
 8003f48:	d916      	bls.n	8003f78 <UART_SetConfig+0x404>
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f50:	d212      	bcs.n	8003f78 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	f023 030f 	bic.w	r3, r3, #15
 8003f5a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	085b      	lsrs	r3, r3, #1
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	f003 0307 	and.w	r3, r3, #7
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	89fb      	ldrh	r3, [r7, #14]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	89fa      	ldrh	r2, [r7, #14]
 8003f74:	60da      	str	r2, [r3, #12]
 8003f76:	e04f      	b.n	8004018 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	77bb      	strb	r3, [r7, #30]
 8003f7c:	e04c      	b.n	8004018 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f7e:	7ffb      	ldrb	r3, [r7, #31]
 8003f80:	2b08      	cmp	r3, #8
 8003f82:	d828      	bhi.n	8003fd6 <UART_SetConfig+0x462>
 8003f84:	a201      	add	r2, pc, #4	; (adr r2, 8003f8c <UART_SetConfig+0x418>)
 8003f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f8a:	bf00      	nop
 8003f8c:	08003fb1 	.word	0x08003fb1
 8003f90:	08003fb9 	.word	0x08003fb9
 8003f94:	08003fc1 	.word	0x08003fc1
 8003f98:	08003fd7 	.word	0x08003fd7
 8003f9c:	08003fc7 	.word	0x08003fc7
 8003fa0:	08003fd7 	.word	0x08003fd7
 8003fa4:	08003fd7 	.word	0x08003fd7
 8003fa8:	08003fd7 	.word	0x08003fd7
 8003fac:	08003fcf 	.word	0x08003fcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fb0:	f7fe f9fa 	bl	80023a8 <HAL_RCC_GetPCLK1Freq>
 8003fb4:	61b8      	str	r0, [r7, #24]
        break;
 8003fb6:	e013      	b.n	8003fe0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fb8:	f7fe fa0a 	bl	80023d0 <HAL_RCC_GetPCLK2Freq>
 8003fbc:	61b8      	str	r0, [r7, #24]
        break;
 8003fbe:	e00f      	b.n	8003fe0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fc0:	4b1d      	ldr	r3, [pc, #116]	; (8004038 <UART_SetConfig+0x4c4>)
 8003fc2:	61bb      	str	r3, [r7, #24]
        break;
 8003fc4:	e00c      	b.n	8003fe0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fc6:	f7fe f8dd 	bl	8002184 <HAL_RCC_GetSysClockFreq>
 8003fca:	61b8      	str	r0, [r7, #24]
        break;
 8003fcc:	e008      	b.n	8003fe0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fd2:	61bb      	str	r3, [r7, #24]
        break;
 8003fd4:	e004      	b.n	8003fe0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	77bb      	strb	r3, [r7, #30]
        break;
 8003fde:	bf00      	nop
    }

    if (pclk != 0U)
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d018      	beq.n	8004018 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	085a      	lsrs	r2, r3, #1
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	441a      	add	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ff8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	2b0f      	cmp	r3, #15
 8003ffe:	d909      	bls.n	8004014 <UART_SetConfig+0x4a0>
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004006:	d205      	bcs.n	8004014 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	b29a      	uxth	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	60da      	str	r2, [r3, #12]
 8004012:	e001      	b.n	8004018 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004024:	7fbb      	ldrb	r3, [r7, #30]
}
 8004026:	4618      	mov	r0, r3
 8004028:	3720      	adds	r7, #32
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	40007c00 	.word	0x40007c00
 8004034:	40023800 	.word	0x40023800
 8004038:	00f42400 	.word	0x00f42400

0800403c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004048:	f003 0301 	and.w	r3, r3, #1
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00a      	beq.n	8004066 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	430a      	orrs	r2, r1
 8004064:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00a      	beq.n	8004088 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	430a      	orrs	r2, r1
 8004086:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408c:	f003 0304 	and.w	r3, r3, #4
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00a      	beq.n	80040aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	430a      	orrs	r2, r1
 80040a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ae:	f003 0308 	and.w	r3, r3, #8
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00a      	beq.n	80040cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	430a      	orrs	r2, r1
 80040ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d0:	f003 0310 	and.w	r3, r3, #16
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00a      	beq.n	80040ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	430a      	orrs	r2, r1
 80040ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f2:	f003 0320 	and.w	r3, r3, #32
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00a      	beq.n	8004110 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	430a      	orrs	r2, r1
 800410e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004118:	2b00      	cmp	r3, #0
 800411a:	d01a      	beq.n	8004152 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	430a      	orrs	r2, r1
 8004130:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004136:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800413a:	d10a      	bne.n	8004152 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	430a      	orrs	r2, r1
 8004150:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00a      	beq.n	8004174 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	430a      	orrs	r2, r1
 8004172:	605a      	str	r2, [r3, #4]
  }
}
 8004174:	bf00      	nop
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b086      	sub	sp, #24
 8004184:	af02      	add	r7, sp, #8
 8004186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004190:	f7fc ff34 	bl	8000ffc <HAL_GetTick>
 8004194:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0308 	and.w	r3, r3, #8
 80041a0:	2b08      	cmp	r3, #8
 80041a2:	d10e      	bne.n	80041c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041a8:	9300      	str	r3, [sp, #0]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 f81b 	bl	80041ee <UART_WaitOnFlagUntilTimeout>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d001      	beq.n	80041c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e011      	b.n	80041e6 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2220      	movs	r2, #32
 80041c6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2220      	movs	r2, #32
 80041cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3710      	adds	r7, #16
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}

080041ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041ee:	b580      	push	{r7, lr}
 80041f0:	b09c      	sub	sp, #112	; 0x70
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	60f8      	str	r0, [r7, #12]
 80041f6:	60b9      	str	r1, [r7, #8]
 80041f8:	603b      	str	r3, [r7, #0]
 80041fa:	4613      	mov	r3, r2
 80041fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041fe:	e0a7      	b.n	8004350 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004200:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004206:	f000 80a3 	beq.w	8004350 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800420a:	f7fc fef7 	bl	8000ffc <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004216:	429a      	cmp	r2, r3
 8004218:	d302      	bcc.n	8004220 <UART_WaitOnFlagUntilTimeout+0x32>
 800421a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800421c:	2b00      	cmp	r3, #0
 800421e:	d13f      	bne.n	80042a0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004226:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004228:	e853 3f00 	ldrex	r3, [r3]
 800422c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800422e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004230:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004234:	667b      	str	r3, [r7, #100]	; 0x64
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	461a      	mov	r2, r3
 800423c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800423e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004240:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004242:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004244:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004246:	e841 2300 	strex	r3, r2, [r1]
 800424a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800424c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1e6      	bne.n	8004220 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	3308      	adds	r3, #8
 8004258:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800425a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800425c:	e853 3f00 	ldrex	r3, [r3]
 8004260:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004264:	f023 0301 	bic.w	r3, r3, #1
 8004268:	663b      	str	r3, [r7, #96]	; 0x60
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	3308      	adds	r3, #8
 8004270:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004272:	64ba      	str	r2, [r7, #72]	; 0x48
 8004274:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004276:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004278:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800427a:	e841 2300 	strex	r3, r2, [r1]
 800427e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004280:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1e5      	bne.n	8004252 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2220      	movs	r2, #32
 800428a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2220      	movs	r2, #32
 8004290:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e068      	b.n	8004372 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0304 	and.w	r3, r3, #4
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d050      	beq.n	8004350 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	69db      	ldr	r3, [r3, #28]
 80042b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042bc:	d148      	bne.n	8004350 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042c6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d0:	e853 3f00 	ldrex	r3, [r3]
 80042d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80042dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	461a      	mov	r2, r3
 80042e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042e6:	637b      	str	r3, [r7, #52]	; 0x34
 80042e8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80042ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042ee:	e841 2300 	strex	r3, r2, [r1]
 80042f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80042f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1e6      	bne.n	80042c8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	3308      	adds	r3, #8
 8004300:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	e853 3f00 	ldrex	r3, [r3]
 8004308:	613b      	str	r3, [r7, #16]
   return(result);
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	f023 0301 	bic.w	r3, r3, #1
 8004310:	66bb      	str	r3, [r7, #104]	; 0x68
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	3308      	adds	r3, #8
 8004318:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800431a:	623a      	str	r2, [r7, #32]
 800431c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431e:	69f9      	ldr	r1, [r7, #28]
 8004320:	6a3a      	ldr	r2, [r7, #32]
 8004322:	e841 2300 	strex	r3, r2, [r1]
 8004326:	61bb      	str	r3, [r7, #24]
   return(result);
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1e5      	bne.n	80042fa <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2220      	movs	r2, #32
 8004332:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2220      	movs	r2, #32
 8004338:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2220      	movs	r2, #32
 8004340:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e010      	b.n	8004372 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	69da      	ldr	r2, [r3, #28]
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	4013      	ands	r3, r2
 800435a:	68ba      	ldr	r2, [r7, #8]
 800435c:	429a      	cmp	r2, r3
 800435e:	bf0c      	ite	eq
 8004360:	2301      	moveq	r3, #1
 8004362:	2300      	movne	r3, #0
 8004364:	b2db      	uxtb	r3, r3
 8004366:	461a      	mov	r2, r3
 8004368:	79fb      	ldrb	r3, [r7, #7]
 800436a:	429a      	cmp	r2, r3
 800436c:	f43f af48 	beq.w	8004200 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3770      	adds	r7, #112	; 0x70
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
	...

0800437c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800437c:	b480      	push	{r7}
 800437e:	b097      	sub	sp, #92	; 0x5c
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	4613      	mov	r3, r2
 8004388:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	68ba      	ldr	r2, [r7, #8]
 800438e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	88fa      	ldrh	r2, [r7, #6]
 8004394:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	88fa      	ldrh	r2, [r7, #6]
 800439c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2200      	movs	r2, #0
 80043a4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ae:	d10e      	bne.n	80043ce <UART_Start_Receive_IT+0x52>
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d105      	bne.n	80043c4 <UART_Start_Receive_IT+0x48>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f240 12ff 	movw	r2, #511	; 0x1ff
 80043be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80043c2:	e02d      	b.n	8004420 <UART_Start_Receive_IT+0xa4>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	22ff      	movs	r2, #255	; 0xff
 80043c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80043cc:	e028      	b.n	8004420 <UART_Start_Receive_IT+0xa4>
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d10d      	bne.n	80043f2 <UART_Start_Receive_IT+0x76>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d104      	bne.n	80043e8 <UART_Start_Receive_IT+0x6c>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	22ff      	movs	r2, #255	; 0xff
 80043e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80043e6:	e01b      	b.n	8004420 <UART_Start_Receive_IT+0xa4>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	227f      	movs	r2, #127	; 0x7f
 80043ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80043f0:	e016      	b.n	8004420 <UART_Start_Receive_IT+0xa4>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043fa:	d10d      	bne.n	8004418 <UART_Start_Receive_IT+0x9c>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d104      	bne.n	800440e <UART_Start_Receive_IT+0x92>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	227f      	movs	r2, #127	; 0x7f
 8004408:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800440c:	e008      	b.n	8004420 <UART_Start_Receive_IT+0xa4>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	223f      	movs	r2, #63	; 0x3f
 8004412:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004416:	e003      	b.n	8004420 <UART_Start_Receive_IT+0xa4>
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2222      	movs	r2, #34	; 0x22
 800442c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	3308      	adds	r3, #8
 8004436:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800443a:	e853 3f00 	ldrex	r3, [r3]
 800443e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004442:	f043 0301 	orr.w	r3, r3, #1
 8004446:	657b      	str	r3, [r7, #84]	; 0x54
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	3308      	adds	r3, #8
 800444e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004450:	64ba      	str	r2, [r7, #72]	; 0x48
 8004452:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004454:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004456:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004458:	e841 2300 	strex	r3, r2, [r1]
 800445c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800445e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1e5      	bne.n	8004430 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800446c:	d107      	bne.n	800447e <UART_Start_Receive_IT+0x102>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d103      	bne.n	800447e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	4a21      	ldr	r2, [pc, #132]	; (8004500 <UART_Start_Receive_IT+0x184>)
 800447a:	669a      	str	r2, [r3, #104]	; 0x68
 800447c:	e002      	b.n	8004484 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	4a20      	ldr	r2, [pc, #128]	; (8004504 <UART_Start_Receive_IT+0x188>)
 8004482:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d019      	beq.n	80044c0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004494:	e853 3f00 	ldrex	r3, [r3]
 8004498:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800449a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80044a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	461a      	mov	r2, r3
 80044a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044aa:	637b      	str	r3, [r7, #52]	; 0x34
 80044ac:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044b2:	e841 2300 	strex	r3, r2, [r1]
 80044b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80044b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1e6      	bne.n	800448c <UART_Start_Receive_IT+0x110>
 80044be:	e018      	b.n	80044f2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	e853 3f00 	ldrex	r3, [r3]
 80044cc:	613b      	str	r3, [r7, #16]
   return(result);
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	f043 0320 	orr.w	r3, r3, #32
 80044d4:	653b      	str	r3, [r7, #80]	; 0x50
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	461a      	mov	r2, r3
 80044dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044de:	623b      	str	r3, [r7, #32]
 80044e0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e2:	69f9      	ldr	r1, [r7, #28]
 80044e4:	6a3a      	ldr	r2, [r7, #32]
 80044e6:	e841 2300 	strex	r3, r2, [r1]
 80044ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1e6      	bne.n	80044c0 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	375c      	adds	r7, #92	; 0x5c
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr
 8004500:	080047b7 	.word	0x080047b7
 8004504:	08004651 	.word	0x08004651

08004508 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004508:	b480      	push	{r7}
 800450a:	b095      	sub	sp, #84	; 0x54
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004518:	e853 3f00 	ldrex	r3, [r3]
 800451c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800451e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004520:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004524:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	461a      	mov	r2, r3
 800452c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800452e:	643b      	str	r3, [r7, #64]	; 0x40
 8004530:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004532:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004534:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004536:	e841 2300 	strex	r3, r2, [r1]
 800453a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800453c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1e6      	bne.n	8004510 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	3308      	adds	r3, #8
 8004548:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454a:	6a3b      	ldr	r3, [r7, #32]
 800454c:	e853 3f00 	ldrex	r3, [r3]
 8004550:	61fb      	str	r3, [r7, #28]
   return(result);
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	f023 0301 	bic.w	r3, r3, #1
 8004558:	64bb      	str	r3, [r7, #72]	; 0x48
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	3308      	adds	r3, #8
 8004560:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004562:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004564:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004566:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004568:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800456a:	e841 2300 	strex	r3, r2, [r1]
 800456e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1e5      	bne.n	8004542 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800457a:	2b01      	cmp	r3, #1
 800457c:	d118      	bne.n	80045b0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	e853 3f00 	ldrex	r3, [r3]
 800458a:	60bb      	str	r3, [r7, #8]
   return(result);
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	f023 0310 	bic.w	r3, r3, #16
 8004592:	647b      	str	r3, [r7, #68]	; 0x44
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	461a      	mov	r2, r3
 800459a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800459c:	61bb      	str	r3, [r7, #24]
 800459e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a0:	6979      	ldr	r1, [r7, #20]
 80045a2:	69ba      	ldr	r2, [r7, #24]
 80045a4:	e841 2300 	strex	r3, r2, [r1]
 80045a8:	613b      	str	r3, [r7, #16]
   return(result);
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1e6      	bne.n	800457e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2220      	movs	r2, #32
 80045b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80045c4:	bf00      	nop
 80045c6:	3754      	adds	r7, #84	; 0x54
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	f7ff faaa 	bl	8003b48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045f4:	bf00      	nop
 80045f6:	3710      	adds	r7, #16
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b088      	sub	sp, #32
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	e853 3f00 	ldrex	r3, [r3]
 8004610:	60bb      	str	r3, [r7, #8]
   return(result);
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004618:	61fb      	str	r3, [r7, #28]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	461a      	mov	r2, r3
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	61bb      	str	r3, [r7, #24]
 8004624:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004626:	6979      	ldr	r1, [r7, #20]
 8004628:	69ba      	ldr	r2, [r7, #24]
 800462a:	e841 2300 	strex	r3, r2, [r1]
 800462e:	613b      	str	r3, [r7, #16]
   return(result);
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1e6      	bne.n	8004604 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2220      	movs	r2, #32
 800463a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f7ff fa76 	bl	8003b34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004648:	bf00      	nop
 800464a:	3720      	adds	r7, #32
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b096      	sub	sp, #88	; 0x58
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800465e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004668:	2b22      	cmp	r3, #34	; 0x22
 800466a:	f040 8098 	bne.w	800479e <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004674:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004678:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800467c:	b2d9      	uxtb	r1, r3
 800467e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004682:	b2da      	uxtb	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004688:	400a      	ands	r2, r1
 800468a:	b2d2      	uxtb	r2, r2
 800468c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004692:	1c5a      	adds	r2, r3, #1
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800469e:	b29b      	uxth	r3, r3
 80046a0:	3b01      	subs	r3, #1
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d17b      	bne.n	80047ae <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046be:	e853 3f00 	ldrex	r3, [r3]
 80046c2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80046c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046ca:	653b      	str	r3, [r7, #80]	; 0x50
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	461a      	mov	r2, r3
 80046d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046d4:	647b      	str	r3, [r7, #68]	; 0x44
 80046d6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80046da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046dc:	e841 2300 	strex	r3, r2, [r1]
 80046e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80046e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d1e6      	bne.n	80046b6 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	3308      	adds	r3, #8
 80046ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f2:	e853 3f00 	ldrex	r3, [r3]
 80046f6:	623b      	str	r3, [r7, #32]
   return(result);
 80046f8:	6a3b      	ldr	r3, [r7, #32]
 80046fa:	f023 0301 	bic.w	r3, r3, #1
 80046fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	3308      	adds	r3, #8
 8004706:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004708:	633a      	str	r2, [r7, #48]	; 0x30
 800470a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800470c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800470e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004710:	e841 2300 	strex	r3, r2, [r1]
 8004714:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004718:	2b00      	cmp	r3, #0
 800471a:	d1e5      	bne.n	80046e8 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2220      	movs	r2, #32
 8004720:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004734:	2b01      	cmp	r3, #1
 8004736:	d12e      	bne.n	8004796 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	e853 3f00 	ldrex	r3, [r3]
 800474a:	60fb      	str	r3, [r7, #12]
   return(result);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f023 0310 	bic.w	r3, r3, #16
 8004752:	64bb      	str	r3, [r7, #72]	; 0x48
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	461a      	mov	r2, r3
 800475a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800475c:	61fb      	str	r3, [r7, #28]
 800475e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004760:	69b9      	ldr	r1, [r7, #24]
 8004762:	69fa      	ldr	r2, [r7, #28]
 8004764:	e841 2300 	strex	r3, r2, [r1]
 8004768:	617b      	str	r3, [r7, #20]
   return(result);
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d1e6      	bne.n	800473e <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	69db      	ldr	r3, [r3, #28]
 8004776:	f003 0310 	and.w	r3, r3, #16
 800477a:	2b10      	cmp	r3, #16
 800477c:	d103      	bne.n	8004786 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2210      	movs	r2, #16
 8004784:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800478c:	4619      	mov	r1, r3
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f7ff f9e4 	bl	8003b5c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004794:	e00b      	b.n	80047ae <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f7fb ff0a 	bl	80005b0 <HAL_UART_RxCpltCallback>
}
 800479c:	e007      	b.n	80047ae <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	699a      	ldr	r2, [r3, #24]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f042 0208 	orr.w	r2, r2, #8
 80047ac:	619a      	str	r2, [r3, #24]
}
 80047ae:	bf00      	nop
 80047b0:	3758      	adds	r7, #88	; 0x58
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80047b6:	b580      	push	{r7, lr}
 80047b8:	b096      	sub	sp, #88	; 0x58
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80047c4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047ce:	2b22      	cmp	r3, #34	; 0x22
 80047d0:	f040 8098 	bne.w	8004904 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047da:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047e2:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80047e4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80047e8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80047ec:	4013      	ands	r3, r2
 80047ee:	b29a      	uxth	r2, r3
 80047f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047f2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f8:	1c9a      	adds	r2, r3, #2
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004804:	b29b      	uxth	r3, r3
 8004806:	3b01      	subs	r3, #1
 8004808:	b29a      	uxth	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004816:	b29b      	uxth	r3, r3
 8004818:	2b00      	cmp	r3, #0
 800481a:	d17b      	bne.n	8004914 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004824:	e853 3f00 	ldrex	r3, [r3]
 8004828:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800482a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800482c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004830:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	461a      	mov	r2, r3
 8004838:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800483a:	643b      	str	r3, [r7, #64]	; 0x40
 800483c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004840:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004842:	e841 2300 	strex	r3, r2, [r1]
 8004846:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1e6      	bne.n	800481c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	3308      	adds	r3, #8
 8004854:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004856:	6a3b      	ldr	r3, [r7, #32]
 8004858:	e853 3f00 	ldrex	r3, [r3]
 800485c:	61fb      	str	r3, [r7, #28]
   return(result);
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	f023 0301 	bic.w	r3, r3, #1
 8004864:	64bb      	str	r3, [r7, #72]	; 0x48
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	3308      	adds	r3, #8
 800486c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800486e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004870:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004872:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004874:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004876:	e841 2300 	strex	r3, r2, [r1]
 800487a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800487c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1e5      	bne.n	800484e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2220      	movs	r2, #32
 8004886:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800489a:	2b01      	cmp	r3, #1
 800489c:	d12e      	bne.n	80048fc <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	e853 3f00 	ldrex	r3, [r3]
 80048b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	f023 0310 	bic.w	r3, r3, #16
 80048b8:	647b      	str	r3, [r7, #68]	; 0x44
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	461a      	mov	r2, r3
 80048c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048c2:	61bb      	str	r3, [r7, #24]
 80048c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c6:	6979      	ldr	r1, [r7, #20]
 80048c8:	69ba      	ldr	r2, [r7, #24]
 80048ca:	e841 2300 	strex	r3, r2, [r1]
 80048ce:	613b      	str	r3, [r7, #16]
   return(result);
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1e6      	bne.n	80048a4 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	69db      	ldr	r3, [r3, #28]
 80048dc:	f003 0310 	and.w	r3, r3, #16
 80048e0:	2b10      	cmp	r3, #16
 80048e2:	d103      	bne.n	80048ec <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2210      	movs	r2, #16
 80048ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80048f2:	4619      	mov	r1, r3
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f7ff f931 	bl	8003b5c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80048fa:	e00b      	b.n	8004914 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f7fb fe57 	bl	80005b0 <HAL_UART_RxCpltCallback>
}
 8004902:	e007      	b.n	8004914 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	699a      	ldr	r2, [r3, #24]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f042 0208 	orr.w	r2, r2, #8
 8004912:	619a      	str	r2, [r3, #24]
}
 8004914:	bf00      	nop
 8004916:	3758      	adds	r7, #88	; 0x58
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800491c:	b084      	sub	sp, #16
 800491e:	b580      	push	{r7, lr}
 8004920:	b084      	sub	sp, #16
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
 8004926:	f107 001c 	add.w	r0, r7, #28
 800492a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800492e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004930:	2b01      	cmp	r3, #1
 8004932:	d126      	bne.n	8004982 <USB_CoreInit+0x66>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004938:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	68da      	ldr	r2, [r3, #12]
 8004944:	4b38      	ldr	r3, [pc, #224]	; (8004a28 <USB_CoreInit+0x10c>)
 8004946:	4013      	ands	r3, r2
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	f043 0210 	orr.w	r2, r3, #16
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004964:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004966:	2b01      	cmp	r3, #1
 8004968:	d105      	bne.n	8004976 <USB_CoreInit+0x5a>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 fad0 	bl	8004f1c <USB_CoreReset>
 800497c:	4603      	mov	r3, r0
 800497e:	73fb      	strb	r3, [r7, #15]
 8004980:	e03a      	b.n	80049f8 <USB_CoreInit+0xdc>
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8004982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004984:	2b03      	cmp	r3, #3
 8004986:	d126      	bne.n	80049d6 <USB_CoreInit+0xba>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	68da      	ldr	r2, [r3, #12]
 8004998:	4b23      	ldr	r3, [pc, #140]	; (8004a28 <USB_CoreInit+0x10c>)
 800499a:	4013      	ands	r3, r2
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	60da      	str	r2, [r3, #12]

    /* Select UTMI Interface */
    USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	f023 0210 	bic.w	r2, r3, #16
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	60da      	str	r2, [r3, #12]
    {
      return HAL_ERROR;
    }
#endif /* USBPHYC */

    if (cfg.use_external_vbus == 1U)
 80049b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d105      	bne.n	80049ca <USB_CoreInit+0xae>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 faa6 	bl	8004f1c <USB_CoreReset>
 80049d0:	4603      	mov	r3, r0
 80049d2:	73fb      	strb	r3, [r7, #15]
 80049d4:	e010      	b.n	80049f8 <USB_CoreInit+0xdc>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 fa9a 	bl	8004f1c <USB_CoreReset>
 80049e8:	4603      	mov	r3, r0
 80049ea:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80049f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d10b      	bne.n	8004a16 <USB_CoreInit+0xfa>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f043 0206 	orr.w	r2, r3, #6
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f043 0220 	orr.w	r2, r3, #32
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a22:	b004      	add	sp, #16
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	ffbdffbf 	.word	0xffbdffbf

08004a2c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f023 0201 	bic.w	r2, r3, #1
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	370c      	adds	r7, #12
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr

08004a4e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b084      	sub	sp, #16
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
 8004a56:	460b      	mov	r3, r1
 8004a58:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004a6a:	78fb      	ldrb	r3, [r7, #3]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d115      	bne.n	8004a9c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004a7c:	2001      	movs	r0, #1
 8004a7e:	f7fc fac9 	bl	8001014 <HAL_Delay>
      ms++;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	3301      	adds	r3, #1
 8004a86:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 fa39 	bl	8004f00 <USB_GetMode>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d01e      	beq.n	8004ad2 <USB_SetCurrentMode+0x84>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2b31      	cmp	r3, #49	; 0x31
 8004a98:	d9f0      	bls.n	8004a7c <USB_SetCurrentMode+0x2e>
 8004a9a:	e01a      	b.n	8004ad2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004a9c:	78fb      	ldrb	r3, [r7, #3]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d115      	bne.n	8004ace <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004aae:	2001      	movs	r0, #1
 8004ab0:	f7fc fab0 	bl	8001014 <HAL_Delay>
      ms++;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 fa20 	bl	8004f00 <USB_GetMode>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d005      	beq.n	8004ad2 <USB_SetCurrentMode+0x84>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2b31      	cmp	r3, #49	; 0x31
 8004aca:	d9f0      	bls.n	8004aae <USB_SetCurrentMode+0x60>
 8004acc:	e001      	b.n	8004ad2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e005      	b.n	8004ade <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2b32      	cmp	r3, #50	; 0x32
 8004ad6:	d101      	bne.n	8004adc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e000      	b.n	8004ade <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
	...

08004ae8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ae8:	b084      	sub	sp, #16
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b086      	sub	sp, #24
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
 8004af2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004af6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004afa:	2300      	movs	r3, #0
 8004afc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004b02:	2300      	movs	r3, #0
 8004b04:	613b      	str	r3, [r7, #16]
 8004b06:	e009      	b.n	8004b1c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	3340      	adds	r3, #64	; 0x40
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	4413      	add	r3, r2
 8004b12:	2200      	movs	r2, #0
 8004b14:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	3301      	adds	r3, #1
 8004b1a:	613b      	str	r3, [r7, #16]
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	2b0e      	cmp	r3, #14
 8004b20:	d9f2      	bls.n	8004b08 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004b22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d11c      	bne.n	8004b62 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b36:	f043 0302 	orr.w	r3, r3, #2
 8004b3a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b40:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	601a      	str	r2, [r3, #0]
 8004b60:	e005      	b.n	8004b6e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b66:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b74:	461a      	mov	r2, r3
 8004b76:	2300      	movs	r3, #0
 8004b78:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b80:	4619      	mov	r1, r3
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b88:	461a      	mov	r2, r3
 8004b8a:	680b      	ldr	r3, [r1, #0]
 8004b8c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d10c      	bne.n	8004bae <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d104      	bne.n	8004ba4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004b9a:	2100      	movs	r1, #0
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 f975 	bl	8004e8c <USB_SetDevSpeed>
 8004ba2:	e018      	b.n	8004bd6 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004ba4:	2101      	movs	r1, #1
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 f970 	bl	8004e8c <USB_SetDevSpeed>
 8004bac:	e013      	b.n	8004bd6 <USB_DevInit+0xee>
    }
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8004bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb0:	2b03      	cmp	r3, #3
 8004bb2:	d10c      	bne.n	8004bce <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d104      	bne.n	8004bc4 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004bba:	2100      	movs	r1, #0
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 f965 	bl	8004e8c <USB_SetDevSpeed>
 8004bc2:	e008      	b.n	8004bd6 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004bc4:	2101      	movs	r1, #1
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 f960 	bl	8004e8c <USB_SetDevSpeed>
 8004bcc:	e003      	b.n	8004bd6 <USB_DevInit+0xee>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004bce:	2103      	movs	r1, #3
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f000 f95b 	bl	8004e8c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004bd6:	2110      	movs	r1, #16
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 f8f3 	bl	8004dc4 <USB_FlushTxFifo>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d001      	beq.n	8004be8 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f000 f91f 	bl	8004e2c <USB_FlushRxFifo>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d001      	beq.n	8004bf8 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bfe:	461a      	mov	r2, r3
 8004c00:	2300      	movs	r3, #0
 8004c02:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c16:	461a      	mov	r2, r3
 8004c18:	2300      	movs	r3, #0
 8004c1a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	613b      	str	r3, [r7, #16]
 8004c20:	e043      	b.n	8004caa <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	015a      	lsls	r2, r3, #5
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	4413      	add	r3, r2
 8004c2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c38:	d118      	bne.n	8004c6c <USB_DevInit+0x184>
    {
      if (i == 0U)
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d10a      	bne.n	8004c56 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	015a      	lsls	r2, r3, #5
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	4413      	add	r3, r2
 8004c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c52:	6013      	str	r3, [r2, #0]
 8004c54:	e013      	b.n	8004c7e <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	015a      	lsls	r2, r3, #5
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	4413      	add	r3, r2
 8004c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c62:	461a      	mov	r2, r3
 8004c64:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004c68:	6013      	str	r3, [r2, #0]
 8004c6a:	e008      	b.n	8004c7e <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	015a      	lsls	r2, r3, #5
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	4413      	add	r3, r2
 8004c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c78:	461a      	mov	r2, r3
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	015a      	lsls	r2, r3, #5
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	4413      	add	r3, r2
 8004c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	015a      	lsls	r2, r3, #5
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	4413      	add	r3, r2
 8004c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ca2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	613b      	str	r3, [r7, #16]
 8004caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cac:	693a      	ldr	r2, [r7, #16]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d3b7      	bcc.n	8004c22 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	613b      	str	r3, [r7, #16]
 8004cb6:	e043      	b.n	8004d40 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	015a      	lsls	r2, r3, #5
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	4413      	add	r3, r2
 8004cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004cca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cce:	d118      	bne.n	8004d02 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d10a      	bne.n	8004cec <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	015a      	lsls	r2, r3, #5
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	4413      	add	r3, r2
 8004cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ce8:	6013      	str	r3, [r2, #0]
 8004cea:	e013      	b.n	8004d14 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	015a      	lsls	r2, r3, #5
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004cfe:	6013      	str	r3, [r2, #0]
 8004d00:	e008      	b.n	8004d14 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	015a      	lsls	r2, r3, #5
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	4413      	add	r3, r2
 8004d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d0e:	461a      	mov	r2, r3
 8004d10:	2300      	movs	r3, #0
 8004d12:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	015a      	lsls	r2, r3, #5
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d20:	461a      	mov	r2, r3
 8004d22:	2300      	movs	r3, #0
 8004d24:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	015a      	lsls	r2, r3, #5
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d32:	461a      	mov	r2, r3
 8004d34:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d38:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	613b      	str	r3, [r7, #16]
 8004d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d3b7      	bcc.n	8004cb8 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d5a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004d68:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d105      	bne.n	8004d7c <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	f043 0210 	orr.w	r2, r3, #16
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	699a      	ldr	r2, [r3, #24]
 8004d80:	4b0e      	ldr	r3, [pc, #56]	; (8004dbc <USB_DevInit+0x2d4>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d005      	beq.n	8004d9a <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	699b      	ldr	r3, [r3, #24]
 8004d92:	f043 0208 	orr.w	r2, r3, #8
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004d9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d105      	bne.n	8004dac <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	699a      	ldr	r2, [r3, #24]
 8004da4:	4b06      	ldr	r3, [pc, #24]	; (8004dc0 <USB_DevInit+0x2d8>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004dac:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3718      	adds	r7, #24
 8004db2:	46bd      	mov	sp, r7
 8004db4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004db8:	b004      	add	sp, #16
 8004dba:	4770      	bx	lr
 8004dbc:	803c3800 	.word	0x803c3800
 8004dc0:	40000004 	.word	0x40000004

08004dc4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	4a13      	ldr	r2, [pc, #76]	; (8004e28 <USB_FlushTxFifo+0x64>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d901      	bls.n	8004de4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e01b      	b.n	8004e1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	daf2      	bge.n	8004dd2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004dec:	2300      	movs	r3, #0
 8004dee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	019b      	lsls	r3, r3, #6
 8004df4:	f043 0220 	orr.w	r2, r3, #32
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	3301      	adds	r3, #1
 8004e00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	4a08      	ldr	r2, [pc, #32]	; (8004e28 <USB_FlushTxFifo+0x64>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d901      	bls.n	8004e0e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e006      	b.n	8004e1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	f003 0320 	and.w	r3, r3, #32
 8004e16:	2b20      	cmp	r3, #32
 8004e18:	d0f0      	beq.n	8004dfc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3714      	adds	r7, #20
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr
 8004e28:	00030d40 	.word	0x00030d40

08004e2c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e34:	2300      	movs	r3, #0
 8004e36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	4a11      	ldr	r2, [pc, #68]	; (8004e88 <USB_FlushRxFifo+0x5c>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d901      	bls.n	8004e4a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e018      	b.n	8004e7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	daf2      	bge.n	8004e38 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004e52:	2300      	movs	r3, #0
 8004e54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2210      	movs	r2, #16
 8004e5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	3301      	adds	r3, #1
 8004e60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	4a08      	ldr	r2, [pc, #32]	; (8004e88 <USB_FlushRxFifo+0x5c>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d901      	bls.n	8004e6e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e006      	b.n	8004e7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	f003 0310 	and.w	r3, r3, #16
 8004e76:	2b10      	cmp	r3, #16
 8004e78:	d0f0      	beq.n	8004e5c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3714      	adds	r7, #20
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr
 8004e88:	00030d40 	.word	0x00030d40

08004e8c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b085      	sub	sp, #20
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	460b      	mov	r3, r1
 8004e96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	78fb      	ldrb	r3, [r7, #3]
 8004ea6:	68f9      	ldr	r1, [r7, #12]
 8004ea8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004eac:	4313      	orrs	r3, r2
 8004eae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3714      	adds	r7, #20
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr

08004ebe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004ebe:	b480      	push	{r7}
 8004ec0:	b085      	sub	sp, #20
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004ed8:	f023 0303 	bic.w	r3, r3, #3
 8004edc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004eec:	f043 0302 	orr.w	r3, r3, #2
 8004ef0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3714      	adds	r7, #20
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	695b      	ldr	r3, [r3, #20]
 8004f0c:	f003 0301 	and.w	r3, r3, #1
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	370c      	adds	r7, #12
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b085      	sub	sp, #20
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f24:	2300      	movs	r3, #0
 8004f26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	4a13      	ldr	r2, [pc, #76]	; (8004f80 <USB_CoreReset+0x64>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d901      	bls.n	8004f3a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e01b      	b.n	8004f72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	daf2      	bge.n	8004f28 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004f42:	2300      	movs	r3, #0
 8004f44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	f043 0201 	orr.w	r2, r3, #1
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	3301      	adds	r3, #1
 8004f56:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	4a09      	ldr	r2, [pc, #36]	; (8004f80 <USB_CoreReset+0x64>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d901      	bls.n	8004f64 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	e006      	b.n	8004f72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	f003 0301 	and.w	r3, r3, #1
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d0f0      	beq.n	8004f52 <USB_CoreReset+0x36>

  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3714      	adds	r7, #20
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	00030d40 	.word	0x00030d40

08004f84 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004f92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f96:	2b84      	cmp	r3, #132	; 0x84
 8004f98:	d005      	beq.n	8004fa6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004f9a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	3303      	adds	r3, #3
 8004fa4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3714      	adds	r7, #20
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fba:	f3ef 8305 	mrs	r3, IPSR
 8004fbe:	607b      	str	r3, [r7, #4]
  return(result);
 8004fc0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	bf14      	ite	ne
 8004fc6:	2301      	movne	r3, #1
 8004fc8:	2300      	moveq	r3, #0
 8004fca:	b2db      	uxtb	r3, r3
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004fdc:	f000 ff66 	bl	8005eac <vTaskStartScheduler>
  
  return osOK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	bd80      	pop	{r7, pc}

08004fe6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004fe6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fe8:	b089      	sub	sp, #36	; 0x24
 8004fea:	af04      	add	r7, sp, #16
 8004fec:	6078      	str	r0, [r7, #4]
 8004fee:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	695b      	ldr	r3, [r3, #20]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d020      	beq.n	800503a <osThreadCreate+0x54>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d01c      	beq.n	800503a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685c      	ldr	r4, [r3, #4]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681d      	ldr	r5, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	691e      	ldr	r6, [r3, #16]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005012:	4618      	mov	r0, r3
 8005014:	f7ff ffb6 	bl	8004f84 <makeFreeRtosPriority>
 8005018:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005022:	9202      	str	r2, [sp, #8]
 8005024:	9301      	str	r3, [sp, #4]
 8005026:	9100      	str	r1, [sp, #0]
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	4632      	mov	r2, r6
 800502c:	4629      	mov	r1, r5
 800502e:	4620      	mov	r0, r4
 8005030:	f000 fd54 	bl	8005adc <xTaskCreateStatic>
 8005034:	4603      	mov	r3, r0
 8005036:	60fb      	str	r3, [r7, #12]
 8005038:	e01c      	b.n	8005074 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685c      	ldr	r4, [r3, #4]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005046:	b29e      	uxth	r6, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800504e:	4618      	mov	r0, r3
 8005050:	f7ff ff98 	bl	8004f84 <makeFreeRtosPriority>
 8005054:	4602      	mov	r2, r0
 8005056:	f107 030c 	add.w	r3, r7, #12
 800505a:	9301      	str	r3, [sp, #4]
 800505c:	9200      	str	r2, [sp, #0]
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	4632      	mov	r2, r6
 8005062:	4629      	mov	r1, r5
 8005064:	4620      	mov	r0, r4
 8005066:	f000 fd9c 	bl	8005ba2 <xTaskCreate>
 800506a:	4603      	mov	r3, r0
 800506c:	2b01      	cmp	r3, #1
 800506e:	d001      	beq.n	8005074 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005070:	2300      	movs	r3, #0
 8005072:	e000      	b.n	8005076 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005074:	68fb      	ldr	r3, [r7, #12]
}
 8005076:	4618      	mov	r0, r3
 8005078:	3714      	adds	r7, #20
 800507a:	46bd      	mov	sp, r7
 800507c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800507e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800507e:	b580      	push	{r7, lr}
 8005080:	b084      	sub	sp, #16
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d001      	beq.n	8005094 <osDelay+0x16>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	e000      	b.n	8005096 <osDelay+0x18>
 8005094:	2301      	movs	r3, #1
 8005096:	4618      	mov	r0, r3
 8005098:	f000 fed2 	bl	8005e40 <vTaskDelay>
  
  return osOK;
 800509c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3710      	adds	r7, #16
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
	...

080050a8 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b086      	sub	sp, #24
 80050ac:	af02      	add	r7, sp, #8
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80050b2:	2300      	movs	r3, #0
 80050b4:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 80050b6:	2300      	movs	r3, #0
 80050b8:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 80050ba:	f7ff ff7b 	bl	8004fb4 <inHandlerMode>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d01c      	beq.n	80050fe <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 80050c4:	6839      	ldr	r1, [r7, #0]
 80050c6:	f107 0208 	add.w	r2, r7, #8
 80050ca:	f107 030c 	add.w	r3, r7, #12
 80050ce:	9300      	str	r3, [sp, #0]
 80050d0:	4613      	mov	r3, r2
 80050d2:	2201      	movs	r2, #1
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f001 fcdb 	bl	8006a90 <xTaskGenericNotifyFromISR>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d002      	beq.n	80050e6 <osSignalSet+0x3e>
      return 0x80000000;
 80050e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80050e4:	e019      	b.n	800511a <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d015      	beq.n	8005118 <osSignalSet+0x70>
 80050ec:	4b0d      	ldr	r3, [pc, #52]	; (8005124 <osSignalSet+0x7c>)
 80050ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050f2:	601a      	str	r2, [r3, #0]
 80050f4:	f3bf 8f4f 	dsb	sy
 80050f8:	f3bf 8f6f 	isb	sy
 80050fc:	e00c      	b.n	8005118 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 80050fe:	6839      	ldr	r1, [r7, #0]
 8005100:	f107 0308 	add.w	r3, r7, #8
 8005104:	2201      	movs	r2, #1
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f001 fbfe 	bl	8006908 <xTaskGenericNotify>
 800510c:	4603      	mov	r3, r0
 800510e:	2b01      	cmp	r3, #1
 8005110:	d002      	beq.n	8005118 <osSignalSet+0x70>
    return 0x80000000;
 8005112:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005116:	e000      	b.n	800511a <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8005118:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 800511a:	4618      	mov	r0, r3
 800511c:	3710      	adds	r7, #16
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	e000ed04 	.word	0xe000ed04

08005128 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8005128:	b590      	push	{r4, r7, lr}
 800512a:	b089      	sub	sp, #36	; 0x24
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8005134:	2300      	movs	r3, #0
 8005136:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8005138:	2300      	movs	r3, #0
 800513a:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005142:	d103      	bne.n	800514c <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8005144:	f04f 33ff 	mov.w	r3, #4294967295
 8005148:	61fb      	str	r3, [r7, #28]
 800514a:	e009      	b.n	8005160 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d006      	beq.n	8005160 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d101      	bne.n	8005160 <osSignalWait+0x38>
      ticks = 1;
 800515c:	2301      	movs	r3, #1
 800515e:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8005160:	f7ff ff28 	bl	8004fb4 <inHandlerMode>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d002      	beq.n	8005170 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 800516a:	2382      	movs	r3, #130	; 0x82
 800516c:	613b      	str	r3, [r7, #16]
 800516e:	e01b      	b.n	80051a8 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8005170:	68b9      	ldr	r1, [r7, #8]
 8005172:	f107 0310 	add.w	r3, r7, #16
 8005176:	1d1a      	adds	r2, r3, #4
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	2000      	movs	r0, #0
 800517c:	f001 fb64 	bl	8006848 <xTaskNotifyWait>
 8005180:	4603      	mov	r3, r0
 8005182:	2b01      	cmp	r3, #1
 8005184:	d008      	beq.n	8005198 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d102      	bne.n	8005192 <osSignalWait+0x6a>
 800518c:	2300      	movs	r3, #0
 800518e:	613b      	str	r3, [r7, #16]
 8005190:	e00a      	b.n	80051a8 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 8005192:	2340      	movs	r3, #64	; 0x40
 8005194:	613b      	str	r3, [r7, #16]
 8005196:	e007      	b.n	80051a8 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	2b00      	cmp	r3, #0
 800519c:	da02      	bge.n	80051a4 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 800519e:	2386      	movs	r3, #134	; 0x86
 80051a0:	613b      	str	r3, [r7, #16]
 80051a2:	e001      	b.n	80051a8 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 80051a4:	2308      	movs	r3, #8
 80051a6:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	461c      	mov	r4, r3
 80051ac:	f107 0310 	add.w	r3, r7, #16
 80051b0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80051b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80051b8:	68f8      	ldr	r0, [r7, #12]
 80051ba:	3724      	adds	r7, #36	; 0x24
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd90      	pop	{r4, r7, pc}

080051c0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b086      	sub	sp, #24
 80051c4:	af02      	add	r7, sp, #8
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d016      	beq.n	8005200 <osSemaphoreCreate+0x40>
    if (count == 1) {
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d10a      	bne.n	80051ee <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	2203      	movs	r2, #3
 80051de:	9200      	str	r2, [sp, #0]
 80051e0:	2200      	movs	r2, #0
 80051e2:	2100      	movs	r1, #0
 80051e4:	2001      	movs	r0, #1
 80051e6:	f000 f949 	bl	800547c <xQueueGenericCreateStatic>
 80051ea:	4603      	mov	r3, r0
 80051ec:	e023      	b.n	8005236 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 80051ee:	6838      	ldr	r0, [r7, #0]
 80051f0:	6839      	ldr	r1, [r7, #0]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	461a      	mov	r2, r3
 80051f8:	f000 fa23 	bl	8005642 <xQueueCreateCountingSemaphoreStatic>
 80051fc:	4603      	mov	r3, r0
 80051fe:	e01a      	b.n	8005236 <osSemaphoreCreate+0x76>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	2b01      	cmp	r3, #1
 8005204:	d110      	bne.n	8005228 <osSemaphoreCreate+0x68>
      vSemaphoreCreateBinary(sema);
 8005206:	2203      	movs	r2, #3
 8005208:	2100      	movs	r1, #0
 800520a:	2001      	movs	r0, #1
 800520c:	f000 f9b8 	bl	8005580 <xQueueGenericCreate>
 8005210:	60f8      	str	r0, [r7, #12]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d005      	beq.n	8005224 <osSemaphoreCreate+0x64>
 8005218:	2300      	movs	r3, #0
 800521a:	2200      	movs	r2, #0
 800521c:	2100      	movs	r1, #0
 800521e:	68f8      	ldr	r0, [r7, #12]
 8005220:	f000 fa82 	bl	8005728 <xQueueGenericSend>
      return sema;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	e006      	b.n	8005236 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	683a      	ldr	r2, [r7, #0]
 800522c:	4611      	mov	r1, r2
 800522e:	4618      	mov	r0, r3
 8005230:	f000 fa42 	bl	80056b8 <xQueueCreateCountingSemaphore>
 8005234:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 8005236:	4618      	mov	r0, r3
 8005238:	3710      	adds	r7, #16
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}

0800523e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800523e:	b480      	push	{r7}
 8005240:	b083      	sub	sp, #12
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f103 0208 	add.w	r2, r3, #8
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f04f 32ff 	mov.w	r2, #4294967295
 8005256:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f103 0208 	add.w	r2, r3, #8
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f103 0208 	add.w	r2, r3, #8
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005272:	bf00      	nop
 8005274:	370c      	adds	r7, #12
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr

0800527e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800527e:	b480      	push	{r7}
 8005280:	b083      	sub	sp, #12
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800528c:	bf00      	nop
 800528e:	370c      	adds	r7, #12
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	689a      	ldr	r2, [r3, #8]
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	683a      	ldr	r2, [r7, #0]
 80052bc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	683a      	ldr	r2, [r7, #0]
 80052c2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	1c5a      	adds	r2, r3, #1
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	601a      	str	r2, [r3, #0]
}
 80052d4:	bf00      	nop
 80052d6:	3714      	adds	r7, #20
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f6:	d103      	bne.n	8005300 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	60fb      	str	r3, [r7, #12]
 80052fe:	e00c      	b.n	800531a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	3308      	adds	r3, #8
 8005304:	60fb      	str	r3, [r7, #12]
 8005306:	e002      	b.n	800530e <vListInsert+0x2e>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	60fb      	str	r3, [r7, #12]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68ba      	ldr	r2, [r7, #8]
 8005316:	429a      	cmp	r2, r3
 8005318:	d2f6      	bcs.n	8005308 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	685a      	ldr	r2, [r3, #4]
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	683a      	ldr	r2, [r7, #0]
 8005328:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	683a      	ldr	r2, [r7, #0]
 8005334:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	1c5a      	adds	r2, r3, #1
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	601a      	str	r2, [r3, #0]
}
 8005346:	bf00      	nop
 8005348:	3714      	adds	r7, #20
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr

08005352 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005352:	b480      	push	{r7}
 8005354:	b085      	sub	sp, #20
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	6892      	ldr	r2, [r2, #8]
 8005368:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	6852      	ldr	r2, [r2, #4]
 8005372:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	429a      	cmp	r2, r3
 800537c:	d103      	bne.n	8005386 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	689a      	ldr	r2, [r3, #8]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	1e5a      	subs	r2, r3, #1
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
}
 800539a:	4618      	mov	r0, r3
 800539c:	3714      	adds	r7, #20
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
	...

080053a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d10c      	bne.n	80053d6 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80053bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c0:	b672      	cpsid	i
 80053c2:	f383 8811 	msr	BASEPRI, r3
 80053c6:	f3bf 8f6f 	isb	sy
 80053ca:	f3bf 8f4f 	dsb	sy
 80053ce:	b662      	cpsie	i
 80053d0:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80053d2:	bf00      	nop
 80053d4:	e7fe      	b.n	80053d4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80053d6:	f001 fdb9 	bl	8006f4c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053e2:	68f9      	ldr	r1, [r7, #12]
 80053e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80053e6:	fb01 f303 	mul.w	r3, r1, r3
 80053ea:	441a      	add	r2, r3
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2200      	movs	r2, #0
 80053f4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005406:	3b01      	subs	r3, #1
 8005408:	68f9      	ldr	r1, [r7, #12]
 800540a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800540c:	fb01 f303 	mul.w	r3, r1, r3
 8005410:	441a      	add	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	22ff      	movs	r2, #255	; 0xff
 800541a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	22ff      	movs	r2, #255	; 0xff
 8005422:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d114      	bne.n	8005456 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d01a      	beq.n	800546a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	3310      	adds	r3, #16
 8005438:	4618      	mov	r0, r3
 800543a:	f000 ff95 	bl	8006368 <xTaskRemoveFromEventList>
 800543e:	4603      	mov	r3, r0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d012      	beq.n	800546a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005444:	4b0c      	ldr	r3, [pc, #48]	; (8005478 <xQueueGenericReset+0xd0>)
 8005446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800544a:	601a      	str	r2, [r3, #0]
 800544c:	f3bf 8f4f 	dsb	sy
 8005450:	f3bf 8f6f 	isb	sy
 8005454:	e009      	b.n	800546a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	3310      	adds	r3, #16
 800545a:	4618      	mov	r0, r3
 800545c:	f7ff feef 	bl	800523e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	3324      	adds	r3, #36	; 0x24
 8005464:	4618      	mov	r0, r3
 8005466:	f7ff feea 	bl	800523e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800546a:	f001 fda3 	bl	8006fb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800546e:	2301      	movs	r3, #1
}
 8005470:	4618      	mov	r0, r3
 8005472:	3710      	adds	r7, #16
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}
 8005478:	e000ed04 	.word	0xe000ed04

0800547c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800547c:	b580      	push	{r7, lr}
 800547e:	b08e      	sub	sp, #56	; 0x38
 8005480:	af02      	add	r7, sp, #8
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	607a      	str	r2, [r7, #4]
 8005488:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d10c      	bne.n	80054aa <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8005490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005494:	b672      	cpsid	i
 8005496:	f383 8811 	msr	BASEPRI, r3
 800549a:	f3bf 8f6f 	isb	sy
 800549e:	f3bf 8f4f 	dsb	sy
 80054a2:	b662      	cpsie	i
 80054a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80054a6:	bf00      	nop
 80054a8:	e7fe      	b.n	80054a8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d10c      	bne.n	80054ca <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80054b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b4:	b672      	cpsid	i
 80054b6:	f383 8811 	msr	BASEPRI, r3
 80054ba:	f3bf 8f6f 	isb	sy
 80054be:	f3bf 8f4f 	dsb	sy
 80054c2:	b662      	cpsie	i
 80054c4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80054c6:	bf00      	nop
 80054c8:	e7fe      	b.n	80054c8 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d002      	beq.n	80054d6 <xQueueGenericCreateStatic+0x5a>
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d001      	beq.n	80054da <xQueueGenericCreateStatic+0x5e>
 80054d6:	2301      	movs	r3, #1
 80054d8:	e000      	b.n	80054dc <xQueueGenericCreateStatic+0x60>
 80054da:	2300      	movs	r3, #0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d10c      	bne.n	80054fa <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80054e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e4:	b672      	cpsid	i
 80054e6:	f383 8811 	msr	BASEPRI, r3
 80054ea:	f3bf 8f6f 	isb	sy
 80054ee:	f3bf 8f4f 	dsb	sy
 80054f2:	b662      	cpsie	i
 80054f4:	623b      	str	r3, [r7, #32]
}
 80054f6:	bf00      	nop
 80054f8:	e7fe      	b.n	80054f8 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d102      	bne.n	8005506 <xQueueGenericCreateStatic+0x8a>
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d101      	bne.n	800550a <xQueueGenericCreateStatic+0x8e>
 8005506:	2301      	movs	r3, #1
 8005508:	e000      	b.n	800550c <xQueueGenericCreateStatic+0x90>
 800550a:	2300      	movs	r3, #0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d10c      	bne.n	800552a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8005510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005514:	b672      	cpsid	i
 8005516:	f383 8811 	msr	BASEPRI, r3
 800551a:	f3bf 8f6f 	isb	sy
 800551e:	f3bf 8f4f 	dsb	sy
 8005522:	b662      	cpsie	i
 8005524:	61fb      	str	r3, [r7, #28]
}
 8005526:	bf00      	nop
 8005528:	e7fe      	b.n	8005528 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800552a:	2348      	movs	r3, #72	; 0x48
 800552c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	2b48      	cmp	r3, #72	; 0x48
 8005532:	d00c      	beq.n	800554e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8005534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005538:	b672      	cpsid	i
 800553a:	f383 8811 	msr	BASEPRI, r3
 800553e:	f3bf 8f6f 	isb	sy
 8005542:	f3bf 8f4f 	dsb	sy
 8005546:	b662      	cpsie	i
 8005548:	61bb      	str	r3, [r7, #24]
}
 800554a:	bf00      	nop
 800554c:	e7fe      	b.n	800554c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800554e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00d      	beq.n	8005576 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800555a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800555c:	2201      	movs	r2, #1
 800555e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005562:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005568:	9300      	str	r3, [sp, #0]
 800556a:	4613      	mov	r3, r2
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	68b9      	ldr	r1, [r7, #8]
 8005570:	68f8      	ldr	r0, [r7, #12]
 8005572:	f000 f847 	bl	8005604 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005578:	4618      	mov	r0, r3
 800557a:	3730      	adds	r7, #48	; 0x30
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005580:	b580      	push	{r7, lr}
 8005582:	b08a      	sub	sp, #40	; 0x28
 8005584:	af02      	add	r7, sp, #8
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	4613      	mov	r3, r2
 800558c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d10c      	bne.n	80055ae <xQueueGenericCreate+0x2e>
	__asm volatile
 8005594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005598:	b672      	cpsid	i
 800559a:	f383 8811 	msr	BASEPRI, r3
 800559e:	f3bf 8f6f 	isb	sy
 80055a2:	f3bf 8f4f 	dsb	sy
 80055a6:	b662      	cpsie	i
 80055a8:	613b      	str	r3, [r7, #16]
}
 80055aa:	bf00      	nop
 80055ac:	e7fe      	b.n	80055ac <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d102      	bne.n	80055ba <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80055b4:	2300      	movs	r3, #0
 80055b6:	61fb      	str	r3, [r7, #28]
 80055b8:	e004      	b.n	80055c4 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	68ba      	ldr	r2, [r7, #8]
 80055be:	fb02 f303 	mul.w	r3, r2, r3
 80055c2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	3348      	adds	r3, #72	; 0x48
 80055c8:	4618      	mov	r0, r3
 80055ca:	f001 fdeb 	bl	80071a4 <pvPortMalloc>
 80055ce:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d011      	beq.n	80055fa <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	3348      	adds	r3, #72	; 0x48
 80055de:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80055e0:	69bb      	ldr	r3, [r7, #24]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80055e8:	79fa      	ldrb	r2, [r7, #7]
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	9300      	str	r3, [sp, #0]
 80055ee:	4613      	mov	r3, r2
 80055f0:	697a      	ldr	r2, [r7, #20]
 80055f2:	68b9      	ldr	r1, [r7, #8]
 80055f4:	68f8      	ldr	r0, [r7, #12]
 80055f6:	f000 f805 	bl	8005604 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80055fa:	69bb      	ldr	r3, [r7, #24]
	}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3720      	adds	r7, #32
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	607a      	str	r2, [r7, #4]
 8005610:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d103      	bne.n	8005620 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	69ba      	ldr	r2, [r7, #24]
 800561c:	601a      	str	r2, [r3, #0]
 800561e:	e002      	b.n	8005626 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	68ba      	ldr	r2, [r7, #8]
 8005630:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005632:	2101      	movs	r1, #1
 8005634:	69b8      	ldr	r0, [r7, #24]
 8005636:	f7ff feb7 	bl	80053a8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800563a:	bf00      	nop
 800563c:	3710      	adds	r7, #16
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}

08005642 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005642:	b580      	push	{r7, lr}
 8005644:	b08a      	sub	sp, #40	; 0x28
 8005646:	af02      	add	r7, sp, #8
 8005648:	60f8      	str	r0, [r7, #12]
 800564a:	60b9      	str	r1, [r7, #8]
 800564c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d10c      	bne.n	800566e <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 8005654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005658:	b672      	cpsid	i
 800565a:	f383 8811 	msr	BASEPRI, r3
 800565e:	f3bf 8f6f 	isb	sy
 8005662:	f3bf 8f4f 	dsb	sy
 8005666:	b662      	cpsie	i
 8005668:	61bb      	str	r3, [r7, #24]
}
 800566a:	bf00      	nop
 800566c:	e7fe      	b.n	800566c <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800566e:	68ba      	ldr	r2, [r7, #8]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	429a      	cmp	r2, r3
 8005674:	d90c      	bls.n	8005690 <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 8005676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800567a:	b672      	cpsid	i
 800567c:	f383 8811 	msr	BASEPRI, r3
 8005680:	f3bf 8f6f 	isb	sy
 8005684:	f3bf 8f4f 	dsb	sy
 8005688:	b662      	cpsie	i
 800568a:	617b      	str	r3, [r7, #20]
}
 800568c:	bf00      	nop
 800568e:	e7fe      	b.n	800568e <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005690:	2302      	movs	r3, #2
 8005692:	9300      	str	r3, [sp, #0]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	2100      	movs	r1, #0
 800569a:	68f8      	ldr	r0, [r7, #12]
 800569c:	f7ff feee 	bl	800547c <xQueueGenericCreateStatic>
 80056a0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d002      	beq.n	80056ae <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	68ba      	ldr	r2, [r7, #8]
 80056ac:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80056ae:	69fb      	ldr	r3, [r7, #28]
	}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3720      	adds	r7, #32
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b086      	sub	sp, #24
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d10c      	bne.n	80056e2 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 80056c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056cc:	b672      	cpsid	i
 80056ce:	f383 8811 	msr	BASEPRI, r3
 80056d2:	f3bf 8f6f 	isb	sy
 80056d6:	f3bf 8f4f 	dsb	sy
 80056da:	b662      	cpsie	i
 80056dc:	613b      	str	r3, [r7, #16]
}
 80056de:	bf00      	nop
 80056e0:	e7fe      	b.n	80056e0 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 80056e2:	683a      	ldr	r2, [r7, #0]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d90c      	bls.n	8005704 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 80056ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ee:	b672      	cpsid	i
 80056f0:	f383 8811 	msr	BASEPRI, r3
 80056f4:	f3bf 8f6f 	isb	sy
 80056f8:	f3bf 8f4f 	dsb	sy
 80056fc:	b662      	cpsie	i
 80056fe:	60fb      	str	r3, [r7, #12]
}
 8005700:	bf00      	nop
 8005702:	e7fe      	b.n	8005702 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005704:	2202      	movs	r2, #2
 8005706:	2100      	movs	r1, #0
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f7ff ff39 	bl	8005580 <xQueueGenericCreate>
 800570e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d002      	beq.n	800571c <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	683a      	ldr	r2, [r7, #0]
 800571a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800571c:	697b      	ldr	r3, [r7, #20]
	}
 800571e:	4618      	mov	r0, r3
 8005720:	3718      	adds	r7, #24
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
	...

08005728 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b08e      	sub	sp, #56	; 0x38
 800572c:	af00      	add	r7, sp, #0
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	607a      	str	r2, [r7, #4]
 8005734:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005736:	2300      	movs	r3, #0
 8005738:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800573e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005740:	2b00      	cmp	r3, #0
 8005742:	d10c      	bne.n	800575e <xQueueGenericSend+0x36>
	__asm volatile
 8005744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005748:	b672      	cpsid	i
 800574a:	f383 8811 	msr	BASEPRI, r3
 800574e:	f3bf 8f6f 	isb	sy
 8005752:	f3bf 8f4f 	dsb	sy
 8005756:	b662      	cpsie	i
 8005758:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800575a:	bf00      	nop
 800575c:	e7fe      	b.n	800575c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d103      	bne.n	800576c <xQueueGenericSend+0x44>
 8005764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005768:	2b00      	cmp	r3, #0
 800576a:	d101      	bne.n	8005770 <xQueueGenericSend+0x48>
 800576c:	2301      	movs	r3, #1
 800576e:	e000      	b.n	8005772 <xQueueGenericSend+0x4a>
 8005770:	2300      	movs	r3, #0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d10c      	bne.n	8005790 <xQueueGenericSend+0x68>
	__asm volatile
 8005776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800577a:	b672      	cpsid	i
 800577c:	f383 8811 	msr	BASEPRI, r3
 8005780:	f3bf 8f6f 	isb	sy
 8005784:	f3bf 8f4f 	dsb	sy
 8005788:	b662      	cpsie	i
 800578a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800578c:	bf00      	nop
 800578e:	e7fe      	b.n	800578e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	2b02      	cmp	r3, #2
 8005794:	d103      	bne.n	800579e <xQueueGenericSend+0x76>
 8005796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800579a:	2b01      	cmp	r3, #1
 800579c:	d101      	bne.n	80057a2 <xQueueGenericSend+0x7a>
 800579e:	2301      	movs	r3, #1
 80057a0:	e000      	b.n	80057a4 <xQueueGenericSend+0x7c>
 80057a2:	2300      	movs	r3, #0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d10c      	bne.n	80057c2 <xQueueGenericSend+0x9a>
	__asm volatile
 80057a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ac:	b672      	cpsid	i
 80057ae:	f383 8811 	msr	BASEPRI, r3
 80057b2:	f3bf 8f6f 	isb	sy
 80057b6:	f3bf 8f4f 	dsb	sy
 80057ba:	b662      	cpsie	i
 80057bc:	623b      	str	r3, [r7, #32]
}
 80057be:	bf00      	nop
 80057c0:	e7fe      	b.n	80057c0 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80057c2:	f000 ff99 	bl	80066f8 <xTaskGetSchedulerState>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d102      	bne.n	80057d2 <xQueueGenericSend+0xaa>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d101      	bne.n	80057d6 <xQueueGenericSend+0xae>
 80057d2:	2301      	movs	r3, #1
 80057d4:	e000      	b.n	80057d8 <xQueueGenericSend+0xb0>
 80057d6:	2300      	movs	r3, #0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d10c      	bne.n	80057f6 <xQueueGenericSend+0xce>
	__asm volatile
 80057dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e0:	b672      	cpsid	i
 80057e2:	f383 8811 	msr	BASEPRI, r3
 80057e6:	f3bf 8f6f 	isb	sy
 80057ea:	f3bf 8f4f 	dsb	sy
 80057ee:	b662      	cpsie	i
 80057f0:	61fb      	str	r3, [r7, #28]
}
 80057f2:	bf00      	nop
 80057f4:	e7fe      	b.n	80057f4 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80057f6:	f001 fba9 	bl	8006f4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80057fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005802:	429a      	cmp	r2, r3
 8005804:	d302      	bcc.n	800580c <xQueueGenericSend+0xe4>
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	2b02      	cmp	r3, #2
 800580a:	d129      	bne.n	8005860 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800580c:	683a      	ldr	r2, [r7, #0]
 800580e:	68b9      	ldr	r1, [r7, #8]
 8005810:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005812:	f000 f88f 	bl	8005934 <prvCopyDataToQueue>
 8005816:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581c:	2b00      	cmp	r3, #0
 800581e:	d010      	beq.n	8005842 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005822:	3324      	adds	r3, #36	; 0x24
 8005824:	4618      	mov	r0, r3
 8005826:	f000 fd9f 	bl	8006368 <xTaskRemoveFromEventList>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d013      	beq.n	8005858 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005830:	4b3f      	ldr	r3, [pc, #252]	; (8005930 <xQueueGenericSend+0x208>)
 8005832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005836:	601a      	str	r2, [r3, #0]
 8005838:	f3bf 8f4f 	dsb	sy
 800583c:	f3bf 8f6f 	isb	sy
 8005840:	e00a      	b.n	8005858 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005844:	2b00      	cmp	r3, #0
 8005846:	d007      	beq.n	8005858 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005848:	4b39      	ldr	r3, [pc, #228]	; (8005930 <xQueueGenericSend+0x208>)
 800584a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800584e:	601a      	str	r2, [r3, #0]
 8005850:	f3bf 8f4f 	dsb	sy
 8005854:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005858:	f001 fbac 	bl	8006fb4 <vPortExitCritical>
				return pdPASS;
 800585c:	2301      	movs	r3, #1
 800585e:	e063      	b.n	8005928 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d103      	bne.n	800586e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005866:	f001 fba5 	bl	8006fb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800586a:	2300      	movs	r3, #0
 800586c:	e05c      	b.n	8005928 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800586e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005870:	2b00      	cmp	r3, #0
 8005872:	d106      	bne.n	8005882 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005874:	f107 0314 	add.w	r3, r7, #20
 8005878:	4618      	mov	r0, r3
 800587a:	f000 fdd9 	bl	8006430 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800587e:	2301      	movs	r3, #1
 8005880:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005882:	f001 fb97 	bl	8006fb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005886:	f000 fb7f 	bl	8005f88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800588a:	f001 fb5f 	bl	8006f4c <vPortEnterCritical>
 800588e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005890:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005894:	b25b      	sxtb	r3, r3
 8005896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800589a:	d103      	bne.n	80058a4 <xQueueGenericSend+0x17c>
 800589c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058aa:	b25b      	sxtb	r3, r3
 80058ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058b0:	d103      	bne.n	80058ba <xQueueGenericSend+0x192>
 80058b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058ba:	f001 fb7b 	bl	8006fb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80058be:	1d3a      	adds	r2, r7, #4
 80058c0:	f107 0314 	add.w	r3, r7, #20
 80058c4:	4611      	mov	r1, r2
 80058c6:	4618      	mov	r0, r3
 80058c8:	f000 fdc8 	bl	800645c <xTaskCheckForTimeOut>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d124      	bne.n	800591c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80058d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058d4:	f000 f8ea 	bl	8005aac <prvIsQueueFull>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d018      	beq.n	8005910 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80058de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e0:	3310      	adds	r3, #16
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	4611      	mov	r1, r2
 80058e6:	4618      	mov	r0, r3
 80058e8:	f000 fd18 	bl	800631c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80058ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058ee:	f000 f88b 	bl	8005a08 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80058f2:	f000 fb57 	bl	8005fa4 <xTaskResumeAll>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	f47f af7c 	bne.w	80057f6 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80058fe:	4b0c      	ldr	r3, [pc, #48]	; (8005930 <xQueueGenericSend+0x208>)
 8005900:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005904:	601a      	str	r2, [r3, #0]
 8005906:	f3bf 8f4f 	dsb	sy
 800590a:	f3bf 8f6f 	isb	sy
 800590e:	e772      	b.n	80057f6 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005910:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005912:	f000 f879 	bl	8005a08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005916:	f000 fb45 	bl	8005fa4 <xTaskResumeAll>
 800591a:	e76c      	b.n	80057f6 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800591c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800591e:	f000 f873 	bl	8005a08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005922:	f000 fb3f 	bl	8005fa4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005926:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005928:	4618      	mov	r0, r3
 800592a:	3738      	adds	r7, #56	; 0x38
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}
 8005930:	e000ed04 	.word	0xe000ed04

08005934 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b086      	sub	sp, #24
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005940:	2300      	movs	r3, #0
 8005942:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005948:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594e:	2b00      	cmp	r3, #0
 8005950:	d10d      	bne.n	800596e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d14d      	bne.n	80059f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	4618      	mov	r0, r3
 8005960:	f000 fee8 	bl	8006734 <xTaskPriorityDisinherit>
 8005964:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2200      	movs	r2, #0
 800596a:	609a      	str	r2, [r3, #8]
 800596c:	e043      	b.n	80059f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d119      	bne.n	80059a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6858      	ldr	r0, [r3, #4]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597c:	461a      	mov	r2, r3
 800597e:	68b9      	ldr	r1, [r7, #8]
 8005980:	f001 fe1a 	bl	80075b8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	685a      	ldr	r2, [r3, #4]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598c:	441a      	add	r2, r3
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	685a      	ldr	r2, [r3, #4]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	429a      	cmp	r2, r3
 800599c:	d32b      	bcc.n	80059f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	605a      	str	r2, [r3, #4]
 80059a6:	e026      	b.n	80059f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	68d8      	ldr	r0, [r3, #12]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b0:	461a      	mov	r2, r3
 80059b2:	68b9      	ldr	r1, [r7, #8]
 80059b4:	f001 fe00 	bl	80075b8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	68da      	ldr	r2, [r3, #12]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c0:	425b      	negs	r3, r3
 80059c2:	441a      	add	r2, r3
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	68da      	ldr	r2, [r3, #12]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d207      	bcs.n	80059e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	689a      	ldr	r2, [r3, #8]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059dc:	425b      	negs	r3, r3
 80059de:	441a      	add	r2, r3
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d105      	bne.n	80059f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d002      	beq.n	80059f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	3b01      	subs	r3, #1
 80059f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	1c5a      	adds	r2, r3, #1
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80059fe:	697b      	ldr	r3, [r7, #20]
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3718      	adds	r7, #24
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005a10:	f001 fa9c 	bl	8006f4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a1a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a1c:	e011      	b.n	8005a42 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d012      	beq.n	8005a4c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	3324      	adds	r3, #36	; 0x24
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f000 fc9c 	bl	8006368 <xTaskRemoveFromEventList>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d001      	beq.n	8005a3a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005a36:	f000 fd77 	bl	8006528 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005a3a:	7bfb      	ldrb	r3, [r7, #15]
 8005a3c:	3b01      	subs	r3, #1
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	dce9      	bgt.n	8005a1e <prvUnlockQueue+0x16>
 8005a4a:	e000      	b.n	8005a4e <prvUnlockQueue+0x46>
					break;
 8005a4c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	22ff      	movs	r2, #255	; 0xff
 8005a52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005a56:	f001 faad 	bl	8006fb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005a5a:	f001 fa77 	bl	8006f4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a64:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a66:	e011      	b.n	8005a8c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d012      	beq.n	8005a96 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	3310      	adds	r3, #16
 8005a74:	4618      	mov	r0, r3
 8005a76:	f000 fc77 	bl	8006368 <xTaskRemoveFromEventList>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d001      	beq.n	8005a84 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005a80:	f000 fd52 	bl	8006528 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005a84:	7bbb      	ldrb	r3, [r7, #14]
 8005a86:	3b01      	subs	r3, #1
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	dce9      	bgt.n	8005a68 <prvUnlockQueue+0x60>
 8005a94:	e000      	b.n	8005a98 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005a96:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	22ff      	movs	r2, #255	; 0xff
 8005a9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005aa0:	f001 fa88 	bl	8006fb4 <vPortExitCritical>
}
 8005aa4:	bf00      	nop
 8005aa6:	3710      	adds	r7, #16
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005ab4:	f001 fa4a 	bl	8006f4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d102      	bne.n	8005aca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	60fb      	str	r3, [r7, #12]
 8005ac8:	e001      	b.n	8005ace <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005aca:	2300      	movs	r3, #0
 8005acc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005ace:	f001 fa71 	bl	8006fb4 <vPortExitCritical>

	return xReturn;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3710      	adds	r7, #16
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b08e      	sub	sp, #56	; 0x38
 8005ae0:	af04      	add	r7, sp, #16
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]
 8005ae8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d10c      	bne.n	8005b0a <xTaskCreateStatic+0x2e>
	__asm volatile
 8005af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af4:	b672      	cpsid	i
 8005af6:	f383 8811 	msr	BASEPRI, r3
 8005afa:	f3bf 8f6f 	isb	sy
 8005afe:	f3bf 8f4f 	dsb	sy
 8005b02:	b662      	cpsie	i
 8005b04:	623b      	str	r3, [r7, #32]
}
 8005b06:	bf00      	nop
 8005b08:	e7fe      	b.n	8005b08 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8005b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d10c      	bne.n	8005b2a <xTaskCreateStatic+0x4e>
	__asm volatile
 8005b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b14:	b672      	cpsid	i
 8005b16:	f383 8811 	msr	BASEPRI, r3
 8005b1a:	f3bf 8f6f 	isb	sy
 8005b1e:	f3bf 8f4f 	dsb	sy
 8005b22:	b662      	cpsie	i
 8005b24:	61fb      	str	r3, [r7, #28]
}
 8005b26:	bf00      	nop
 8005b28:	e7fe      	b.n	8005b28 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005b2a:	23b4      	movs	r3, #180	; 0xb4
 8005b2c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	2bb4      	cmp	r3, #180	; 0xb4
 8005b32:	d00c      	beq.n	8005b4e <xTaskCreateStatic+0x72>
	__asm volatile
 8005b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b38:	b672      	cpsid	i
 8005b3a:	f383 8811 	msr	BASEPRI, r3
 8005b3e:	f3bf 8f6f 	isb	sy
 8005b42:	f3bf 8f4f 	dsb	sy
 8005b46:	b662      	cpsie	i
 8005b48:	61bb      	str	r3, [r7, #24]
}
 8005b4a:	bf00      	nop
 8005b4c:	e7fe      	b.n	8005b4c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005b4e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d01e      	beq.n	8005b94 <xTaskCreateStatic+0xb8>
 8005b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d01b      	beq.n	8005b94 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b5e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b64:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b68:	2202      	movs	r2, #2
 8005b6a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005b6e:	2300      	movs	r3, #0
 8005b70:	9303      	str	r3, [sp, #12]
 8005b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b74:	9302      	str	r3, [sp, #8]
 8005b76:	f107 0314 	add.w	r3, r7, #20
 8005b7a:	9301      	str	r3, [sp, #4]
 8005b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b7e:	9300      	str	r3, [sp, #0]
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	68b9      	ldr	r1, [r7, #8]
 8005b86:	68f8      	ldr	r0, [r7, #12]
 8005b88:	f000 f850 	bl	8005c2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b8e:	f000 f8ed 	bl	8005d6c <prvAddNewTaskToReadyList>
 8005b92:	e001      	b.n	8005b98 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8005b94:	2300      	movs	r3, #0
 8005b96:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005b98:	697b      	ldr	r3, [r7, #20]
	}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3728      	adds	r7, #40	; 0x28
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b08c      	sub	sp, #48	; 0x30
 8005ba6:	af04      	add	r7, sp, #16
 8005ba8:	60f8      	str	r0, [r7, #12]
 8005baa:	60b9      	str	r1, [r7, #8]
 8005bac:	603b      	str	r3, [r7, #0]
 8005bae:	4613      	mov	r3, r2
 8005bb0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005bb2:	88fb      	ldrh	r3, [r7, #6]
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f001 faf4 	bl	80071a4 <pvPortMalloc>
 8005bbc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d00e      	beq.n	8005be2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005bc4:	20b4      	movs	r0, #180	; 0xb4
 8005bc6:	f001 faed 	bl	80071a4 <pvPortMalloc>
 8005bca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d003      	beq.n	8005bda <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	697a      	ldr	r2, [r7, #20]
 8005bd6:	631a      	str	r2, [r3, #48]	; 0x30
 8005bd8:	e005      	b.n	8005be6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005bda:	6978      	ldr	r0, [r7, #20]
 8005bdc:	f001 fbac 	bl	8007338 <vPortFree>
 8005be0:	e001      	b.n	8005be6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005be2:	2300      	movs	r3, #0
 8005be4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d017      	beq.n	8005c1c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005bf4:	88fa      	ldrh	r2, [r7, #6]
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	9303      	str	r3, [sp, #12]
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	9302      	str	r3, [sp, #8]
 8005bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c00:	9301      	str	r3, [sp, #4]
 8005c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c04:	9300      	str	r3, [sp, #0]
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	68b9      	ldr	r1, [r7, #8]
 8005c0a:	68f8      	ldr	r0, [r7, #12]
 8005c0c:	f000 f80e 	bl	8005c2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c10:	69f8      	ldr	r0, [r7, #28]
 8005c12:	f000 f8ab 	bl	8005d6c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005c16:	2301      	movs	r3, #1
 8005c18:	61bb      	str	r3, [r7, #24]
 8005c1a:	e002      	b.n	8005c22 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8005c20:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005c22:	69bb      	ldr	r3, [r7, #24]
	}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3720      	adds	r7, #32
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b088      	sub	sp, #32
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	607a      	str	r2, [r7, #4]
 8005c38:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c3e:	6879      	ldr	r1, [r7, #4]
 8005c40:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005c44:	440b      	add	r3, r1
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	4413      	add	r3, r2
 8005c4a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	f023 0307 	bic.w	r3, r3, #7
 8005c52:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	f003 0307 	and.w	r3, r3, #7
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00c      	beq.n	8005c78 <prvInitialiseNewTask+0x4c>
	__asm volatile
 8005c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c62:	b672      	cpsid	i
 8005c64:	f383 8811 	msr	BASEPRI, r3
 8005c68:	f3bf 8f6f 	isb	sy
 8005c6c:	f3bf 8f4f 	dsb	sy
 8005c70:	b662      	cpsie	i
 8005c72:	617b      	str	r3, [r7, #20]
}
 8005c74:	bf00      	nop
 8005c76:	e7fe      	b.n	8005c76 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d01f      	beq.n	8005cbe <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c7e:	2300      	movs	r3, #0
 8005c80:	61fb      	str	r3, [r7, #28]
 8005c82:	e012      	b.n	8005caa <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005c84:	68ba      	ldr	r2, [r7, #8]
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	4413      	add	r3, r2
 8005c8a:	7819      	ldrb	r1, [r3, #0]
 8005c8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	4413      	add	r3, r2
 8005c92:	3334      	adds	r3, #52	; 0x34
 8005c94:	460a      	mov	r2, r1
 8005c96:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005c98:	68ba      	ldr	r2, [r7, #8]
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d006      	beq.n	8005cb2 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	61fb      	str	r3, [r7, #28]
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	2b0f      	cmp	r3, #15
 8005cae:	d9e9      	bls.n	8005c84 <prvInitialiseNewTask+0x58>
 8005cb0:	e000      	b.n	8005cb4 <prvInitialiseNewTask+0x88>
			{
				break;
 8005cb2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005cbc:	e003      	b.n	8005cc6 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc8:	2b06      	cmp	r3, #6
 8005cca:	d901      	bls.n	8005cd0 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005ccc:	2306      	movs	r3, #6
 8005cce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cd4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cda:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cde:	2200      	movs	r2, #0
 8005ce0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce4:	3304      	adds	r3, #4
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f7ff fac9 	bl	800527e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cee:	3318      	adds	r3, #24
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f7ff fac4 	bl	800527e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cfa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cfe:	f1c3 0207 	rsb	r2, r3, #7
 8005d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d04:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d0a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d16:	2200      	movs	r2, #0
 8005d18:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d1e:	334c      	adds	r3, #76	; 0x4c
 8005d20:	2260      	movs	r2, #96	; 0x60
 8005d22:	2100      	movs	r1, #0
 8005d24:	4618      	mov	r0, r3
 8005d26:	f001 fc55 	bl	80075d4 <memset>
 8005d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2c:	4a0c      	ldr	r2, [pc, #48]	; (8005d60 <prvInitialiseNewTask+0x134>)
 8005d2e:	651a      	str	r2, [r3, #80]	; 0x50
 8005d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d32:	4a0c      	ldr	r2, [pc, #48]	; (8005d64 <prvInitialiseNewTask+0x138>)
 8005d34:	655a      	str	r2, [r3, #84]	; 0x54
 8005d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d38:	4a0b      	ldr	r2, [pc, #44]	; (8005d68 <prvInitialiseNewTask+0x13c>)
 8005d3a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005d3c:	683a      	ldr	r2, [r7, #0]
 8005d3e:	68f9      	ldr	r1, [r7, #12]
 8005d40:	69b8      	ldr	r0, [r7, #24]
 8005d42:	f000 fff7 	bl	8006d34 <pxPortInitialiseStack>
 8005d46:	4602      	mov	r2, r0
 8005d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d4a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d002      	beq.n	8005d58 <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d56:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d58:	bf00      	nop
 8005d5a:	3720      	adds	r7, #32
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}
 8005d60:	080078c8 	.word	0x080078c8
 8005d64:	080078e8 	.word	0x080078e8
 8005d68:	080078a8 	.word	0x080078a8

08005d6c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b082      	sub	sp, #8
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005d74:	f001 f8ea 	bl	8006f4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005d78:	4b2a      	ldr	r3, [pc, #168]	; (8005e24 <prvAddNewTaskToReadyList+0xb8>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	4a29      	ldr	r2, [pc, #164]	; (8005e24 <prvAddNewTaskToReadyList+0xb8>)
 8005d80:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005d82:	4b29      	ldr	r3, [pc, #164]	; (8005e28 <prvAddNewTaskToReadyList+0xbc>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d109      	bne.n	8005d9e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005d8a:	4a27      	ldr	r2, [pc, #156]	; (8005e28 <prvAddNewTaskToReadyList+0xbc>)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005d90:	4b24      	ldr	r3, [pc, #144]	; (8005e24 <prvAddNewTaskToReadyList+0xb8>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d110      	bne.n	8005dba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005d98:	f000 fbea 	bl	8006570 <prvInitialiseTaskLists>
 8005d9c:	e00d      	b.n	8005dba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005d9e:	4b23      	ldr	r3, [pc, #140]	; (8005e2c <prvAddNewTaskToReadyList+0xc0>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d109      	bne.n	8005dba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005da6:	4b20      	ldr	r3, [pc, #128]	; (8005e28 <prvAddNewTaskToReadyList+0xbc>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d802      	bhi.n	8005dba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005db4:	4a1c      	ldr	r2, [pc, #112]	; (8005e28 <prvAddNewTaskToReadyList+0xbc>)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005dba:	4b1d      	ldr	r3, [pc, #116]	; (8005e30 <prvAddNewTaskToReadyList+0xc4>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	4a1b      	ldr	r2, [pc, #108]	; (8005e30 <prvAddNewTaskToReadyList+0xc4>)
 8005dc2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc8:	2201      	movs	r2, #1
 8005dca:	409a      	lsls	r2, r3
 8005dcc:	4b19      	ldr	r3, [pc, #100]	; (8005e34 <prvAddNewTaskToReadyList+0xc8>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	4a18      	ldr	r2, [pc, #96]	; (8005e34 <prvAddNewTaskToReadyList+0xc8>)
 8005dd4:	6013      	str	r3, [r2, #0]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dda:	4613      	mov	r3, r2
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	4413      	add	r3, r2
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	4a15      	ldr	r2, [pc, #84]	; (8005e38 <prvAddNewTaskToReadyList+0xcc>)
 8005de4:	441a      	add	r2, r3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	3304      	adds	r3, #4
 8005dea:	4619      	mov	r1, r3
 8005dec:	4610      	mov	r0, r2
 8005dee:	f7ff fa53 	bl	8005298 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005df2:	f001 f8df 	bl	8006fb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005df6:	4b0d      	ldr	r3, [pc, #52]	; (8005e2c <prvAddNewTaskToReadyList+0xc0>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00e      	beq.n	8005e1c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005dfe:	4b0a      	ldr	r3, [pc, #40]	; (8005e28 <prvAddNewTaskToReadyList+0xbc>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d207      	bcs.n	8005e1c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005e0c:	4b0b      	ldr	r3, [pc, #44]	; (8005e3c <prvAddNewTaskToReadyList+0xd0>)
 8005e0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e12:	601a      	str	r2, [r3, #0]
 8005e14:	f3bf 8f4f 	dsb	sy
 8005e18:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e1c:	bf00      	nop
 8005e1e:	3708      	adds	r7, #8
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	20000a9c 	.word	0x20000a9c
 8005e28:	2000099c 	.word	0x2000099c
 8005e2c:	20000aa8 	.word	0x20000aa8
 8005e30:	20000ab8 	.word	0x20000ab8
 8005e34:	20000aa4 	.word	0x20000aa4
 8005e38:	200009a0 	.word	0x200009a0
 8005e3c:	e000ed04 	.word	0xe000ed04

08005e40 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d019      	beq.n	8005e86 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005e52:	4b14      	ldr	r3, [pc, #80]	; (8005ea4 <vTaskDelay+0x64>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00c      	beq.n	8005e74 <vTaskDelay+0x34>
	__asm volatile
 8005e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e5e:	b672      	cpsid	i
 8005e60:	f383 8811 	msr	BASEPRI, r3
 8005e64:	f3bf 8f6f 	isb	sy
 8005e68:	f3bf 8f4f 	dsb	sy
 8005e6c:	b662      	cpsie	i
 8005e6e:	60bb      	str	r3, [r7, #8]
}
 8005e70:	bf00      	nop
 8005e72:	e7fe      	b.n	8005e72 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8005e74:	f000 f888 	bl	8005f88 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005e78:	2100      	movs	r1, #0
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 fef4 	bl	8006c68 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005e80:	f000 f890 	bl	8005fa4 <xTaskResumeAll>
 8005e84:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d107      	bne.n	8005e9c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8005e8c:	4b06      	ldr	r3, [pc, #24]	; (8005ea8 <vTaskDelay+0x68>)
 8005e8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e92:	601a      	str	r2, [r3, #0]
 8005e94:	f3bf 8f4f 	dsb	sy
 8005e98:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e9c:	bf00      	nop
 8005e9e:	3710      	adds	r7, #16
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	20000ac4 	.word	0x20000ac4
 8005ea8:	e000ed04 	.word	0xe000ed04

08005eac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b08a      	sub	sp, #40	; 0x28
 8005eb0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005eba:	463a      	mov	r2, r7
 8005ebc:	1d39      	adds	r1, r7, #4
 8005ebe:	f107 0308 	add.w	r3, r7, #8
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f7fa fb2e 	bl	8000524 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005ec8:	6839      	ldr	r1, [r7, #0]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	68ba      	ldr	r2, [r7, #8]
 8005ece:	9202      	str	r2, [sp, #8]
 8005ed0:	9301      	str	r3, [sp, #4]
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	9300      	str	r3, [sp, #0]
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	460a      	mov	r2, r1
 8005eda:	4923      	ldr	r1, [pc, #140]	; (8005f68 <vTaskStartScheduler+0xbc>)
 8005edc:	4823      	ldr	r0, [pc, #140]	; (8005f6c <vTaskStartScheduler+0xc0>)
 8005ede:	f7ff fdfd 	bl	8005adc <xTaskCreateStatic>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	4a22      	ldr	r2, [pc, #136]	; (8005f70 <vTaskStartScheduler+0xc4>)
 8005ee6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005ee8:	4b21      	ldr	r3, [pc, #132]	; (8005f70 <vTaskStartScheduler+0xc4>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d002      	beq.n	8005ef6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	617b      	str	r3, [r7, #20]
 8005ef4:	e001      	b.n	8005efa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d11d      	bne.n	8005f3c <vTaskStartScheduler+0x90>
	__asm volatile
 8005f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f04:	b672      	cpsid	i
 8005f06:	f383 8811 	msr	BASEPRI, r3
 8005f0a:	f3bf 8f6f 	isb	sy
 8005f0e:	f3bf 8f4f 	dsb	sy
 8005f12:	b662      	cpsie	i
 8005f14:	613b      	str	r3, [r7, #16]
}
 8005f16:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005f18:	4b16      	ldr	r3, [pc, #88]	; (8005f74 <vTaskStartScheduler+0xc8>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	334c      	adds	r3, #76	; 0x4c
 8005f1e:	4a16      	ldr	r2, [pc, #88]	; (8005f78 <vTaskStartScheduler+0xcc>)
 8005f20:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005f22:	4b16      	ldr	r3, [pc, #88]	; (8005f7c <vTaskStartScheduler+0xd0>)
 8005f24:	f04f 32ff 	mov.w	r2, #4294967295
 8005f28:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005f2a:	4b15      	ldr	r3, [pc, #84]	; (8005f80 <vTaskStartScheduler+0xd4>)
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005f30:	4b14      	ldr	r3, [pc, #80]	; (8005f84 <vTaskStartScheduler+0xd8>)
 8005f32:	2200      	movs	r2, #0
 8005f34:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005f36:	f000 ff8b 	bl	8006e50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005f3a:	e010      	b.n	8005f5e <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f42:	d10c      	bne.n	8005f5e <vTaskStartScheduler+0xb2>
	__asm volatile
 8005f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f48:	b672      	cpsid	i
 8005f4a:	f383 8811 	msr	BASEPRI, r3
 8005f4e:	f3bf 8f6f 	isb	sy
 8005f52:	f3bf 8f4f 	dsb	sy
 8005f56:	b662      	cpsie	i
 8005f58:	60fb      	str	r3, [r7, #12]
}
 8005f5a:	bf00      	nop
 8005f5c:	e7fe      	b.n	8005f5c <vTaskStartScheduler+0xb0>
}
 8005f5e:	bf00      	nop
 8005f60:	3718      	adds	r7, #24
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	08007888 	.word	0x08007888
 8005f6c:	08006541 	.word	0x08006541
 8005f70:	20000ac0 	.word	0x20000ac0
 8005f74:	2000099c 	.word	0x2000099c
 8005f78:	20000010 	.word	0x20000010
 8005f7c:	20000abc 	.word	0x20000abc
 8005f80:	20000aa8 	.word	0x20000aa8
 8005f84:	20000aa0 	.word	0x20000aa0

08005f88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005f88:	b480      	push	{r7}
 8005f8a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005f8c:	4b04      	ldr	r3, [pc, #16]	; (8005fa0 <vTaskSuspendAll+0x18>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	3301      	adds	r3, #1
 8005f92:	4a03      	ldr	r2, [pc, #12]	; (8005fa0 <vTaskSuspendAll+0x18>)
 8005f94:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005f96:	bf00      	nop
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr
 8005fa0:	20000ac4 	.word	0x20000ac4

08005fa4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005faa:	2300      	movs	r3, #0
 8005fac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005fb2:	4b42      	ldr	r3, [pc, #264]	; (80060bc <xTaskResumeAll+0x118>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d10c      	bne.n	8005fd4 <xTaskResumeAll+0x30>
	__asm volatile
 8005fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fbe:	b672      	cpsid	i
 8005fc0:	f383 8811 	msr	BASEPRI, r3
 8005fc4:	f3bf 8f6f 	isb	sy
 8005fc8:	f3bf 8f4f 	dsb	sy
 8005fcc:	b662      	cpsie	i
 8005fce:	603b      	str	r3, [r7, #0]
}
 8005fd0:	bf00      	nop
 8005fd2:	e7fe      	b.n	8005fd2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005fd4:	f000 ffba 	bl	8006f4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005fd8:	4b38      	ldr	r3, [pc, #224]	; (80060bc <xTaskResumeAll+0x118>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	3b01      	subs	r3, #1
 8005fde:	4a37      	ldr	r2, [pc, #220]	; (80060bc <xTaskResumeAll+0x118>)
 8005fe0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fe2:	4b36      	ldr	r3, [pc, #216]	; (80060bc <xTaskResumeAll+0x118>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d161      	bne.n	80060ae <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005fea:	4b35      	ldr	r3, [pc, #212]	; (80060c0 <xTaskResumeAll+0x11c>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d05d      	beq.n	80060ae <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ff2:	e02e      	b.n	8006052 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ff4:	4b33      	ldr	r3, [pc, #204]	; (80060c4 <xTaskResumeAll+0x120>)
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	3318      	adds	r3, #24
 8006000:	4618      	mov	r0, r3
 8006002:	f7ff f9a6 	bl	8005352 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	3304      	adds	r3, #4
 800600a:	4618      	mov	r0, r3
 800600c:	f7ff f9a1 	bl	8005352 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006014:	2201      	movs	r2, #1
 8006016:	409a      	lsls	r2, r3
 8006018:	4b2b      	ldr	r3, [pc, #172]	; (80060c8 <xTaskResumeAll+0x124>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4313      	orrs	r3, r2
 800601e:	4a2a      	ldr	r2, [pc, #168]	; (80060c8 <xTaskResumeAll+0x124>)
 8006020:	6013      	str	r3, [r2, #0]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006026:	4613      	mov	r3, r2
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	4413      	add	r3, r2
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	4a27      	ldr	r2, [pc, #156]	; (80060cc <xTaskResumeAll+0x128>)
 8006030:	441a      	add	r2, r3
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	3304      	adds	r3, #4
 8006036:	4619      	mov	r1, r3
 8006038:	4610      	mov	r0, r2
 800603a:	f7ff f92d 	bl	8005298 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006042:	4b23      	ldr	r3, [pc, #140]	; (80060d0 <xTaskResumeAll+0x12c>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006048:	429a      	cmp	r2, r3
 800604a:	d302      	bcc.n	8006052 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800604c:	4b21      	ldr	r3, [pc, #132]	; (80060d4 <xTaskResumeAll+0x130>)
 800604e:	2201      	movs	r2, #1
 8006050:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006052:	4b1c      	ldr	r3, [pc, #112]	; (80060c4 <xTaskResumeAll+0x120>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d1cc      	bne.n	8005ff4 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d001      	beq.n	8006064 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006060:	f000 fb2a 	bl	80066b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006064:	4b1c      	ldr	r3, [pc, #112]	; (80060d8 <xTaskResumeAll+0x134>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d010      	beq.n	8006092 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006070:	f000 f836 	bl	80060e0 <xTaskIncrementTick>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d002      	beq.n	8006080 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800607a:	4b16      	ldr	r3, [pc, #88]	; (80060d4 <xTaskResumeAll+0x130>)
 800607c:	2201      	movs	r2, #1
 800607e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	3b01      	subs	r3, #1
 8006084:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d1f1      	bne.n	8006070 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800608c:	4b12      	ldr	r3, [pc, #72]	; (80060d8 <xTaskResumeAll+0x134>)
 800608e:	2200      	movs	r2, #0
 8006090:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006092:	4b10      	ldr	r3, [pc, #64]	; (80060d4 <xTaskResumeAll+0x130>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d009      	beq.n	80060ae <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800609a:	2301      	movs	r3, #1
 800609c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800609e:	4b0f      	ldr	r3, [pc, #60]	; (80060dc <xTaskResumeAll+0x138>)
 80060a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060a4:	601a      	str	r2, [r3, #0]
 80060a6:	f3bf 8f4f 	dsb	sy
 80060aa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80060ae:	f000 ff81 	bl	8006fb4 <vPortExitCritical>

	return xAlreadyYielded;
 80060b2:	68bb      	ldr	r3, [r7, #8]
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3710      	adds	r7, #16
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	20000ac4 	.word	0x20000ac4
 80060c0:	20000a9c 	.word	0x20000a9c
 80060c4:	20000a5c 	.word	0x20000a5c
 80060c8:	20000aa4 	.word	0x20000aa4
 80060cc:	200009a0 	.word	0x200009a0
 80060d0:	2000099c 	.word	0x2000099c
 80060d4:	20000ab0 	.word	0x20000ab0
 80060d8:	20000aac 	.word	0x20000aac
 80060dc:	e000ed04 	.word	0xe000ed04

080060e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b086      	sub	sp, #24
 80060e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80060e6:	2300      	movs	r3, #0
 80060e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060ea:	4b4f      	ldr	r3, [pc, #316]	; (8006228 <xTaskIncrementTick+0x148>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	f040 808a 	bne.w	8006208 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80060f4:	4b4d      	ldr	r3, [pc, #308]	; (800622c <xTaskIncrementTick+0x14c>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	3301      	adds	r3, #1
 80060fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80060fc:	4a4b      	ldr	r2, [pc, #300]	; (800622c <xTaskIncrementTick+0x14c>)
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d122      	bne.n	800614e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8006108:	4b49      	ldr	r3, [pc, #292]	; (8006230 <xTaskIncrementTick+0x150>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00c      	beq.n	800612c <xTaskIncrementTick+0x4c>
	__asm volatile
 8006112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006116:	b672      	cpsid	i
 8006118:	f383 8811 	msr	BASEPRI, r3
 800611c:	f3bf 8f6f 	isb	sy
 8006120:	f3bf 8f4f 	dsb	sy
 8006124:	b662      	cpsie	i
 8006126:	603b      	str	r3, [r7, #0]
}
 8006128:	bf00      	nop
 800612a:	e7fe      	b.n	800612a <xTaskIncrementTick+0x4a>
 800612c:	4b40      	ldr	r3, [pc, #256]	; (8006230 <xTaskIncrementTick+0x150>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	60fb      	str	r3, [r7, #12]
 8006132:	4b40      	ldr	r3, [pc, #256]	; (8006234 <xTaskIncrementTick+0x154>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a3e      	ldr	r2, [pc, #248]	; (8006230 <xTaskIncrementTick+0x150>)
 8006138:	6013      	str	r3, [r2, #0]
 800613a:	4a3e      	ldr	r2, [pc, #248]	; (8006234 <xTaskIncrementTick+0x154>)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6013      	str	r3, [r2, #0]
 8006140:	4b3d      	ldr	r3, [pc, #244]	; (8006238 <xTaskIncrementTick+0x158>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	3301      	adds	r3, #1
 8006146:	4a3c      	ldr	r2, [pc, #240]	; (8006238 <xTaskIncrementTick+0x158>)
 8006148:	6013      	str	r3, [r2, #0]
 800614a:	f000 fab5 	bl	80066b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800614e:	4b3b      	ldr	r3, [pc, #236]	; (800623c <xTaskIncrementTick+0x15c>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	693a      	ldr	r2, [r7, #16]
 8006154:	429a      	cmp	r2, r3
 8006156:	d348      	bcc.n	80061ea <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006158:	4b35      	ldr	r3, [pc, #212]	; (8006230 <xTaskIncrementTick+0x150>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d104      	bne.n	800616c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006162:	4b36      	ldr	r3, [pc, #216]	; (800623c <xTaskIncrementTick+0x15c>)
 8006164:	f04f 32ff 	mov.w	r2, #4294967295
 8006168:	601a      	str	r2, [r3, #0]
					break;
 800616a:	e03e      	b.n	80061ea <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800616c:	4b30      	ldr	r3, [pc, #192]	; (8006230 <xTaskIncrementTick+0x150>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	429a      	cmp	r2, r3
 8006182:	d203      	bcs.n	800618c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006184:	4a2d      	ldr	r2, [pc, #180]	; (800623c <xTaskIncrementTick+0x15c>)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800618a:	e02e      	b.n	80061ea <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	3304      	adds	r3, #4
 8006190:	4618      	mov	r0, r3
 8006192:	f7ff f8de 	bl	8005352 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800619a:	2b00      	cmp	r3, #0
 800619c:	d004      	beq.n	80061a8 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	3318      	adds	r3, #24
 80061a2:	4618      	mov	r0, r3
 80061a4:	f7ff f8d5 	bl	8005352 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ac:	2201      	movs	r2, #1
 80061ae:	409a      	lsls	r2, r3
 80061b0:	4b23      	ldr	r3, [pc, #140]	; (8006240 <xTaskIncrementTick+0x160>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	4a22      	ldr	r2, [pc, #136]	; (8006240 <xTaskIncrementTick+0x160>)
 80061b8:	6013      	str	r3, [r2, #0]
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061be:	4613      	mov	r3, r2
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	4413      	add	r3, r2
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	4a1f      	ldr	r2, [pc, #124]	; (8006244 <xTaskIncrementTick+0x164>)
 80061c8:	441a      	add	r2, r3
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	3304      	adds	r3, #4
 80061ce:	4619      	mov	r1, r3
 80061d0:	4610      	mov	r0, r2
 80061d2:	f7ff f861 	bl	8005298 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061da:	4b1b      	ldr	r3, [pc, #108]	; (8006248 <xTaskIncrementTick+0x168>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d3b9      	bcc.n	8006158 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80061e4:	2301      	movs	r3, #1
 80061e6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061e8:	e7b6      	b.n	8006158 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80061ea:	4b17      	ldr	r3, [pc, #92]	; (8006248 <xTaskIncrementTick+0x168>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061f0:	4914      	ldr	r1, [pc, #80]	; (8006244 <xTaskIncrementTick+0x164>)
 80061f2:	4613      	mov	r3, r2
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	4413      	add	r3, r2
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	440b      	add	r3, r1
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d907      	bls.n	8006212 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8006202:	2301      	movs	r3, #1
 8006204:	617b      	str	r3, [r7, #20]
 8006206:	e004      	b.n	8006212 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006208:	4b10      	ldr	r3, [pc, #64]	; (800624c <xTaskIncrementTick+0x16c>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	3301      	adds	r3, #1
 800620e:	4a0f      	ldr	r2, [pc, #60]	; (800624c <xTaskIncrementTick+0x16c>)
 8006210:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006212:	4b0f      	ldr	r3, [pc, #60]	; (8006250 <xTaskIncrementTick+0x170>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d001      	beq.n	800621e <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800621a:	2301      	movs	r3, #1
 800621c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800621e:	697b      	ldr	r3, [r7, #20]
}
 8006220:	4618      	mov	r0, r3
 8006222:	3718      	adds	r7, #24
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}
 8006228:	20000ac4 	.word	0x20000ac4
 800622c:	20000aa0 	.word	0x20000aa0
 8006230:	20000a54 	.word	0x20000a54
 8006234:	20000a58 	.word	0x20000a58
 8006238:	20000ab4 	.word	0x20000ab4
 800623c:	20000abc 	.word	0x20000abc
 8006240:	20000aa4 	.word	0x20000aa4
 8006244:	200009a0 	.word	0x200009a0
 8006248:	2000099c 	.word	0x2000099c
 800624c:	20000aac 	.word	0x20000aac
 8006250:	20000ab0 	.word	0x20000ab0

08006254 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006254:	b480      	push	{r7}
 8006256:	b087      	sub	sp, #28
 8006258:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800625a:	4b2a      	ldr	r3, [pc, #168]	; (8006304 <vTaskSwitchContext+0xb0>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d003      	beq.n	800626a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006262:	4b29      	ldr	r3, [pc, #164]	; (8006308 <vTaskSwitchContext+0xb4>)
 8006264:	2201      	movs	r2, #1
 8006266:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006268:	e046      	b.n	80062f8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800626a:	4b27      	ldr	r3, [pc, #156]	; (8006308 <vTaskSwitchContext+0xb4>)
 800626c:	2200      	movs	r2, #0
 800626e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006270:	4b26      	ldr	r3, [pc, #152]	; (800630c <vTaskSwitchContext+0xb8>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	fab3 f383 	clz	r3, r3
 800627c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800627e:	7afb      	ldrb	r3, [r7, #11]
 8006280:	f1c3 031f 	rsb	r3, r3, #31
 8006284:	617b      	str	r3, [r7, #20]
 8006286:	4922      	ldr	r1, [pc, #136]	; (8006310 <vTaskSwitchContext+0xbc>)
 8006288:	697a      	ldr	r2, [r7, #20]
 800628a:	4613      	mov	r3, r2
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	4413      	add	r3, r2
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	440b      	add	r3, r1
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d10c      	bne.n	80062b4 <vTaskSwitchContext+0x60>
	__asm volatile
 800629a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800629e:	b672      	cpsid	i
 80062a0:	f383 8811 	msr	BASEPRI, r3
 80062a4:	f3bf 8f6f 	isb	sy
 80062a8:	f3bf 8f4f 	dsb	sy
 80062ac:	b662      	cpsie	i
 80062ae:	607b      	str	r3, [r7, #4]
}
 80062b0:	bf00      	nop
 80062b2:	e7fe      	b.n	80062b2 <vTaskSwitchContext+0x5e>
 80062b4:	697a      	ldr	r2, [r7, #20]
 80062b6:	4613      	mov	r3, r2
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	4413      	add	r3, r2
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	4a14      	ldr	r2, [pc, #80]	; (8006310 <vTaskSwitchContext+0xbc>)
 80062c0:	4413      	add	r3, r2
 80062c2:	613b      	str	r3, [r7, #16]
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	685a      	ldr	r2, [r3, #4]
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	605a      	str	r2, [r3, #4]
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	685a      	ldr	r2, [r3, #4]
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	3308      	adds	r3, #8
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d104      	bne.n	80062e4 <vTaskSwitchContext+0x90>
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	685a      	ldr	r2, [r3, #4]
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	605a      	str	r2, [r3, #4]
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	68db      	ldr	r3, [r3, #12]
 80062ea:	4a0a      	ldr	r2, [pc, #40]	; (8006314 <vTaskSwitchContext+0xc0>)
 80062ec:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80062ee:	4b09      	ldr	r3, [pc, #36]	; (8006314 <vTaskSwitchContext+0xc0>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	334c      	adds	r3, #76	; 0x4c
 80062f4:	4a08      	ldr	r2, [pc, #32]	; (8006318 <vTaskSwitchContext+0xc4>)
 80062f6:	6013      	str	r3, [r2, #0]
}
 80062f8:	bf00      	nop
 80062fa:	371c      	adds	r7, #28
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr
 8006304:	20000ac4 	.word	0x20000ac4
 8006308:	20000ab0 	.word	0x20000ab0
 800630c:	20000aa4 	.word	0x20000aa4
 8006310:	200009a0 	.word	0x200009a0
 8006314:	2000099c 	.word	0x2000099c
 8006318:	20000010 	.word	0x20000010

0800631c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d10c      	bne.n	8006346 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800632c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006330:	b672      	cpsid	i
 8006332:	f383 8811 	msr	BASEPRI, r3
 8006336:	f3bf 8f6f 	isb	sy
 800633a:	f3bf 8f4f 	dsb	sy
 800633e:	b662      	cpsie	i
 8006340:	60fb      	str	r3, [r7, #12]
}
 8006342:	bf00      	nop
 8006344:	e7fe      	b.n	8006344 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006346:	4b07      	ldr	r3, [pc, #28]	; (8006364 <vTaskPlaceOnEventList+0x48>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	3318      	adds	r3, #24
 800634c:	4619      	mov	r1, r3
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f7fe ffc6 	bl	80052e0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006354:	2101      	movs	r1, #1
 8006356:	6838      	ldr	r0, [r7, #0]
 8006358:	f000 fc86 	bl	8006c68 <prvAddCurrentTaskToDelayedList>
}
 800635c:	bf00      	nop
 800635e:	3710      	adds	r7, #16
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}
 8006364:	2000099c 	.word	0x2000099c

08006368 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b086      	sub	sp, #24
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	68db      	ldr	r3, [r3, #12]
 8006376:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d10c      	bne.n	8006398 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800637e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006382:	b672      	cpsid	i
 8006384:	f383 8811 	msr	BASEPRI, r3
 8006388:	f3bf 8f6f 	isb	sy
 800638c:	f3bf 8f4f 	dsb	sy
 8006390:	b662      	cpsie	i
 8006392:	60fb      	str	r3, [r7, #12]
}
 8006394:	bf00      	nop
 8006396:	e7fe      	b.n	8006396 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	3318      	adds	r3, #24
 800639c:	4618      	mov	r0, r3
 800639e:	f7fe ffd8 	bl	8005352 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063a2:	4b1d      	ldr	r3, [pc, #116]	; (8006418 <xTaskRemoveFromEventList+0xb0>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d11c      	bne.n	80063e4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	3304      	adds	r3, #4
 80063ae:	4618      	mov	r0, r3
 80063b0:	f7fe ffcf 	bl	8005352 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b8:	2201      	movs	r2, #1
 80063ba:	409a      	lsls	r2, r3
 80063bc:	4b17      	ldr	r3, [pc, #92]	; (800641c <xTaskRemoveFromEventList+0xb4>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	4a16      	ldr	r2, [pc, #88]	; (800641c <xTaskRemoveFromEventList+0xb4>)
 80063c4:	6013      	str	r3, [r2, #0]
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ca:	4613      	mov	r3, r2
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	4413      	add	r3, r2
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	4a13      	ldr	r2, [pc, #76]	; (8006420 <xTaskRemoveFromEventList+0xb8>)
 80063d4:	441a      	add	r2, r3
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	3304      	adds	r3, #4
 80063da:	4619      	mov	r1, r3
 80063dc:	4610      	mov	r0, r2
 80063de:	f7fe ff5b 	bl	8005298 <vListInsertEnd>
 80063e2:	e005      	b.n	80063f0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	3318      	adds	r3, #24
 80063e8:	4619      	mov	r1, r3
 80063ea:	480e      	ldr	r0, [pc, #56]	; (8006424 <xTaskRemoveFromEventList+0xbc>)
 80063ec:	f7fe ff54 	bl	8005298 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063f4:	4b0c      	ldr	r3, [pc, #48]	; (8006428 <xTaskRemoveFromEventList+0xc0>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d905      	bls.n	800640a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80063fe:	2301      	movs	r3, #1
 8006400:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006402:	4b0a      	ldr	r3, [pc, #40]	; (800642c <xTaskRemoveFromEventList+0xc4>)
 8006404:	2201      	movs	r2, #1
 8006406:	601a      	str	r2, [r3, #0]
 8006408:	e001      	b.n	800640e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800640a:	2300      	movs	r3, #0
 800640c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800640e:	697b      	ldr	r3, [r7, #20]
}
 8006410:	4618      	mov	r0, r3
 8006412:	3718      	adds	r7, #24
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}
 8006418:	20000ac4 	.word	0x20000ac4
 800641c:	20000aa4 	.word	0x20000aa4
 8006420:	200009a0 	.word	0x200009a0
 8006424:	20000a5c 	.word	0x20000a5c
 8006428:	2000099c 	.word	0x2000099c
 800642c:	20000ab0 	.word	0x20000ab0

08006430 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006438:	4b06      	ldr	r3, [pc, #24]	; (8006454 <vTaskInternalSetTimeOutState+0x24>)
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006440:	4b05      	ldr	r3, [pc, #20]	; (8006458 <vTaskInternalSetTimeOutState+0x28>)
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	605a      	str	r2, [r3, #4]
}
 8006448:	bf00      	nop
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr
 8006454:	20000ab4 	.word	0x20000ab4
 8006458:	20000aa0 	.word	0x20000aa0

0800645c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b088      	sub	sp, #32
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d10c      	bne.n	8006486 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800646c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006470:	b672      	cpsid	i
 8006472:	f383 8811 	msr	BASEPRI, r3
 8006476:	f3bf 8f6f 	isb	sy
 800647a:	f3bf 8f4f 	dsb	sy
 800647e:	b662      	cpsie	i
 8006480:	613b      	str	r3, [r7, #16]
}
 8006482:	bf00      	nop
 8006484:	e7fe      	b.n	8006484 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d10c      	bne.n	80064a6 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800648c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006490:	b672      	cpsid	i
 8006492:	f383 8811 	msr	BASEPRI, r3
 8006496:	f3bf 8f6f 	isb	sy
 800649a:	f3bf 8f4f 	dsb	sy
 800649e:	b662      	cpsie	i
 80064a0:	60fb      	str	r3, [r7, #12]
}
 80064a2:	bf00      	nop
 80064a4:	e7fe      	b.n	80064a4 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80064a6:	f000 fd51 	bl	8006f4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80064aa:	4b1d      	ldr	r3, [pc, #116]	; (8006520 <xTaskCheckForTimeOut+0xc4>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	69ba      	ldr	r2, [r7, #24]
 80064b6:	1ad3      	subs	r3, r2, r3
 80064b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064c2:	d102      	bne.n	80064ca <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80064c4:	2300      	movs	r3, #0
 80064c6:	61fb      	str	r3, [r7, #28]
 80064c8:	e023      	b.n	8006512 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	4b15      	ldr	r3, [pc, #84]	; (8006524 <xTaskCheckForTimeOut+0xc8>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d007      	beq.n	80064e6 <xTaskCheckForTimeOut+0x8a>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	69ba      	ldr	r2, [r7, #24]
 80064dc:	429a      	cmp	r2, r3
 80064de:	d302      	bcc.n	80064e6 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80064e0:	2301      	movs	r3, #1
 80064e2:	61fb      	str	r3, [r7, #28]
 80064e4:	e015      	b.n	8006512 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	697a      	ldr	r2, [r7, #20]
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d20b      	bcs.n	8006508 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	1ad2      	subs	r2, r2, r3
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f7ff ff97 	bl	8006430 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006502:	2300      	movs	r3, #0
 8006504:	61fb      	str	r3, [r7, #28]
 8006506:	e004      	b.n	8006512 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	2200      	movs	r2, #0
 800650c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800650e:	2301      	movs	r3, #1
 8006510:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006512:	f000 fd4f 	bl	8006fb4 <vPortExitCritical>

	return xReturn;
 8006516:	69fb      	ldr	r3, [r7, #28]
}
 8006518:	4618      	mov	r0, r3
 800651a:	3720      	adds	r7, #32
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}
 8006520:	20000aa0 	.word	0x20000aa0
 8006524:	20000ab4 	.word	0x20000ab4

08006528 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006528:	b480      	push	{r7}
 800652a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800652c:	4b03      	ldr	r3, [pc, #12]	; (800653c <vTaskMissedYield+0x14>)
 800652e:	2201      	movs	r2, #1
 8006530:	601a      	str	r2, [r3, #0]
}
 8006532:	bf00      	nop
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr
 800653c:	20000ab0 	.word	0x20000ab0

08006540 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b082      	sub	sp, #8
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006548:	f000 f852 	bl	80065f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800654c:	4b06      	ldr	r3, [pc, #24]	; (8006568 <prvIdleTask+0x28>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	2b01      	cmp	r3, #1
 8006552:	d9f9      	bls.n	8006548 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006554:	4b05      	ldr	r3, [pc, #20]	; (800656c <prvIdleTask+0x2c>)
 8006556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800655a:	601a      	str	r2, [r3, #0]
 800655c:	f3bf 8f4f 	dsb	sy
 8006560:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006564:	e7f0      	b.n	8006548 <prvIdleTask+0x8>
 8006566:	bf00      	nop
 8006568:	200009a0 	.word	0x200009a0
 800656c:	e000ed04 	.word	0xe000ed04

08006570 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b082      	sub	sp, #8
 8006574:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006576:	2300      	movs	r3, #0
 8006578:	607b      	str	r3, [r7, #4]
 800657a:	e00c      	b.n	8006596 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	4613      	mov	r3, r2
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	4413      	add	r3, r2
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	4a12      	ldr	r2, [pc, #72]	; (80065d0 <prvInitialiseTaskLists+0x60>)
 8006588:	4413      	add	r3, r2
 800658a:	4618      	mov	r0, r3
 800658c:	f7fe fe57 	bl	800523e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	3301      	adds	r3, #1
 8006594:	607b      	str	r3, [r7, #4]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2b06      	cmp	r3, #6
 800659a:	d9ef      	bls.n	800657c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800659c:	480d      	ldr	r0, [pc, #52]	; (80065d4 <prvInitialiseTaskLists+0x64>)
 800659e:	f7fe fe4e 	bl	800523e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80065a2:	480d      	ldr	r0, [pc, #52]	; (80065d8 <prvInitialiseTaskLists+0x68>)
 80065a4:	f7fe fe4b 	bl	800523e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80065a8:	480c      	ldr	r0, [pc, #48]	; (80065dc <prvInitialiseTaskLists+0x6c>)
 80065aa:	f7fe fe48 	bl	800523e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80065ae:	480c      	ldr	r0, [pc, #48]	; (80065e0 <prvInitialiseTaskLists+0x70>)
 80065b0:	f7fe fe45 	bl	800523e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80065b4:	480b      	ldr	r0, [pc, #44]	; (80065e4 <prvInitialiseTaskLists+0x74>)
 80065b6:	f7fe fe42 	bl	800523e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80065ba:	4b0b      	ldr	r3, [pc, #44]	; (80065e8 <prvInitialiseTaskLists+0x78>)
 80065bc:	4a05      	ldr	r2, [pc, #20]	; (80065d4 <prvInitialiseTaskLists+0x64>)
 80065be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80065c0:	4b0a      	ldr	r3, [pc, #40]	; (80065ec <prvInitialiseTaskLists+0x7c>)
 80065c2:	4a05      	ldr	r2, [pc, #20]	; (80065d8 <prvInitialiseTaskLists+0x68>)
 80065c4:	601a      	str	r2, [r3, #0]
}
 80065c6:	bf00      	nop
 80065c8:	3708      	adds	r7, #8
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	200009a0 	.word	0x200009a0
 80065d4:	20000a2c 	.word	0x20000a2c
 80065d8:	20000a40 	.word	0x20000a40
 80065dc:	20000a5c 	.word	0x20000a5c
 80065e0:	20000a70 	.word	0x20000a70
 80065e4:	20000a88 	.word	0x20000a88
 80065e8:	20000a54 	.word	0x20000a54
 80065ec:	20000a58 	.word	0x20000a58

080065f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b082      	sub	sp, #8
 80065f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80065f6:	e019      	b.n	800662c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80065f8:	f000 fca8 	bl	8006f4c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065fc:	4b10      	ldr	r3, [pc, #64]	; (8006640 <prvCheckTasksWaitingTermination+0x50>)
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	3304      	adds	r3, #4
 8006608:	4618      	mov	r0, r3
 800660a:	f7fe fea2 	bl	8005352 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800660e:	4b0d      	ldr	r3, [pc, #52]	; (8006644 <prvCheckTasksWaitingTermination+0x54>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	3b01      	subs	r3, #1
 8006614:	4a0b      	ldr	r2, [pc, #44]	; (8006644 <prvCheckTasksWaitingTermination+0x54>)
 8006616:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006618:	4b0b      	ldr	r3, [pc, #44]	; (8006648 <prvCheckTasksWaitingTermination+0x58>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	3b01      	subs	r3, #1
 800661e:	4a0a      	ldr	r2, [pc, #40]	; (8006648 <prvCheckTasksWaitingTermination+0x58>)
 8006620:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006622:	f000 fcc7 	bl	8006fb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 f810 	bl	800664c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800662c:	4b06      	ldr	r3, [pc, #24]	; (8006648 <prvCheckTasksWaitingTermination+0x58>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d1e1      	bne.n	80065f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006634:	bf00      	nop
 8006636:	bf00      	nop
 8006638:	3708      	adds	r7, #8
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	20000a70 	.word	0x20000a70
 8006644:	20000a9c 	.word	0x20000a9c
 8006648:	20000a84 	.word	0x20000a84

0800664c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800664c:	b580      	push	{r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	334c      	adds	r3, #76	; 0x4c
 8006658:	4618      	mov	r0, r3
 800665a:	f000 ffd1 	bl	8007600 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006664:	2b00      	cmp	r3, #0
 8006666:	d108      	bne.n	800667a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800666c:	4618      	mov	r0, r3
 800666e:	f000 fe63 	bl	8007338 <vPortFree>
				vPortFree( pxTCB );
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 fe60 	bl	8007338 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006678:	e01a      	b.n	80066b0 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006680:	2b01      	cmp	r3, #1
 8006682:	d103      	bne.n	800668c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 fe57 	bl	8007338 <vPortFree>
	}
 800668a:	e011      	b.n	80066b0 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006692:	2b02      	cmp	r3, #2
 8006694:	d00c      	beq.n	80066b0 <prvDeleteTCB+0x64>
	__asm volatile
 8006696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800669a:	b672      	cpsid	i
 800669c:	f383 8811 	msr	BASEPRI, r3
 80066a0:	f3bf 8f6f 	isb	sy
 80066a4:	f3bf 8f4f 	dsb	sy
 80066a8:	b662      	cpsie	i
 80066aa:	60fb      	str	r3, [r7, #12]
}
 80066ac:	bf00      	nop
 80066ae:	e7fe      	b.n	80066ae <prvDeleteTCB+0x62>
	}
 80066b0:	bf00      	nop
 80066b2:	3710      	adds	r7, #16
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066be:	4b0c      	ldr	r3, [pc, #48]	; (80066f0 <prvResetNextTaskUnblockTime+0x38>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d104      	bne.n	80066d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80066c8:	4b0a      	ldr	r3, [pc, #40]	; (80066f4 <prvResetNextTaskUnblockTime+0x3c>)
 80066ca:	f04f 32ff 	mov.w	r2, #4294967295
 80066ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80066d0:	e008      	b.n	80066e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066d2:	4b07      	ldr	r3, [pc, #28]	; (80066f0 <prvResetNextTaskUnblockTime+0x38>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	4a04      	ldr	r2, [pc, #16]	; (80066f4 <prvResetNextTaskUnblockTime+0x3c>)
 80066e2:	6013      	str	r3, [r2, #0]
}
 80066e4:	bf00      	nop
 80066e6:	370c      	adds	r7, #12
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr
 80066f0:	20000a54 	.word	0x20000a54
 80066f4:	20000abc 	.word	0x20000abc

080066f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80066f8:	b480      	push	{r7}
 80066fa:	b083      	sub	sp, #12
 80066fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80066fe:	4b0b      	ldr	r3, [pc, #44]	; (800672c <xTaskGetSchedulerState+0x34>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d102      	bne.n	800670c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006706:	2301      	movs	r3, #1
 8006708:	607b      	str	r3, [r7, #4]
 800670a:	e008      	b.n	800671e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800670c:	4b08      	ldr	r3, [pc, #32]	; (8006730 <xTaskGetSchedulerState+0x38>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d102      	bne.n	800671a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006714:	2302      	movs	r3, #2
 8006716:	607b      	str	r3, [r7, #4]
 8006718:	e001      	b.n	800671e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800671a:	2300      	movs	r3, #0
 800671c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800671e:	687b      	ldr	r3, [r7, #4]
	}
 8006720:	4618      	mov	r0, r3
 8006722:	370c      	adds	r7, #12
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr
 800672c:	20000aa8 	.word	0x20000aa8
 8006730:	20000ac4 	.word	0x20000ac4

08006734 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006734:	b580      	push	{r7, lr}
 8006736:	b086      	sub	sp, #24
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006740:	2300      	movs	r3, #0
 8006742:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d072      	beq.n	8006830 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800674a:	4b3c      	ldr	r3, [pc, #240]	; (800683c <xTaskPriorityDisinherit+0x108>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	693a      	ldr	r2, [r7, #16]
 8006750:	429a      	cmp	r2, r3
 8006752:	d00c      	beq.n	800676e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8006754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006758:	b672      	cpsid	i
 800675a:	f383 8811 	msr	BASEPRI, r3
 800675e:	f3bf 8f6f 	isb	sy
 8006762:	f3bf 8f4f 	dsb	sy
 8006766:	b662      	cpsie	i
 8006768:	60fb      	str	r3, [r7, #12]
}
 800676a:	bf00      	nop
 800676c:	e7fe      	b.n	800676c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006772:	2b00      	cmp	r3, #0
 8006774:	d10c      	bne.n	8006790 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8006776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800677a:	b672      	cpsid	i
 800677c:	f383 8811 	msr	BASEPRI, r3
 8006780:	f3bf 8f6f 	isb	sy
 8006784:	f3bf 8f4f 	dsb	sy
 8006788:	b662      	cpsie	i
 800678a:	60bb      	str	r3, [r7, #8]
}
 800678c:	bf00      	nop
 800678e:	e7fe      	b.n	800678e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006794:	1e5a      	subs	r2, r3, #1
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d044      	beq.n	8006830 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d140      	bne.n	8006830 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	3304      	adds	r3, #4
 80067b2:	4618      	mov	r0, r3
 80067b4:	f7fe fdcd 	bl	8005352 <uxListRemove>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d115      	bne.n	80067ea <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067c2:	491f      	ldr	r1, [pc, #124]	; (8006840 <xTaskPriorityDisinherit+0x10c>)
 80067c4:	4613      	mov	r3, r2
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	4413      	add	r3, r2
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	440b      	add	r3, r1
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d10a      	bne.n	80067ea <xTaskPriorityDisinherit+0xb6>
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d8:	2201      	movs	r2, #1
 80067da:	fa02 f303 	lsl.w	r3, r2, r3
 80067de:	43da      	mvns	r2, r3
 80067e0:	4b18      	ldr	r3, [pc, #96]	; (8006844 <xTaskPriorityDisinherit+0x110>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4013      	ands	r3, r2
 80067e6:	4a17      	ldr	r2, [pc, #92]	; (8006844 <xTaskPriorityDisinherit+0x110>)
 80067e8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f6:	f1c3 0207 	rsb	r2, r3, #7
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006802:	2201      	movs	r2, #1
 8006804:	409a      	lsls	r2, r3
 8006806:	4b0f      	ldr	r3, [pc, #60]	; (8006844 <xTaskPriorityDisinherit+0x110>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4313      	orrs	r3, r2
 800680c:	4a0d      	ldr	r2, [pc, #52]	; (8006844 <xTaskPriorityDisinherit+0x110>)
 800680e:	6013      	str	r3, [r2, #0]
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006814:	4613      	mov	r3, r2
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	4413      	add	r3, r2
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	4a08      	ldr	r2, [pc, #32]	; (8006840 <xTaskPriorityDisinherit+0x10c>)
 800681e:	441a      	add	r2, r3
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	3304      	adds	r3, #4
 8006824:	4619      	mov	r1, r3
 8006826:	4610      	mov	r0, r2
 8006828:	f7fe fd36 	bl	8005298 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800682c:	2301      	movs	r3, #1
 800682e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006830:	697b      	ldr	r3, [r7, #20]
	}
 8006832:	4618      	mov	r0, r3
 8006834:	3718      	adds	r7, #24
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
 800683a:	bf00      	nop
 800683c:	2000099c 	.word	0x2000099c
 8006840:	200009a0 	.word	0x200009a0
 8006844:	20000aa4 	.word	0x20000aa4

08006848 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8006848:	b580      	push	{r7, lr}
 800684a:	b086      	sub	sp, #24
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	607a      	str	r2, [r7, #4]
 8006854:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8006856:	f000 fb79 	bl	8006f4c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800685a:	4b29      	ldr	r3, [pc, #164]	; (8006900 <xTaskNotifyWait+0xb8>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8006862:	b2db      	uxtb	r3, r3
 8006864:	2b02      	cmp	r3, #2
 8006866:	d01c      	beq.n	80068a2 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8006868:	4b25      	ldr	r3, [pc, #148]	; (8006900 <xTaskNotifyWait+0xb8>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 8006870:	68fa      	ldr	r2, [r7, #12]
 8006872:	43d2      	mvns	r2, r2
 8006874:	400a      	ands	r2, r1
 8006876:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800687a:	4b21      	ldr	r3, [pc, #132]	; (8006900 <xTaskNotifyWait+0xb8>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2201      	movs	r2, #1
 8006880:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

				if( xTicksToWait > ( TickType_t ) 0 )
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d00b      	beq.n	80068a2 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800688a:	2101      	movs	r1, #1
 800688c:	6838      	ldr	r0, [r7, #0]
 800688e:	f000 f9eb 	bl	8006c68 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8006892:	4b1c      	ldr	r3, [pc, #112]	; (8006904 <xTaskNotifyWait+0xbc>)
 8006894:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006898:	601a      	str	r2, [r3, #0]
 800689a:	f3bf 8f4f 	dsb	sy
 800689e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80068a2:	f000 fb87 	bl	8006fb4 <vPortExitCritical>

		taskENTER_CRITICAL();
 80068a6:	f000 fb51 	bl	8006f4c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d005      	beq.n	80068bc <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80068b0:	4b13      	ldr	r3, [pc, #76]	; (8006900 <xTaskNotifyWait+0xb8>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80068bc:	4b10      	ldr	r3, [pc, #64]	; (8006900 <xTaskNotifyWait+0xb8>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	2b02      	cmp	r3, #2
 80068c8:	d002      	beq.n	80068d0 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80068ca:	2300      	movs	r3, #0
 80068cc:	617b      	str	r3, [r7, #20]
 80068ce:	e00a      	b.n	80068e6 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80068d0:	4b0b      	ldr	r3, [pc, #44]	; (8006900 <xTaskNotifyWait+0xb8>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 80068d8:	68ba      	ldr	r2, [r7, #8]
 80068da:	43d2      	mvns	r2, r2
 80068dc:	400a      	ands	r2, r1
 80068de:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
				xReturn = pdTRUE;
 80068e2:	2301      	movs	r3, #1
 80068e4:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80068e6:	4b06      	ldr	r3, [pc, #24]	; (8006900 <xTaskNotifyWait+0xb8>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		}
		taskEXIT_CRITICAL();
 80068f0:	f000 fb60 	bl	8006fb4 <vPortExitCritical>

		return xReturn;
 80068f4:	697b      	ldr	r3, [r7, #20]
	}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3718      	adds	r7, #24
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	bf00      	nop
 8006900:	2000099c 	.word	0x2000099c
 8006904:	e000ed04 	.word	0xe000ed04

08006908 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8006908:	b580      	push	{r7, lr}
 800690a:	b08a      	sub	sp, #40	; 0x28
 800690c:	af00      	add	r7, sp, #0
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	603b      	str	r3, [r7, #0]
 8006914:	4613      	mov	r3, r2
 8006916:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8006918:	2301      	movs	r3, #1
 800691a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d10c      	bne.n	800693c <xTaskGenericNotify+0x34>
	__asm volatile
 8006922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006926:	b672      	cpsid	i
 8006928:	f383 8811 	msr	BASEPRI, r3
 800692c:	f3bf 8f6f 	isb	sy
 8006930:	f3bf 8f4f 	dsb	sy
 8006934:	b662      	cpsie	i
 8006936:	61bb      	str	r3, [r7, #24]
}
 8006938:	bf00      	nop
 800693a:	e7fe      	b.n	800693a <xTaskGenericNotify+0x32>
		pxTCB = xTaskToNotify;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8006940:	f000 fb04 	bl	8006f4c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d004      	beq.n	8006954 <xTaskGenericNotify+0x4c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800694a:	6a3b      	ldr	r3, [r7, #32]
 800694c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006954:	6a3b      	ldr	r3, [r7, #32]
 8006956:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800695a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800695c:	6a3b      	ldr	r3, [r7, #32]
 800695e:	2202      	movs	r2, #2
 8006960:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

			switch( eAction )
 8006964:	79fb      	ldrb	r3, [r7, #7]
 8006966:	2b04      	cmp	r3, #4
 8006968:	d82d      	bhi.n	80069c6 <xTaskGenericNotify+0xbe>
 800696a:	a201      	add	r2, pc, #4	; (adr r2, 8006970 <xTaskGenericNotify+0x68>)
 800696c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006970:	080069ed 	.word	0x080069ed
 8006974:	08006985 	.word	0x08006985
 8006978:	08006997 	.word	0x08006997
 800697c:	080069a7 	.word	0x080069a7
 8006980:	080069b1 	.word	0x080069b1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8006984:	6a3b      	ldr	r3, [r7, #32]
 8006986:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	431a      	orrs	r2, r3
 800698e:	6a3b      	ldr	r3, [r7, #32]
 8006990:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8006994:	e02d      	b.n	80069f2 <xTaskGenericNotify+0xea>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8006996:	6a3b      	ldr	r3, [r7, #32]
 8006998:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800699c:	1c5a      	adds	r2, r3, #1
 800699e:	6a3b      	ldr	r3, [r7, #32]
 80069a0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 80069a4:	e025      	b.n	80069f2 <xTaskGenericNotify+0xea>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80069a6:	6a3b      	ldr	r3, [r7, #32]
 80069a8:	68ba      	ldr	r2, [r7, #8]
 80069aa:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 80069ae:	e020      	b.n	80069f2 <xTaskGenericNotify+0xea>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80069b0:	7ffb      	ldrb	r3, [r7, #31]
 80069b2:	2b02      	cmp	r3, #2
 80069b4:	d004      	beq.n	80069c0 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80069b6:	6a3b      	ldr	r3, [r7, #32]
 80069b8:	68ba      	ldr	r2, [r7, #8]
 80069ba:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80069be:	e018      	b.n	80069f2 <xTaskGenericNotify+0xea>
						xReturn = pdFAIL;
 80069c0:	2300      	movs	r3, #0
 80069c2:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80069c4:	e015      	b.n	80069f2 <xTaskGenericNotify+0xea>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80069c6:	6a3b      	ldr	r3, [r7, #32]
 80069c8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80069cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069d0:	d00e      	beq.n	80069f0 <xTaskGenericNotify+0xe8>
	__asm volatile
 80069d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d6:	b672      	cpsid	i
 80069d8:	f383 8811 	msr	BASEPRI, r3
 80069dc:	f3bf 8f6f 	isb	sy
 80069e0:	f3bf 8f4f 	dsb	sy
 80069e4:	b662      	cpsie	i
 80069e6:	617b      	str	r3, [r7, #20]
}
 80069e8:	bf00      	nop
 80069ea:	e7fe      	b.n	80069ea <xTaskGenericNotify+0xe2>
					break;
 80069ec:	bf00      	nop
 80069ee:	e000      	b.n	80069f2 <xTaskGenericNotify+0xea>

					break;
 80069f0:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80069f2:	7ffb      	ldrb	r3, [r7, #31]
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d13b      	bne.n	8006a70 <xTaskGenericNotify+0x168>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069f8:	6a3b      	ldr	r3, [r7, #32]
 80069fa:	3304      	adds	r3, #4
 80069fc:	4618      	mov	r0, r3
 80069fe:	f7fe fca8 	bl	8005352 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8006a02:	6a3b      	ldr	r3, [r7, #32]
 8006a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a06:	2201      	movs	r2, #1
 8006a08:	409a      	lsls	r2, r3
 8006a0a:	4b1d      	ldr	r3, [pc, #116]	; (8006a80 <xTaskGenericNotify+0x178>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	4a1b      	ldr	r2, [pc, #108]	; (8006a80 <xTaskGenericNotify+0x178>)
 8006a12:	6013      	str	r3, [r2, #0]
 8006a14:	6a3b      	ldr	r3, [r7, #32]
 8006a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a18:	4613      	mov	r3, r2
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	4413      	add	r3, r2
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	4a18      	ldr	r2, [pc, #96]	; (8006a84 <xTaskGenericNotify+0x17c>)
 8006a22:	441a      	add	r2, r3
 8006a24:	6a3b      	ldr	r3, [r7, #32]
 8006a26:	3304      	adds	r3, #4
 8006a28:	4619      	mov	r1, r3
 8006a2a:	4610      	mov	r0, r2
 8006a2c:	f7fe fc34 	bl	8005298 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006a30:	6a3b      	ldr	r3, [r7, #32]
 8006a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d00c      	beq.n	8006a52 <xTaskGenericNotify+0x14a>
	__asm volatile
 8006a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a3c:	b672      	cpsid	i
 8006a3e:	f383 8811 	msr	BASEPRI, r3
 8006a42:	f3bf 8f6f 	isb	sy
 8006a46:	f3bf 8f4f 	dsb	sy
 8006a4a:	b662      	cpsie	i
 8006a4c:	613b      	str	r3, [r7, #16]
}
 8006a4e:	bf00      	nop
 8006a50:	e7fe      	b.n	8006a50 <xTaskGenericNotify+0x148>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006a52:	6a3b      	ldr	r3, [r7, #32]
 8006a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a56:	4b0c      	ldr	r3, [pc, #48]	; (8006a88 <xTaskGenericNotify+0x180>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d907      	bls.n	8006a70 <xTaskGenericNotify+0x168>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8006a60:	4b0a      	ldr	r3, [pc, #40]	; (8006a8c <xTaskGenericNotify+0x184>)
 8006a62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a66:	601a      	str	r2, [r3, #0]
 8006a68:	f3bf 8f4f 	dsb	sy
 8006a6c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006a70:	f000 faa0 	bl	8006fb4 <vPortExitCritical>

		return xReturn;
 8006a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3728      	adds	r7, #40	; 0x28
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	20000aa4 	.word	0x20000aa4
 8006a84:	200009a0 	.word	0x200009a0
 8006a88:	2000099c 	.word	0x2000099c
 8006a8c:	e000ed04 	.word	0xe000ed04

08006a90 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b08e      	sub	sp, #56	; 0x38
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	603b      	str	r3, [r7, #0]
 8006a9c:	4613      	mov	r3, r2
 8006a9e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d10c      	bne.n	8006ac4 <xTaskGenericNotifyFromISR+0x34>
	__asm volatile
 8006aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aae:	b672      	cpsid	i
 8006ab0:	f383 8811 	msr	BASEPRI, r3
 8006ab4:	f3bf 8f6f 	isb	sy
 8006ab8:	f3bf 8f4f 	dsb	sy
 8006abc:	b662      	cpsie	i
 8006abe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006ac0:	bf00      	nop
 8006ac2:	e7fe      	b.n	8006ac2 <xTaskGenericNotifyFromISR+0x32>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006ac4:	f000 fb2a 	bl	800711c <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	633b      	str	r3, [r7, #48]	; 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006acc:	f3ef 8211 	mrs	r2, BASEPRI
 8006ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad4:	b672      	cpsid	i
 8006ad6:	f383 8811 	msr	BASEPRI, r3
 8006ada:	f3bf 8f6f 	isb	sy
 8006ade:	f3bf 8f4f 	dsb	sy
 8006ae2:	b662      	cpsie	i
 8006ae4:	623a      	str	r2, [r7, #32]
 8006ae6:	61fb      	str	r3, [r7, #28]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006ae8:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006aea:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d004      	beq.n	8006afc <xTaskGenericNotifyFromISR+0x6c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8006af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006afe:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8006b02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b08:	2202      	movs	r2, #2
 8006b0a:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

			switch( eAction )
 8006b0e:	79fb      	ldrb	r3, [r7, #7]
 8006b10:	2b04      	cmp	r3, #4
 8006b12:	d82f      	bhi.n	8006b74 <xTaskGenericNotifyFromISR+0xe4>
 8006b14:	a201      	add	r2, pc, #4	; (adr r2, 8006b1c <xTaskGenericNotifyFromISR+0x8c>)
 8006b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b1a:	bf00      	nop
 8006b1c:	08006b9b 	.word	0x08006b9b
 8006b20:	08006b31 	.word	0x08006b31
 8006b24:	08006b43 	.word	0x08006b43
 8006b28:	08006b53 	.word	0x08006b53
 8006b2c:	08006b5d 	.word	0x08006b5d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8006b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b32:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	431a      	orrs	r2, r3
 8006b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b3c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8006b40:	e02e      	b.n	8006ba0 <xTaskGenericNotifyFromISR+0x110>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8006b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b44:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006b48:	1c5a      	adds	r2, r3, #1
 8006b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8006b50:	e026      	b.n	8006ba0 <xTaskGenericNotifyFromISR+0x110>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8006b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b54:	68ba      	ldr	r2, [r7, #8]
 8006b56:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8006b5a:	e021      	b.n	8006ba0 <xTaskGenericNotifyFromISR+0x110>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006b5c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006b60:	2b02      	cmp	r3, #2
 8006b62:	d004      	beq.n	8006b6e <xTaskGenericNotifyFromISR+0xde>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8006b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b66:	68ba      	ldr	r2, [r7, #8]
 8006b68:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8006b6c:	e018      	b.n	8006ba0 <xTaskGenericNotifyFromISR+0x110>
						xReturn = pdFAIL;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8006b72:	e015      	b.n	8006ba0 <xTaskGenericNotifyFromISR+0x110>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8006b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b76:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b7e:	d00e      	beq.n	8006b9e <xTaskGenericNotifyFromISR+0x10e>
	__asm volatile
 8006b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b84:	b672      	cpsid	i
 8006b86:	f383 8811 	msr	BASEPRI, r3
 8006b8a:	f3bf 8f6f 	isb	sy
 8006b8e:	f3bf 8f4f 	dsb	sy
 8006b92:	b662      	cpsie	i
 8006b94:	61bb      	str	r3, [r7, #24]
}
 8006b96:	bf00      	nop
 8006b98:	e7fe      	b.n	8006b98 <xTaskGenericNotifyFromISR+0x108>
					break;
 8006b9a:	bf00      	nop
 8006b9c:	e000      	b.n	8006ba0 <xTaskGenericNotifyFromISR+0x110>
					break;
 8006b9e:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006ba0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d147      	bne.n	8006c38 <xTaskGenericNotifyFromISR+0x1a8>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d00c      	beq.n	8006bca <xTaskGenericNotifyFromISR+0x13a>
	__asm volatile
 8006bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb4:	b672      	cpsid	i
 8006bb6:	f383 8811 	msr	BASEPRI, r3
 8006bba:	f3bf 8f6f 	isb	sy
 8006bbe:	f3bf 8f4f 	dsb	sy
 8006bc2:	b662      	cpsie	i
 8006bc4:	617b      	str	r3, [r7, #20]
}
 8006bc6:	bf00      	nop
 8006bc8:	e7fe      	b.n	8006bc8 <xTaskGenericNotifyFromISR+0x138>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bca:	4b21      	ldr	r3, [pc, #132]	; (8006c50 <xTaskGenericNotifyFromISR+0x1c0>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d11c      	bne.n	8006c0c <xTaskGenericNotifyFromISR+0x17c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd4:	3304      	adds	r3, #4
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f7fe fbbb 	bl	8005352 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be0:	2201      	movs	r2, #1
 8006be2:	409a      	lsls	r2, r3
 8006be4:	4b1b      	ldr	r3, [pc, #108]	; (8006c54 <xTaskGenericNotifyFromISR+0x1c4>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4313      	orrs	r3, r2
 8006bea:	4a1a      	ldr	r2, [pc, #104]	; (8006c54 <xTaskGenericNotifyFromISR+0x1c4>)
 8006bec:	6013      	str	r3, [r2, #0]
 8006bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bf2:	4613      	mov	r3, r2
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	4413      	add	r3, r2
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	4a17      	ldr	r2, [pc, #92]	; (8006c58 <xTaskGenericNotifyFromISR+0x1c8>)
 8006bfc:	441a      	add	r2, r3
 8006bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c00:	3304      	adds	r3, #4
 8006c02:	4619      	mov	r1, r3
 8006c04:	4610      	mov	r0, r2
 8006c06:	f7fe fb47 	bl	8005298 <vListInsertEnd>
 8006c0a:	e005      	b.n	8006c18 <xTaskGenericNotifyFromISR+0x188>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0e:	3318      	adds	r3, #24
 8006c10:	4619      	mov	r1, r3
 8006c12:	4812      	ldr	r0, [pc, #72]	; (8006c5c <xTaskGenericNotifyFromISR+0x1cc>)
 8006c14:	f7fe fb40 	bl	8005298 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c1c:	4b10      	ldr	r3, [pc, #64]	; (8006c60 <xTaskGenericNotifyFromISR+0x1d0>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d908      	bls.n	8006c38 <xTaskGenericNotifyFromISR+0x1a8>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8006c26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d002      	beq.n	8006c32 <xTaskGenericNotifyFromISR+0x1a2>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8006c2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c2e:	2201      	movs	r2, #1
 8006c30:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8006c32:	4b0c      	ldr	r3, [pc, #48]	; (8006c64 <xTaskGenericNotifyFromISR+0x1d4>)
 8006c34:	2201      	movs	r2, #1
 8006c36:	601a      	str	r2, [r3, #0]
 8006c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c3a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006c42:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8006c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3738      	adds	r7, #56	; 0x38
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	bf00      	nop
 8006c50:	20000ac4 	.word	0x20000ac4
 8006c54:	20000aa4 	.word	0x20000aa4
 8006c58:	200009a0 	.word	0x200009a0
 8006c5c:	20000a5c 	.word	0x20000a5c
 8006c60:	2000099c 	.word	0x2000099c
 8006c64:	20000ab0 	.word	0x20000ab0

08006c68 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006c72:	4b29      	ldr	r3, [pc, #164]	; (8006d18 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c78:	4b28      	ldr	r3, [pc, #160]	; (8006d1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	3304      	adds	r3, #4
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f7fe fb67 	bl	8005352 <uxListRemove>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d10b      	bne.n	8006ca2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006c8a:	4b24      	ldr	r3, [pc, #144]	; (8006d1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c90:	2201      	movs	r2, #1
 8006c92:	fa02 f303 	lsl.w	r3, r2, r3
 8006c96:	43da      	mvns	r2, r3
 8006c98:	4b21      	ldr	r3, [pc, #132]	; (8006d20 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4013      	ands	r3, r2
 8006c9e:	4a20      	ldr	r2, [pc, #128]	; (8006d20 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006ca0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca8:	d10a      	bne.n	8006cc0 <prvAddCurrentTaskToDelayedList+0x58>
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d007      	beq.n	8006cc0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cb0:	4b1a      	ldr	r3, [pc, #104]	; (8006d1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	3304      	adds	r3, #4
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	481a      	ldr	r0, [pc, #104]	; (8006d24 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006cba:	f7fe faed 	bl	8005298 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006cbe:	e026      	b.n	8006d0e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006cc0:	68fa      	ldr	r2, [r7, #12]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006cc8:	4b14      	ldr	r3, [pc, #80]	; (8006d1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	68ba      	ldr	r2, [r7, #8]
 8006cce:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006cd0:	68ba      	ldr	r2, [r7, #8]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d209      	bcs.n	8006cec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cd8:	4b13      	ldr	r3, [pc, #76]	; (8006d28 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	4b0f      	ldr	r3, [pc, #60]	; (8006d1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	3304      	adds	r3, #4
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	4610      	mov	r0, r2
 8006ce6:	f7fe fafb 	bl	80052e0 <vListInsert>
}
 8006cea:	e010      	b.n	8006d0e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cec:	4b0f      	ldr	r3, [pc, #60]	; (8006d2c <prvAddCurrentTaskToDelayedList+0xc4>)
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	4b0a      	ldr	r3, [pc, #40]	; (8006d1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	3304      	adds	r3, #4
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	4610      	mov	r0, r2
 8006cfa:	f7fe faf1 	bl	80052e0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006cfe:	4b0c      	ldr	r3, [pc, #48]	; (8006d30 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	68ba      	ldr	r2, [r7, #8]
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d202      	bcs.n	8006d0e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006d08:	4a09      	ldr	r2, [pc, #36]	; (8006d30 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	6013      	str	r3, [r2, #0]
}
 8006d0e:	bf00      	nop
 8006d10:	3710      	adds	r7, #16
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
 8006d16:	bf00      	nop
 8006d18:	20000aa0 	.word	0x20000aa0
 8006d1c:	2000099c 	.word	0x2000099c
 8006d20:	20000aa4 	.word	0x20000aa4
 8006d24:	20000a88 	.word	0x20000a88
 8006d28:	20000a58 	.word	0x20000a58
 8006d2c:	20000a54 	.word	0x20000a54
 8006d30:	20000abc 	.word	0x20000abc

08006d34 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006d34:	b480      	push	{r7}
 8006d36:	b085      	sub	sp, #20
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	3b04      	subs	r3, #4
 8006d44:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006d4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	3b04      	subs	r3, #4
 8006d52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	f023 0201 	bic.w	r2, r3, #1
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	3b04      	subs	r3, #4
 8006d62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006d64:	4a0c      	ldr	r2, [pc, #48]	; (8006d98 <pxPortInitialiseStack+0x64>)
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	3b14      	subs	r3, #20
 8006d6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	3b04      	subs	r3, #4
 8006d7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f06f 0202 	mvn.w	r2, #2
 8006d82:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	3b20      	subs	r3, #32
 8006d88:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3714      	adds	r7, #20
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr
 8006d98:	08006d9d 	.word	0x08006d9d

08006d9c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b085      	sub	sp, #20
 8006da0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006da2:	2300      	movs	r3, #0
 8006da4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006da6:	4b14      	ldr	r3, [pc, #80]	; (8006df8 <prvTaskExitError+0x5c>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dae:	d00c      	beq.n	8006dca <prvTaskExitError+0x2e>
	__asm volatile
 8006db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db4:	b672      	cpsid	i
 8006db6:	f383 8811 	msr	BASEPRI, r3
 8006dba:	f3bf 8f6f 	isb	sy
 8006dbe:	f3bf 8f4f 	dsb	sy
 8006dc2:	b662      	cpsie	i
 8006dc4:	60fb      	str	r3, [r7, #12]
}
 8006dc6:	bf00      	nop
 8006dc8:	e7fe      	b.n	8006dc8 <prvTaskExitError+0x2c>
	__asm volatile
 8006dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dce:	b672      	cpsid	i
 8006dd0:	f383 8811 	msr	BASEPRI, r3
 8006dd4:	f3bf 8f6f 	isb	sy
 8006dd8:	f3bf 8f4f 	dsb	sy
 8006ddc:	b662      	cpsie	i
 8006dde:	60bb      	str	r3, [r7, #8]
}
 8006de0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006de2:	bf00      	nop
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d0fc      	beq.n	8006de4 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006dea:	bf00      	nop
 8006dec:	bf00      	nop
 8006dee:	3714      	adds	r7, #20
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr
 8006df8:	2000000c 	.word	0x2000000c
 8006dfc:	00000000 	.word	0x00000000

08006e00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006e00:	4b07      	ldr	r3, [pc, #28]	; (8006e20 <pxCurrentTCBConst2>)
 8006e02:	6819      	ldr	r1, [r3, #0]
 8006e04:	6808      	ldr	r0, [r1, #0]
 8006e06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e0a:	f380 8809 	msr	PSP, r0
 8006e0e:	f3bf 8f6f 	isb	sy
 8006e12:	f04f 0000 	mov.w	r0, #0
 8006e16:	f380 8811 	msr	BASEPRI, r0
 8006e1a:	4770      	bx	lr
 8006e1c:	f3af 8000 	nop.w

08006e20 <pxCurrentTCBConst2>:
 8006e20:	2000099c 	.word	0x2000099c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006e24:	bf00      	nop
 8006e26:	bf00      	nop

08006e28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006e28:	4808      	ldr	r0, [pc, #32]	; (8006e4c <prvPortStartFirstTask+0x24>)
 8006e2a:	6800      	ldr	r0, [r0, #0]
 8006e2c:	6800      	ldr	r0, [r0, #0]
 8006e2e:	f380 8808 	msr	MSP, r0
 8006e32:	f04f 0000 	mov.w	r0, #0
 8006e36:	f380 8814 	msr	CONTROL, r0
 8006e3a:	b662      	cpsie	i
 8006e3c:	b661      	cpsie	f
 8006e3e:	f3bf 8f4f 	dsb	sy
 8006e42:	f3bf 8f6f 	isb	sy
 8006e46:	df00      	svc	0
 8006e48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006e4a:	bf00      	nop
 8006e4c:	e000ed08 	.word	0xe000ed08

08006e50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006e56:	4b37      	ldr	r3, [pc, #220]	; (8006f34 <xPortStartScheduler+0xe4>)
 8006e58:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	22ff      	movs	r2, #255	; 0xff
 8006e66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006e70:	78fb      	ldrb	r3, [r7, #3]
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006e78:	b2da      	uxtb	r2, r3
 8006e7a:	4b2f      	ldr	r3, [pc, #188]	; (8006f38 <xPortStartScheduler+0xe8>)
 8006e7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006e7e:	4b2f      	ldr	r3, [pc, #188]	; (8006f3c <xPortStartScheduler+0xec>)
 8006e80:	2207      	movs	r2, #7
 8006e82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e84:	e009      	b.n	8006e9a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006e86:	4b2d      	ldr	r3, [pc, #180]	; (8006f3c <xPortStartScheduler+0xec>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	3b01      	subs	r3, #1
 8006e8c:	4a2b      	ldr	r2, [pc, #172]	; (8006f3c <xPortStartScheduler+0xec>)
 8006e8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006e90:	78fb      	ldrb	r3, [r7, #3]
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	005b      	lsls	r3, r3, #1
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e9a:	78fb      	ldrb	r3, [r7, #3]
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ea2:	2b80      	cmp	r3, #128	; 0x80
 8006ea4:	d0ef      	beq.n	8006e86 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006ea6:	4b25      	ldr	r3, [pc, #148]	; (8006f3c <xPortStartScheduler+0xec>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f1c3 0307 	rsb	r3, r3, #7
 8006eae:	2b04      	cmp	r3, #4
 8006eb0:	d00c      	beq.n	8006ecc <xPortStartScheduler+0x7c>
	__asm volatile
 8006eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb6:	b672      	cpsid	i
 8006eb8:	f383 8811 	msr	BASEPRI, r3
 8006ebc:	f3bf 8f6f 	isb	sy
 8006ec0:	f3bf 8f4f 	dsb	sy
 8006ec4:	b662      	cpsie	i
 8006ec6:	60bb      	str	r3, [r7, #8]
}
 8006ec8:	bf00      	nop
 8006eca:	e7fe      	b.n	8006eca <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006ecc:	4b1b      	ldr	r3, [pc, #108]	; (8006f3c <xPortStartScheduler+0xec>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	021b      	lsls	r3, r3, #8
 8006ed2:	4a1a      	ldr	r2, [pc, #104]	; (8006f3c <xPortStartScheduler+0xec>)
 8006ed4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006ed6:	4b19      	ldr	r3, [pc, #100]	; (8006f3c <xPortStartScheduler+0xec>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006ede:	4a17      	ldr	r2, [pc, #92]	; (8006f3c <xPortStartScheduler+0xec>)
 8006ee0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	b2da      	uxtb	r2, r3
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006eea:	4b15      	ldr	r3, [pc, #84]	; (8006f40 <xPortStartScheduler+0xf0>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a14      	ldr	r2, [pc, #80]	; (8006f40 <xPortStartScheduler+0xf0>)
 8006ef0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006ef4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006ef6:	4b12      	ldr	r3, [pc, #72]	; (8006f40 <xPortStartScheduler+0xf0>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a11      	ldr	r2, [pc, #68]	; (8006f40 <xPortStartScheduler+0xf0>)
 8006efc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006f00:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006f02:	f000 f8dd 	bl	80070c0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006f06:	4b0f      	ldr	r3, [pc, #60]	; (8006f44 <xPortStartScheduler+0xf4>)
 8006f08:	2200      	movs	r2, #0
 8006f0a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006f0c:	f000 f8fc 	bl	8007108 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006f10:	4b0d      	ldr	r3, [pc, #52]	; (8006f48 <xPortStartScheduler+0xf8>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a0c      	ldr	r2, [pc, #48]	; (8006f48 <xPortStartScheduler+0xf8>)
 8006f16:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006f1a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006f1c:	f7ff ff84 	bl	8006e28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006f20:	f7ff f998 	bl	8006254 <vTaskSwitchContext>
	prvTaskExitError();
 8006f24:	f7ff ff3a 	bl	8006d9c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006f28:	2300      	movs	r3, #0
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3710      	adds	r7, #16
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}
 8006f32:	bf00      	nop
 8006f34:	e000e400 	.word	0xe000e400
 8006f38:	20000ac8 	.word	0x20000ac8
 8006f3c:	20000acc 	.word	0x20000acc
 8006f40:	e000ed20 	.word	0xe000ed20
 8006f44:	2000000c 	.word	0x2000000c
 8006f48:	e000ef34 	.word	0xe000ef34

08006f4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b083      	sub	sp, #12
 8006f50:	af00      	add	r7, sp, #0
	__asm volatile
 8006f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f56:	b672      	cpsid	i
 8006f58:	f383 8811 	msr	BASEPRI, r3
 8006f5c:	f3bf 8f6f 	isb	sy
 8006f60:	f3bf 8f4f 	dsb	sy
 8006f64:	b662      	cpsie	i
 8006f66:	607b      	str	r3, [r7, #4]
}
 8006f68:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006f6a:	4b10      	ldr	r3, [pc, #64]	; (8006fac <vPortEnterCritical+0x60>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	3301      	adds	r3, #1
 8006f70:	4a0e      	ldr	r2, [pc, #56]	; (8006fac <vPortEnterCritical+0x60>)
 8006f72:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006f74:	4b0d      	ldr	r3, [pc, #52]	; (8006fac <vPortEnterCritical+0x60>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d111      	bne.n	8006fa0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006f7c:	4b0c      	ldr	r3, [pc, #48]	; (8006fb0 <vPortEnterCritical+0x64>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d00c      	beq.n	8006fa0 <vPortEnterCritical+0x54>
	__asm volatile
 8006f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f8a:	b672      	cpsid	i
 8006f8c:	f383 8811 	msr	BASEPRI, r3
 8006f90:	f3bf 8f6f 	isb	sy
 8006f94:	f3bf 8f4f 	dsb	sy
 8006f98:	b662      	cpsie	i
 8006f9a:	603b      	str	r3, [r7, #0]
}
 8006f9c:	bf00      	nop
 8006f9e:	e7fe      	b.n	8006f9e <vPortEnterCritical+0x52>
	}
}
 8006fa0:	bf00      	nop
 8006fa2:	370c      	adds	r7, #12
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr
 8006fac:	2000000c 	.word	0x2000000c
 8006fb0:	e000ed04 	.word	0xe000ed04

08006fb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006fba:	4b13      	ldr	r3, [pc, #76]	; (8007008 <vPortExitCritical+0x54>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d10c      	bne.n	8006fdc <vPortExitCritical+0x28>
	__asm volatile
 8006fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc6:	b672      	cpsid	i
 8006fc8:	f383 8811 	msr	BASEPRI, r3
 8006fcc:	f3bf 8f6f 	isb	sy
 8006fd0:	f3bf 8f4f 	dsb	sy
 8006fd4:	b662      	cpsie	i
 8006fd6:	607b      	str	r3, [r7, #4]
}
 8006fd8:	bf00      	nop
 8006fda:	e7fe      	b.n	8006fda <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8006fdc:	4b0a      	ldr	r3, [pc, #40]	; (8007008 <vPortExitCritical+0x54>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	3b01      	subs	r3, #1
 8006fe2:	4a09      	ldr	r2, [pc, #36]	; (8007008 <vPortExitCritical+0x54>)
 8006fe4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006fe6:	4b08      	ldr	r3, [pc, #32]	; (8007008 <vPortExitCritical+0x54>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d105      	bne.n	8006ffa <vPortExitCritical+0x46>
 8006fee:	2300      	movs	r3, #0
 8006ff0:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	f383 8811 	msr	BASEPRI, r3
}
 8006ff8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006ffa:	bf00      	nop
 8006ffc:	370c      	adds	r7, #12
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr
 8007006:	bf00      	nop
 8007008:	2000000c 	.word	0x2000000c
 800700c:	00000000 	.word	0x00000000

08007010 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007010:	f3ef 8009 	mrs	r0, PSP
 8007014:	f3bf 8f6f 	isb	sy
 8007018:	4b15      	ldr	r3, [pc, #84]	; (8007070 <pxCurrentTCBConst>)
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	f01e 0f10 	tst.w	lr, #16
 8007020:	bf08      	it	eq
 8007022:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007026:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800702a:	6010      	str	r0, [r2, #0]
 800702c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007030:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007034:	b672      	cpsid	i
 8007036:	f380 8811 	msr	BASEPRI, r0
 800703a:	f3bf 8f4f 	dsb	sy
 800703e:	f3bf 8f6f 	isb	sy
 8007042:	b662      	cpsie	i
 8007044:	f7ff f906 	bl	8006254 <vTaskSwitchContext>
 8007048:	f04f 0000 	mov.w	r0, #0
 800704c:	f380 8811 	msr	BASEPRI, r0
 8007050:	bc09      	pop	{r0, r3}
 8007052:	6819      	ldr	r1, [r3, #0]
 8007054:	6808      	ldr	r0, [r1, #0]
 8007056:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800705a:	f01e 0f10 	tst.w	lr, #16
 800705e:	bf08      	it	eq
 8007060:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007064:	f380 8809 	msr	PSP, r0
 8007068:	f3bf 8f6f 	isb	sy
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop

08007070 <pxCurrentTCBConst>:
 8007070:	2000099c 	.word	0x2000099c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007074:	bf00      	nop
 8007076:	bf00      	nop

08007078 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b082      	sub	sp, #8
 800707c:	af00      	add	r7, sp, #0
	__asm volatile
 800707e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007082:	b672      	cpsid	i
 8007084:	f383 8811 	msr	BASEPRI, r3
 8007088:	f3bf 8f6f 	isb	sy
 800708c:	f3bf 8f4f 	dsb	sy
 8007090:	b662      	cpsie	i
 8007092:	607b      	str	r3, [r7, #4]
}
 8007094:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007096:	f7ff f823 	bl	80060e0 <xTaskIncrementTick>
 800709a:	4603      	mov	r3, r0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d003      	beq.n	80070a8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80070a0:	4b06      	ldr	r3, [pc, #24]	; (80070bc <SysTick_Handler+0x44>)
 80070a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070a6:	601a      	str	r2, [r3, #0]
 80070a8:	2300      	movs	r3, #0
 80070aa:	603b      	str	r3, [r7, #0]
	__asm volatile
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	f383 8811 	msr	BASEPRI, r3
}
 80070b2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80070b4:	bf00      	nop
 80070b6:	3708      	adds	r7, #8
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}
 80070bc:	e000ed04 	.word	0xe000ed04

080070c0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80070c0:	b480      	push	{r7}
 80070c2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80070c4:	4b0b      	ldr	r3, [pc, #44]	; (80070f4 <vPortSetupTimerInterrupt+0x34>)
 80070c6:	2200      	movs	r2, #0
 80070c8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80070ca:	4b0b      	ldr	r3, [pc, #44]	; (80070f8 <vPortSetupTimerInterrupt+0x38>)
 80070cc:	2200      	movs	r2, #0
 80070ce:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80070d0:	4b0a      	ldr	r3, [pc, #40]	; (80070fc <vPortSetupTimerInterrupt+0x3c>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a0a      	ldr	r2, [pc, #40]	; (8007100 <vPortSetupTimerInterrupt+0x40>)
 80070d6:	fba2 2303 	umull	r2, r3, r2, r3
 80070da:	099b      	lsrs	r3, r3, #6
 80070dc:	4a09      	ldr	r2, [pc, #36]	; (8007104 <vPortSetupTimerInterrupt+0x44>)
 80070de:	3b01      	subs	r3, #1
 80070e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80070e2:	4b04      	ldr	r3, [pc, #16]	; (80070f4 <vPortSetupTimerInterrupt+0x34>)
 80070e4:	2207      	movs	r2, #7
 80070e6:	601a      	str	r2, [r3, #0]
}
 80070e8:	bf00      	nop
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	4770      	bx	lr
 80070f2:	bf00      	nop
 80070f4:	e000e010 	.word	0xe000e010
 80070f8:	e000e018 	.word	0xe000e018
 80070fc:	20000000 	.word	0x20000000
 8007100:	10624dd3 	.word	0x10624dd3
 8007104:	e000e014 	.word	0xe000e014

08007108 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007108:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007118 <vPortEnableVFP+0x10>
 800710c:	6801      	ldr	r1, [r0, #0]
 800710e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007112:	6001      	str	r1, [r0, #0]
 8007114:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007116:	bf00      	nop
 8007118:	e000ed88 	.word	0xe000ed88

0800711c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800711c:	b480      	push	{r7}
 800711e:	b085      	sub	sp, #20
 8007120:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007122:	f3ef 8305 	mrs	r3, IPSR
 8007126:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2b0f      	cmp	r3, #15
 800712c:	d916      	bls.n	800715c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800712e:	4a19      	ldr	r2, [pc, #100]	; (8007194 <vPortValidateInterruptPriority+0x78>)
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	4413      	add	r3, r2
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007138:	4b17      	ldr	r3, [pc, #92]	; (8007198 <vPortValidateInterruptPriority+0x7c>)
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	7afa      	ldrb	r2, [r7, #11]
 800713e:	429a      	cmp	r2, r3
 8007140:	d20c      	bcs.n	800715c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8007142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007146:	b672      	cpsid	i
 8007148:	f383 8811 	msr	BASEPRI, r3
 800714c:	f3bf 8f6f 	isb	sy
 8007150:	f3bf 8f4f 	dsb	sy
 8007154:	b662      	cpsie	i
 8007156:	607b      	str	r3, [r7, #4]
}
 8007158:	bf00      	nop
 800715a:	e7fe      	b.n	800715a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800715c:	4b0f      	ldr	r3, [pc, #60]	; (800719c <vPortValidateInterruptPriority+0x80>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007164:	4b0e      	ldr	r3, [pc, #56]	; (80071a0 <vPortValidateInterruptPriority+0x84>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	429a      	cmp	r2, r3
 800716a:	d90c      	bls.n	8007186 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800716c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007170:	b672      	cpsid	i
 8007172:	f383 8811 	msr	BASEPRI, r3
 8007176:	f3bf 8f6f 	isb	sy
 800717a:	f3bf 8f4f 	dsb	sy
 800717e:	b662      	cpsie	i
 8007180:	603b      	str	r3, [r7, #0]
}
 8007182:	bf00      	nop
 8007184:	e7fe      	b.n	8007184 <vPortValidateInterruptPriority+0x68>
	}
 8007186:	bf00      	nop
 8007188:	3714      	adds	r7, #20
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr
 8007192:	bf00      	nop
 8007194:	e000e3f0 	.word	0xe000e3f0
 8007198:	20000ac8 	.word	0x20000ac8
 800719c:	e000ed0c 	.word	0xe000ed0c
 80071a0:	20000acc 	.word	0x20000acc

080071a4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b08a      	sub	sp, #40	; 0x28
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80071ac:	2300      	movs	r3, #0
 80071ae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80071b0:	f7fe feea 	bl	8005f88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80071b4:	4b5b      	ldr	r3, [pc, #364]	; (8007324 <pvPortMalloc+0x180>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d101      	bne.n	80071c0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80071bc:	f000 f91a 	bl	80073f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80071c0:	4b59      	ldr	r3, [pc, #356]	; (8007328 <pvPortMalloc+0x184>)
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	4013      	ands	r3, r2
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	f040 8092 	bne.w	80072f2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d01f      	beq.n	8007214 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80071d4:	2208      	movs	r2, #8
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	4413      	add	r3, r2
 80071da:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f003 0307 	and.w	r3, r3, #7
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d016      	beq.n	8007214 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f023 0307 	bic.w	r3, r3, #7
 80071ec:	3308      	adds	r3, #8
 80071ee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f003 0307 	and.w	r3, r3, #7
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d00c      	beq.n	8007214 <pvPortMalloc+0x70>
	__asm volatile
 80071fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071fe:	b672      	cpsid	i
 8007200:	f383 8811 	msr	BASEPRI, r3
 8007204:	f3bf 8f6f 	isb	sy
 8007208:	f3bf 8f4f 	dsb	sy
 800720c:	b662      	cpsie	i
 800720e:	617b      	str	r3, [r7, #20]
}
 8007210:	bf00      	nop
 8007212:	e7fe      	b.n	8007212 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d06b      	beq.n	80072f2 <pvPortMalloc+0x14e>
 800721a:	4b44      	ldr	r3, [pc, #272]	; (800732c <pvPortMalloc+0x188>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	429a      	cmp	r2, r3
 8007222:	d866      	bhi.n	80072f2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007224:	4b42      	ldr	r3, [pc, #264]	; (8007330 <pvPortMalloc+0x18c>)
 8007226:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007228:	4b41      	ldr	r3, [pc, #260]	; (8007330 <pvPortMalloc+0x18c>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800722e:	e004      	b.n	800723a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8007230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007232:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800723a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	429a      	cmp	r2, r3
 8007242:	d903      	bls.n	800724c <pvPortMalloc+0xa8>
 8007244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d1f1      	bne.n	8007230 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800724c:	4b35      	ldr	r3, [pc, #212]	; (8007324 <pvPortMalloc+0x180>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007252:	429a      	cmp	r2, r3
 8007254:	d04d      	beq.n	80072f2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007256:	6a3b      	ldr	r3, [r7, #32]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	2208      	movs	r2, #8
 800725c:	4413      	add	r3, r2
 800725e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	6a3b      	ldr	r3, [r7, #32]
 8007266:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726a:	685a      	ldr	r2, [r3, #4]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	1ad2      	subs	r2, r2, r3
 8007270:	2308      	movs	r3, #8
 8007272:	005b      	lsls	r3, r3, #1
 8007274:	429a      	cmp	r2, r3
 8007276:	d921      	bls.n	80072bc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4413      	add	r3, r2
 800727e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007280:	69bb      	ldr	r3, [r7, #24]
 8007282:	f003 0307 	and.w	r3, r3, #7
 8007286:	2b00      	cmp	r3, #0
 8007288:	d00c      	beq.n	80072a4 <pvPortMalloc+0x100>
	__asm volatile
 800728a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800728e:	b672      	cpsid	i
 8007290:	f383 8811 	msr	BASEPRI, r3
 8007294:	f3bf 8f6f 	isb	sy
 8007298:	f3bf 8f4f 	dsb	sy
 800729c:	b662      	cpsie	i
 800729e:	613b      	str	r3, [r7, #16]
}
 80072a0:	bf00      	nop
 80072a2:	e7fe      	b.n	80072a2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80072a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a6:	685a      	ldr	r2, [r3, #4]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	1ad2      	subs	r2, r2, r3
 80072ac:	69bb      	ldr	r3, [r7, #24]
 80072ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80072b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80072b6:	69b8      	ldr	r0, [r7, #24]
 80072b8:	f000 f8fe 	bl	80074b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80072bc:	4b1b      	ldr	r3, [pc, #108]	; (800732c <pvPortMalloc+0x188>)
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	1ad3      	subs	r3, r2, r3
 80072c6:	4a19      	ldr	r2, [pc, #100]	; (800732c <pvPortMalloc+0x188>)
 80072c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80072ca:	4b18      	ldr	r3, [pc, #96]	; (800732c <pvPortMalloc+0x188>)
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	4b19      	ldr	r3, [pc, #100]	; (8007334 <pvPortMalloc+0x190>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d203      	bcs.n	80072de <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80072d6:	4b15      	ldr	r3, [pc, #84]	; (800732c <pvPortMalloc+0x188>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a16      	ldr	r2, [pc, #88]	; (8007334 <pvPortMalloc+0x190>)
 80072dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80072de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e0:	685a      	ldr	r2, [r3, #4]
 80072e2:	4b11      	ldr	r3, [pc, #68]	; (8007328 <pvPortMalloc+0x184>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	431a      	orrs	r2, r3
 80072e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80072ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ee:	2200      	movs	r2, #0
 80072f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80072f2:	f7fe fe57 	bl	8005fa4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80072f6:	69fb      	ldr	r3, [r7, #28]
 80072f8:	f003 0307 	and.w	r3, r3, #7
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d00c      	beq.n	800731a <pvPortMalloc+0x176>
	__asm volatile
 8007300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007304:	b672      	cpsid	i
 8007306:	f383 8811 	msr	BASEPRI, r3
 800730a:	f3bf 8f6f 	isb	sy
 800730e:	f3bf 8f4f 	dsb	sy
 8007312:	b662      	cpsie	i
 8007314:	60fb      	str	r3, [r7, #12]
}
 8007316:	bf00      	nop
 8007318:	e7fe      	b.n	8007318 <pvPortMalloc+0x174>
	return pvReturn;
 800731a:	69fb      	ldr	r3, [r7, #28]
}
 800731c:	4618      	mov	r0, r3
 800731e:	3728      	adds	r7, #40	; 0x28
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}
 8007324:	200046d8 	.word	0x200046d8
 8007328:	200046e4 	.word	0x200046e4
 800732c:	200046dc 	.word	0x200046dc
 8007330:	200046d0 	.word	0x200046d0
 8007334:	200046e0 	.word	0x200046e0

08007338 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b086      	sub	sp, #24
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d04c      	beq.n	80073e4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800734a:	2308      	movs	r3, #8
 800734c:	425b      	negs	r3, r3
 800734e:	697a      	ldr	r2, [r7, #20]
 8007350:	4413      	add	r3, r2
 8007352:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	685a      	ldr	r2, [r3, #4]
 800735c:	4b23      	ldr	r3, [pc, #140]	; (80073ec <vPortFree+0xb4>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4013      	ands	r3, r2
 8007362:	2b00      	cmp	r3, #0
 8007364:	d10c      	bne.n	8007380 <vPortFree+0x48>
	__asm volatile
 8007366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800736a:	b672      	cpsid	i
 800736c:	f383 8811 	msr	BASEPRI, r3
 8007370:	f3bf 8f6f 	isb	sy
 8007374:	f3bf 8f4f 	dsb	sy
 8007378:	b662      	cpsie	i
 800737a:	60fb      	str	r3, [r7, #12]
}
 800737c:	bf00      	nop
 800737e:	e7fe      	b.n	800737e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d00c      	beq.n	80073a2 <vPortFree+0x6a>
	__asm volatile
 8007388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800738c:	b672      	cpsid	i
 800738e:	f383 8811 	msr	BASEPRI, r3
 8007392:	f3bf 8f6f 	isb	sy
 8007396:	f3bf 8f4f 	dsb	sy
 800739a:	b662      	cpsie	i
 800739c:	60bb      	str	r3, [r7, #8]
}
 800739e:	bf00      	nop
 80073a0:	e7fe      	b.n	80073a0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	685a      	ldr	r2, [r3, #4]
 80073a6:	4b11      	ldr	r3, [pc, #68]	; (80073ec <vPortFree+0xb4>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4013      	ands	r3, r2
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d019      	beq.n	80073e4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d115      	bne.n	80073e4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	685a      	ldr	r2, [r3, #4]
 80073bc:	4b0b      	ldr	r3, [pc, #44]	; (80073ec <vPortFree+0xb4>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	43db      	mvns	r3, r3
 80073c2:	401a      	ands	r2, r3
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80073c8:	f7fe fdde 	bl	8005f88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	685a      	ldr	r2, [r3, #4]
 80073d0:	4b07      	ldr	r3, [pc, #28]	; (80073f0 <vPortFree+0xb8>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4413      	add	r3, r2
 80073d6:	4a06      	ldr	r2, [pc, #24]	; (80073f0 <vPortFree+0xb8>)
 80073d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80073da:	6938      	ldr	r0, [r7, #16]
 80073dc:	f000 f86c 	bl	80074b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80073e0:	f7fe fde0 	bl	8005fa4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80073e4:	bf00      	nop
 80073e6:	3718      	adds	r7, #24
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}
 80073ec:	200046e4 	.word	0x200046e4
 80073f0:	200046dc 	.word	0x200046dc

080073f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80073f4:	b480      	push	{r7}
 80073f6:	b085      	sub	sp, #20
 80073f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80073fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80073fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007400:	4b27      	ldr	r3, [pc, #156]	; (80074a0 <prvHeapInit+0xac>)
 8007402:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f003 0307 	and.w	r3, r3, #7
 800740a:	2b00      	cmp	r3, #0
 800740c:	d00c      	beq.n	8007428 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	3307      	adds	r3, #7
 8007412:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f023 0307 	bic.w	r3, r3, #7
 800741a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800741c:	68ba      	ldr	r2, [r7, #8]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	1ad3      	subs	r3, r2, r3
 8007422:	4a1f      	ldr	r2, [pc, #124]	; (80074a0 <prvHeapInit+0xac>)
 8007424:	4413      	add	r3, r2
 8007426:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800742c:	4a1d      	ldr	r2, [pc, #116]	; (80074a4 <prvHeapInit+0xb0>)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007432:	4b1c      	ldr	r3, [pc, #112]	; (80074a4 <prvHeapInit+0xb0>)
 8007434:	2200      	movs	r2, #0
 8007436:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	68ba      	ldr	r2, [r7, #8]
 800743c:	4413      	add	r3, r2
 800743e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007440:	2208      	movs	r2, #8
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	1a9b      	subs	r3, r3, r2
 8007446:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f023 0307 	bic.w	r3, r3, #7
 800744e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	4a15      	ldr	r2, [pc, #84]	; (80074a8 <prvHeapInit+0xb4>)
 8007454:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007456:	4b14      	ldr	r3, [pc, #80]	; (80074a8 <prvHeapInit+0xb4>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	2200      	movs	r2, #0
 800745c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800745e:	4b12      	ldr	r3, [pc, #72]	; (80074a8 <prvHeapInit+0xb4>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	2200      	movs	r2, #0
 8007464:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	68fa      	ldr	r2, [r7, #12]
 800746e:	1ad2      	subs	r2, r2, r3
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007474:	4b0c      	ldr	r3, [pc, #48]	; (80074a8 <prvHeapInit+0xb4>)
 8007476:	681a      	ldr	r2, [r3, #0]
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	4a0a      	ldr	r2, [pc, #40]	; (80074ac <prvHeapInit+0xb8>)
 8007482:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	4a09      	ldr	r2, [pc, #36]	; (80074b0 <prvHeapInit+0xbc>)
 800748a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800748c:	4b09      	ldr	r3, [pc, #36]	; (80074b4 <prvHeapInit+0xc0>)
 800748e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007492:	601a      	str	r2, [r3, #0]
}
 8007494:	bf00      	nop
 8007496:	3714      	adds	r7, #20
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr
 80074a0:	20000ad0 	.word	0x20000ad0
 80074a4:	200046d0 	.word	0x200046d0
 80074a8:	200046d8 	.word	0x200046d8
 80074ac:	200046e0 	.word	0x200046e0
 80074b0:	200046dc 	.word	0x200046dc
 80074b4:	200046e4 	.word	0x200046e4

080074b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80074b8:	b480      	push	{r7}
 80074ba:	b085      	sub	sp, #20
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80074c0:	4b28      	ldr	r3, [pc, #160]	; (8007564 <prvInsertBlockIntoFreeList+0xac>)
 80074c2:	60fb      	str	r3, [r7, #12]
 80074c4:	e002      	b.n	80074cc <prvInsertBlockIntoFreeList+0x14>
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	60fb      	str	r3, [r7, #12]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d8f7      	bhi.n	80074c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	68ba      	ldr	r2, [r7, #8]
 80074e0:	4413      	add	r3, r2
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d108      	bne.n	80074fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	685a      	ldr	r2, [r3, #4]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	441a      	add	r2, r3
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	68ba      	ldr	r2, [r7, #8]
 8007504:	441a      	add	r2, r3
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	429a      	cmp	r2, r3
 800750c:	d118      	bne.n	8007540 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	4b15      	ldr	r3, [pc, #84]	; (8007568 <prvInsertBlockIntoFreeList+0xb0>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	429a      	cmp	r2, r3
 8007518:	d00d      	beq.n	8007536 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	685a      	ldr	r2, [r3, #4]
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	441a      	add	r2, r3
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	601a      	str	r2, [r3, #0]
 8007534:	e008      	b.n	8007548 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007536:	4b0c      	ldr	r3, [pc, #48]	; (8007568 <prvInsertBlockIntoFreeList+0xb0>)
 8007538:	681a      	ldr	r2, [r3, #0]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	601a      	str	r2, [r3, #0]
 800753e:	e003      	b.n	8007548 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007548:	68fa      	ldr	r2, [r7, #12]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	429a      	cmp	r2, r3
 800754e:	d002      	beq.n	8007556 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007556:	bf00      	nop
 8007558:	3714      	adds	r7, #20
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr
 8007562:	bf00      	nop
 8007564:	200046d0 	.word	0x200046d0
 8007568:	200046d8 	.word	0x200046d8

0800756c <__libc_init_array>:
 800756c:	b570      	push	{r4, r5, r6, lr}
 800756e:	4d0d      	ldr	r5, [pc, #52]	; (80075a4 <__libc_init_array+0x38>)
 8007570:	4c0d      	ldr	r4, [pc, #52]	; (80075a8 <__libc_init_array+0x3c>)
 8007572:	1b64      	subs	r4, r4, r5
 8007574:	10a4      	asrs	r4, r4, #2
 8007576:	2600      	movs	r6, #0
 8007578:	42a6      	cmp	r6, r4
 800757a:	d109      	bne.n	8007590 <__libc_init_array+0x24>
 800757c:	4d0b      	ldr	r5, [pc, #44]	; (80075ac <__libc_init_array+0x40>)
 800757e:	4c0c      	ldr	r4, [pc, #48]	; (80075b0 <__libc_init_array+0x44>)
 8007580:	f000 f8f2 	bl	8007768 <_init>
 8007584:	1b64      	subs	r4, r4, r5
 8007586:	10a4      	asrs	r4, r4, #2
 8007588:	2600      	movs	r6, #0
 800758a:	42a6      	cmp	r6, r4
 800758c:	d105      	bne.n	800759a <__libc_init_array+0x2e>
 800758e:	bd70      	pop	{r4, r5, r6, pc}
 8007590:	f855 3b04 	ldr.w	r3, [r5], #4
 8007594:	4798      	blx	r3
 8007596:	3601      	adds	r6, #1
 8007598:	e7ee      	b.n	8007578 <__libc_init_array+0xc>
 800759a:	f855 3b04 	ldr.w	r3, [r5], #4
 800759e:	4798      	blx	r3
 80075a0:	3601      	adds	r6, #1
 80075a2:	e7f2      	b.n	800758a <__libc_init_array+0x1e>
 80075a4:	08007910 	.word	0x08007910
 80075a8:	08007910 	.word	0x08007910
 80075ac:	08007910 	.word	0x08007910
 80075b0:	08007914 	.word	0x08007914

080075b4 <__retarget_lock_acquire_recursive>:
 80075b4:	4770      	bx	lr

080075b6 <__retarget_lock_release_recursive>:
 80075b6:	4770      	bx	lr

080075b8 <memcpy>:
 80075b8:	440a      	add	r2, r1
 80075ba:	4291      	cmp	r1, r2
 80075bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80075c0:	d100      	bne.n	80075c4 <memcpy+0xc>
 80075c2:	4770      	bx	lr
 80075c4:	b510      	push	{r4, lr}
 80075c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075ce:	4291      	cmp	r1, r2
 80075d0:	d1f9      	bne.n	80075c6 <memcpy+0xe>
 80075d2:	bd10      	pop	{r4, pc}

080075d4 <memset>:
 80075d4:	4402      	add	r2, r0
 80075d6:	4603      	mov	r3, r0
 80075d8:	4293      	cmp	r3, r2
 80075da:	d100      	bne.n	80075de <memset+0xa>
 80075dc:	4770      	bx	lr
 80075de:	f803 1b01 	strb.w	r1, [r3], #1
 80075e2:	e7f9      	b.n	80075d8 <memset+0x4>

080075e4 <cleanup_glue>:
 80075e4:	b538      	push	{r3, r4, r5, lr}
 80075e6:	460c      	mov	r4, r1
 80075e8:	6809      	ldr	r1, [r1, #0]
 80075ea:	4605      	mov	r5, r0
 80075ec:	b109      	cbz	r1, 80075f2 <cleanup_glue+0xe>
 80075ee:	f7ff fff9 	bl	80075e4 <cleanup_glue>
 80075f2:	4621      	mov	r1, r4
 80075f4:	4628      	mov	r0, r5
 80075f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075fa:	f000 b869 	b.w	80076d0 <_free_r>
	...

08007600 <_reclaim_reent>:
 8007600:	4b2c      	ldr	r3, [pc, #176]	; (80076b4 <_reclaim_reent+0xb4>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4283      	cmp	r3, r0
 8007606:	b570      	push	{r4, r5, r6, lr}
 8007608:	4604      	mov	r4, r0
 800760a:	d051      	beq.n	80076b0 <_reclaim_reent+0xb0>
 800760c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800760e:	b143      	cbz	r3, 8007622 <_reclaim_reent+0x22>
 8007610:	68db      	ldr	r3, [r3, #12]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d14a      	bne.n	80076ac <_reclaim_reent+0xac>
 8007616:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007618:	6819      	ldr	r1, [r3, #0]
 800761a:	b111      	cbz	r1, 8007622 <_reclaim_reent+0x22>
 800761c:	4620      	mov	r0, r4
 800761e:	f000 f857 	bl	80076d0 <_free_r>
 8007622:	6961      	ldr	r1, [r4, #20]
 8007624:	b111      	cbz	r1, 800762c <_reclaim_reent+0x2c>
 8007626:	4620      	mov	r0, r4
 8007628:	f000 f852 	bl	80076d0 <_free_r>
 800762c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800762e:	b111      	cbz	r1, 8007636 <_reclaim_reent+0x36>
 8007630:	4620      	mov	r0, r4
 8007632:	f000 f84d 	bl	80076d0 <_free_r>
 8007636:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007638:	b111      	cbz	r1, 8007640 <_reclaim_reent+0x40>
 800763a:	4620      	mov	r0, r4
 800763c:	f000 f848 	bl	80076d0 <_free_r>
 8007640:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007642:	b111      	cbz	r1, 800764a <_reclaim_reent+0x4a>
 8007644:	4620      	mov	r0, r4
 8007646:	f000 f843 	bl	80076d0 <_free_r>
 800764a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800764c:	b111      	cbz	r1, 8007654 <_reclaim_reent+0x54>
 800764e:	4620      	mov	r0, r4
 8007650:	f000 f83e 	bl	80076d0 <_free_r>
 8007654:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007656:	b111      	cbz	r1, 800765e <_reclaim_reent+0x5e>
 8007658:	4620      	mov	r0, r4
 800765a:	f000 f839 	bl	80076d0 <_free_r>
 800765e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007660:	b111      	cbz	r1, 8007668 <_reclaim_reent+0x68>
 8007662:	4620      	mov	r0, r4
 8007664:	f000 f834 	bl	80076d0 <_free_r>
 8007668:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800766a:	b111      	cbz	r1, 8007672 <_reclaim_reent+0x72>
 800766c:	4620      	mov	r0, r4
 800766e:	f000 f82f 	bl	80076d0 <_free_r>
 8007672:	69a3      	ldr	r3, [r4, #24]
 8007674:	b1e3      	cbz	r3, 80076b0 <_reclaim_reent+0xb0>
 8007676:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007678:	4620      	mov	r0, r4
 800767a:	4798      	blx	r3
 800767c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800767e:	b1b9      	cbz	r1, 80076b0 <_reclaim_reent+0xb0>
 8007680:	4620      	mov	r0, r4
 8007682:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007686:	f7ff bfad 	b.w	80075e4 <cleanup_glue>
 800768a:	5949      	ldr	r1, [r1, r5]
 800768c:	b941      	cbnz	r1, 80076a0 <_reclaim_reent+0xa0>
 800768e:	3504      	adds	r5, #4
 8007690:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007692:	2d80      	cmp	r5, #128	; 0x80
 8007694:	68d9      	ldr	r1, [r3, #12]
 8007696:	d1f8      	bne.n	800768a <_reclaim_reent+0x8a>
 8007698:	4620      	mov	r0, r4
 800769a:	f000 f819 	bl	80076d0 <_free_r>
 800769e:	e7ba      	b.n	8007616 <_reclaim_reent+0x16>
 80076a0:	680e      	ldr	r6, [r1, #0]
 80076a2:	4620      	mov	r0, r4
 80076a4:	f000 f814 	bl	80076d0 <_free_r>
 80076a8:	4631      	mov	r1, r6
 80076aa:	e7ef      	b.n	800768c <_reclaim_reent+0x8c>
 80076ac:	2500      	movs	r5, #0
 80076ae:	e7ef      	b.n	8007690 <_reclaim_reent+0x90>
 80076b0:	bd70      	pop	{r4, r5, r6, pc}
 80076b2:	bf00      	nop
 80076b4:	20000010 	.word	0x20000010

080076b8 <__malloc_lock>:
 80076b8:	4801      	ldr	r0, [pc, #4]	; (80076c0 <__malloc_lock+0x8>)
 80076ba:	f7ff bf7b 	b.w	80075b4 <__retarget_lock_acquire_recursive>
 80076be:	bf00      	nop
 80076c0:	200046e8 	.word	0x200046e8

080076c4 <__malloc_unlock>:
 80076c4:	4801      	ldr	r0, [pc, #4]	; (80076cc <__malloc_unlock+0x8>)
 80076c6:	f7ff bf76 	b.w	80075b6 <__retarget_lock_release_recursive>
 80076ca:	bf00      	nop
 80076cc:	200046e8 	.word	0x200046e8

080076d0 <_free_r>:
 80076d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80076d2:	2900      	cmp	r1, #0
 80076d4:	d044      	beq.n	8007760 <_free_r+0x90>
 80076d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076da:	9001      	str	r0, [sp, #4]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	f1a1 0404 	sub.w	r4, r1, #4
 80076e2:	bfb8      	it	lt
 80076e4:	18e4      	addlt	r4, r4, r3
 80076e6:	f7ff ffe7 	bl	80076b8 <__malloc_lock>
 80076ea:	4a1e      	ldr	r2, [pc, #120]	; (8007764 <_free_r+0x94>)
 80076ec:	9801      	ldr	r0, [sp, #4]
 80076ee:	6813      	ldr	r3, [r2, #0]
 80076f0:	b933      	cbnz	r3, 8007700 <_free_r+0x30>
 80076f2:	6063      	str	r3, [r4, #4]
 80076f4:	6014      	str	r4, [r2, #0]
 80076f6:	b003      	add	sp, #12
 80076f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80076fc:	f7ff bfe2 	b.w	80076c4 <__malloc_unlock>
 8007700:	42a3      	cmp	r3, r4
 8007702:	d908      	bls.n	8007716 <_free_r+0x46>
 8007704:	6825      	ldr	r5, [r4, #0]
 8007706:	1961      	adds	r1, r4, r5
 8007708:	428b      	cmp	r3, r1
 800770a:	bf01      	itttt	eq
 800770c:	6819      	ldreq	r1, [r3, #0]
 800770e:	685b      	ldreq	r3, [r3, #4]
 8007710:	1949      	addeq	r1, r1, r5
 8007712:	6021      	streq	r1, [r4, #0]
 8007714:	e7ed      	b.n	80076f2 <_free_r+0x22>
 8007716:	461a      	mov	r2, r3
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	b10b      	cbz	r3, 8007720 <_free_r+0x50>
 800771c:	42a3      	cmp	r3, r4
 800771e:	d9fa      	bls.n	8007716 <_free_r+0x46>
 8007720:	6811      	ldr	r1, [r2, #0]
 8007722:	1855      	adds	r5, r2, r1
 8007724:	42a5      	cmp	r5, r4
 8007726:	d10b      	bne.n	8007740 <_free_r+0x70>
 8007728:	6824      	ldr	r4, [r4, #0]
 800772a:	4421      	add	r1, r4
 800772c:	1854      	adds	r4, r2, r1
 800772e:	42a3      	cmp	r3, r4
 8007730:	6011      	str	r1, [r2, #0]
 8007732:	d1e0      	bne.n	80076f6 <_free_r+0x26>
 8007734:	681c      	ldr	r4, [r3, #0]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	6053      	str	r3, [r2, #4]
 800773a:	4421      	add	r1, r4
 800773c:	6011      	str	r1, [r2, #0]
 800773e:	e7da      	b.n	80076f6 <_free_r+0x26>
 8007740:	d902      	bls.n	8007748 <_free_r+0x78>
 8007742:	230c      	movs	r3, #12
 8007744:	6003      	str	r3, [r0, #0]
 8007746:	e7d6      	b.n	80076f6 <_free_r+0x26>
 8007748:	6825      	ldr	r5, [r4, #0]
 800774a:	1961      	adds	r1, r4, r5
 800774c:	428b      	cmp	r3, r1
 800774e:	bf04      	itt	eq
 8007750:	6819      	ldreq	r1, [r3, #0]
 8007752:	685b      	ldreq	r3, [r3, #4]
 8007754:	6063      	str	r3, [r4, #4]
 8007756:	bf04      	itt	eq
 8007758:	1949      	addeq	r1, r1, r5
 800775a:	6021      	streq	r1, [r4, #0]
 800775c:	6054      	str	r4, [r2, #4]
 800775e:	e7ca      	b.n	80076f6 <_free_r+0x26>
 8007760:	b003      	add	sp, #12
 8007762:	bd30      	pop	{r4, r5, pc}
 8007764:	200046ec 	.word	0x200046ec

08007768 <_init>:
 8007768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800776a:	bf00      	nop
 800776c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800776e:	bc08      	pop	{r3}
 8007770:	469e      	mov	lr, r3
 8007772:	4770      	bx	lr

08007774 <_fini>:
 8007774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007776:	bf00      	nop
 8007778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800777a:	bc08      	pop	{r3}
 800777c:	469e      	mov	lr, r3
 800777e:	4770      	bx	lr
